[[0.007011,{"lines":{"0":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]],"1":[["                                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["                                                                                 ",{}]],"18":[["                                                                                 ",{}]],"19":[["                                                                                 ",{}]],"20":[["                                                                                 ",{}]],"21":[["                                                                                 ",{}]],"22":[["                                                                                 ",{}]],"23":[["                                                                                 ",{}]]},"cursor":{"x":16,"y":0,"visible":true}}],[4.508723,{"lines":{"0":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> wget https://phar.phpunit.de/phpunit.phar                        ",{}]]},"cursor":{"x":57}}],[1.326823,{"cursor":{"x":0,"y":1}}],[0.015226,{"lines":{"1":[["--2014-05-05 13:37:31--  https://phar.phpunit.de/phpunit.phar                    ",{}]],"2":[["Resolving phar.phpunit.de (phar.phpunit.de)... 188.94.27.25                      ",{}]],"3":[["Connecting to phar.phpunit.de (phar.phpunit.de)|188.94.27.25|:443...             ",{}]]},"cursor":{"x":69,"y":3}}],[0.032139,{"lines":{"3":[["Connecting to phar.phpunit.de (phar.phpunit.de)|188.94.27.25|:443... connected.  ",{}]]},"cursor":{"x":0,"y":4}}],[0.10886,{"lines":{"4":[["HTTP request sent, awaiting response...                                          ",{}]]},"cursor":{"x":40}}],[0.063043,{"lines":{"4":[["HTTP request sent, awaiting response... 200 OK                                   ",{}]],"5":[["Length: 3214376 (3.1M) [application/octet-stream]                                ",{}]]},"cursor":{"x":0,"y":6}}],[7.6e-05,{"lines":{"6":[["Saving to: ‘phpunit.phar’                                                        ",{}]],"8":[[" 0% [                                        ] 0           --.-K/s               ",{}]]},"cursor":{"x":80,"y":8}}],[0.208392,{"lines":{"8":[[" 9% [==>                                     ] 319,229     1.46MB/s              ",{}]]}}],[0.358698,{"lines":{"8":[["19% [======>                                 ] 630,525     1.06MB/s              ",{}]]}}],[0.204935,{"lines":{"8":[["38% [==============>                         ] 1,253,117   1.55MB/s              ",{}]]}}],[0.203557,{"lines":{"8":[["50% [===================>                    ] 1,613,565   1.58MB/s              ",{}]]}}],[0.204925,{"lines":{"8":[["61% [=======================>                ] 1,974,013   1.59MB/s              ",{}]]}}],[0.20303,{"lines":{"8":[["72% [============================>           ] 2,334,461   1.61MB/s              ",{}]]}}],[0.204501,{"lines":{"8":[["83% [================================>       ] 2,694,909   1.62MB/s              ",{}]]}}],[0.203797,{"lines":{"8":[["95% [=====================================>  ] 3,055,357   1.63MB/s              ",{}]]}}],[0.08498799999999999,{"lines":{"8":[["100%[=======================================>] 3,214,376   1.63MB/s   in 1.9s    ",{}]]},"cursor":{"x":0,"y":10}}],[0.0005629999999999999,{"lines":{"10":[["2014-05-05 13:37:33 (1.63 MB/s) - ‘phpunit.phar’ saved [3214376/3214376]         ",{}]],"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16,"y":12}}],[3.331003,{"lines":{"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> l                                                                ",{}]]},"cursor":{"x":17}}],[0.152011,{"lines":{"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls                                                               ",{}]]},"cursor":{"x":18}}],[0.063999,{"cursor":{"x":19}}],[0.9939789999999999,{"lines":{"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -                                                             ",{}]]},"cursor":{"x":20}}],[0.243985,{"lines":{"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]]},"cursor":{"x":21}}],[0.652169,{"cursor":{"x":0,"y":13}}],[0.001042,{"lines":{"13":[["total 3140                                                                       ",{}]],"14":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16,"y":15}}],[1.462854,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> p                                                                ",{}]]},"cursor":{"x":17}}],[0.151992,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ph                                                               ",{}]]},"cursor":{"x":18}}],[0.135946,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php                                                              ",{}]]},"cursor":{"x":19}}],[0.136011,{"cursor":{"x":20}}],[0.456049,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php p                                                            ",{}]]},"cursor":{"x":21}}],[0.199966,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php ph                                                           ",{}]]},"cursor":{"x":22}}],[0.136038,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php php                                                          ",{}]]},"cursor":{"x":23}}],[0.216079,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar                                                 ",{}]]},"cursor":{"x":33}}],[1.107908,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar -                                               ",{}]]},"cursor":{"x":34}}],[0.147972,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --                                              ",{}]]},"cursor":{"x":35}}],[0.104029,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --v                                             ",{}]]},"cursor":{"x":36}}],[0.167921,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --ve                                            ",{}]]},"cursor":{"x":37}}],[0.072029,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --ver                                           ",{}]]},"cursor":{"x":38}}],[0.180046,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --vers                                          ",{}]]},"cursor":{"x":39}}],[0.107911,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --versi                                         ",{}]]},"cursor":{"x":40}}],[0.039984,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --versio                                        ",{}]]},"cursor":{"x":41}}],[0.09603200000000001,{"lines":{"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]]},"cursor":{"x":42}}],[0.776204,{"cursor":{"x":0,"y":16}}],[0.018061,{"lines":{"16":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]]},"cursor":{"y":18}}],[0.001449,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[5.894463,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> c                                                                ",{}]]},"cursor":{"x":17}}],[0.151913,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ch                                                               ",{}]]},"cursor":{"x":18}}],[0.856023,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chm                                                              ",{}]]},"cursor":{"x":19}}],[0.143969,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmo                                                             ",{}]]},"cursor":{"x":20}}],[0.28398,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod                                                            ",{}]]},"cursor":{"x":21}}],[0.088058,{"cursor":{"x":22}}],[3.925979,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +                                                          ",{}]]},"cursor":{"x":23}}],[0.648002,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x                                                         ",{}]]},"cursor":{"x":24}}],[0.212012,{"cursor":{"x":25}}],[0.299993,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x p                                                       ",{}]]},"cursor":{"x":26}}],[0.123949,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x ph                                                      ",{}]]},"cursor":{"x":27}}],[0.112026,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x php                                                     ",{}]]},"cursor":{"x":28}}],[0.176027,{"lines":{"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]]},"cursor":{"x":38}}],[1.188084,{"cursor":{"x":0,"y":19}}],[0.0005,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[1.287415,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> c                                                                ",{}]]},"cursor":{"x":17}}],[0.119954,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp                                                               ",{}]]},"cursor":{"x":18}}],[0.06408999999999999,{"cursor":{"x":19}}],[0.403956,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp /                                                             ",{}]]},"cursor":{"x":20}}],[0.822905,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp                                                               ",{}]]},"cursor":{"x":19}}],[0.717858,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp p                                                             ",{}]]},"cursor":{"x":20}}],[0.121234,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp ph                                                            ",{}]]},"cursor":{"x":21}}],[0.107995,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp php                                                           ",{}]]},"cursor":{"x":22}}],[0.132005,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar                                                  ",{}]]},"cursor":{"x":32}}],[1.267991,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /                                                ",{}]]},"cursor":{"x":33}}],[0.359988,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /u                                               ",{}]]},"cursor":{"x":34}}],[0.111977,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /us                                              ",{}]]},"cursor":{"x":35}}],[0.204054,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr                                             ",{}]]},"cursor":{"x":36}}],[0.192833,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/                                            ",{}]]},"cursor":{"x":37}}],[0.735243,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/l                                           ",{}]]},"cursor":{"x":38}}],[0.211905,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/lo                                          ",{}]]},"cursor":{"x":39}}],[0.152039,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/                                      ",{}]]},"cursor":{"x":43}}],[0.835961,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/b                                     ",{}]]},"cursor":{"x":44}}],[0.172045,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/                                  ",{}]]},"cursor":{"x":47}}],[2.785915,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/p                                 ",{}]]},"cursor":{"x":48}}],[0.188038,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/ph                                ",{}]]},"cursor":{"x":49}}],[0.099996,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/php                               ",{}]]},"cursor":{"x":50}}],[0.300003,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/phpu                              ",{}]]},"cursor":{"x":51}}],[0.092015,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/phpun                             ",{}]]},"cursor":{"x":52}}],[0.16798,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/phpuni                            ",{}]]},"cursor":{"x":53}}],[0.207999,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> cp phpunit.phar /usr/local/bin/phpunit                           ",{}]]},"cursor":{"x":54}}],[2.688025,{"cursor":{"x":16}}],[1.11601,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> scp phpunit.phar /usr/local/bin/phpunit                          ",{}]]},"cursor":{"x":17}}],[0.119987,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sucp phpunit.phar /usr/local/bin/phpunit                         ",{}]]},"cursor":{"x":18}}],[0.191997,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudcp phpunit.phar /usr/local/bin/phpunit                        ",{}]]},"cursor":{"x":19}}],[0.131957,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudocp phpunit.phar /usr/local/bin/phpunit                       ",{}]]},"cursor":{"x":20}}],[0.09601899999999999,{"lines":{"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]]},"cursor":{"x":21}}],[0.824156,{"cursor":{"x":0,"y":20}}],[0.002014,{"lines":{"20":[["[sudo] password for mos:                                                         ",{}]]},"cursor":{"x":25}}],[2.251867,{"cursor":{"x":0,"y":21}}],[0.009181999999999999,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[5.798887,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> l                                                                ",{}]]},"cursor":{"x":17}}],[0.143917,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls                                                               ",{}]]},"cursor":{"x":18}}],[0.096042,{"cursor":{"x":19}}],[0.155892,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -                                                             ",{}]]},"cursor":{"x":20}}],[0.238108,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]]},"cursor":{"x":21}}],[0.08794399999999999,{"cursor":{"x":22}}],[4.824387,{"lines":{"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]]},"cursor":{"x":0,"y":22}}],[0.0009649999999999999,{"lines":{"22":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16,"y":23}}],[1.91469,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> p                                                                ",{}]]},"cursor":{"x":17}}],[0.156021,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ph                                                               ",{}]]},"cursor":{"x":18}}],[0.091964,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php                                                              ",{}]]},"cursor":{"x":19}}],[0.320003,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpu                                                             ",{}]]},"cursor":{"x":20}}],[0.07998,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpun                                                            ",{}]]},"cursor":{"x":21}}],[0.214003,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpuni                                                           ",{}]]},"cursor":{"x":22}}],[0.192031,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit                                                          ",{}]]},"cursor":{"x":23}}],[0.07598100000000001,{"cursor":{"x":24}}],[5.461025,{"cursor":{"x":23}}],[0.499365,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpuni                                                           ",{}]]},"cursor":{"x":22}}],[0.029359,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpun                                                            ",{}]]},"cursor":{"x":21}}],[0.030606,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpu                                                             ",{}]]},"cursor":{"x":20}}],[0.029711,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php                                                              ",{}]]},"cursor":{"x":19}}],[0.029994,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ph                                                               ",{}]]},"cursor":{"x":18}}],[0.029669,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> p                                                                ",{}]]},"cursor":{"x":17}}],[0.030739,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[0.029403,{}],[0.029915,{}],[0.030895,{}],[0.030094,{}],[0.029975,{}],[0.030507,{}],[0.029656,{}],[0.634053,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> w                                                                ",{}]]},"cursor":{"x":17}}],[0.066971,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> wh                                                               ",{}]]},"cursor":{"x":18}}],[0.08805,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> whi                                                              ",{}]]},"cursor":{"x":19}}],[0.167992,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> whic                                                             ",{}]]},"cursor":{"x":20}}],[0.09406,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which                                                            ",{}]]},"cursor":{"x":21}}],[0.06787,{"cursor":{"x":22}}],[0.316119,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which p                                                          ",{}]]},"cursor":{"x":23}}],[0.163999,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which ph                                                         ",{}]]},"cursor":{"x":24}}],[0.099949,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which php                                                        ",{}]]},"cursor":{"x":25}}],[0.276009,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpu                                                       ",{}]]},"cursor":{"x":26}}],[0.071954,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpun                                                      ",{}]]},"cursor":{"x":27}}],[0.184088,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpuni                                                     ",{}]]},"cursor":{"x":28}}],[0.163938,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]]},"cursor":{"x":29}}],[0.148202,{"lines":{"0":[["Resolving phar.phpunit.de (phar.phpunit.de)... 188.94.27.25                      ",{}]],"1":[["Connecting to phar.phpunit.de (phar.phpunit.de)|188.94.27.25|:443... connected.  ",{}]],"2":[["HTTP request sent, awaiting response... 200 OK                                   ",{}]],"3":[["Length: 3214376 (3.1M) [application/octet-stream]                                ",{}]],"4":[["Saving to: ‘phpunit.phar’                                                        ",{}]],"5":[["                                                                                 ",{}]],"6":[["100%[=======================================>] 3,214,376   1.63MB/s   in 1.9s    ",{}]],"8":[["2014-05-05 13:37:33 (1.63 MB/s) - ‘phpunit.phar’ saved [3214376/3214376]         ",{}]],"10":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]],"11":[["total 3140                                                                       ",{}]],"12":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"13":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]],"14":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"15":[["                                                                                 ",{}]],"16":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]],"17":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]],"18":[["[sudo] password for mos:                                                         ",{}]],"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]],"20":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"21":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]],"22":[["/usr/local/bin/phpunit                                                           ",{}]],"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[4.239836,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> p                                                                ",{}]]},"cursor":{"x":17}}],[0.143919,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ph                                                               ",{}]]},"cursor":{"x":18}}],[0.104079,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php                                                              ",{}]]},"cursor":{"x":19}}],[0.264039,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpu                                                             ",{}]]},"cursor":{"x":20}}],[0.083999,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpun                                                            ",{}]]},"cursor":{"x":21}}],[0.183955,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpuni                                                           ",{}]]},"cursor":{"x":22}}],[0.17196,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit                                                          ",{}]]},"cursor":{"x":23}}],[0.404052,{"cursor":{"x":24}}],[0.324003,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit -                                                        ",{}]]},"cursor":{"x":25}}],[0.188014,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --                                                       ",{}]]},"cursor":{"x":26}}],[0.182012,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --v                                                      ",{}]]},"cursor":{"x":27}}],[0.187976,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --ve                                                     ",{}]]},"cursor":{"x":28}}],[0.06396499999999999,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --ver                                                    ",{}]]},"cursor":{"x":29}}],[0.196038,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --vers                                                   ",{}]]},"cursor":{"x":30}}],[0.099998,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --versi                                                  ",{}]]},"cursor":{"x":31}}],[0.055998,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --versio                                                 ",{}]]},"cursor":{"x":32}}],[0.103984,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --version                                                ",{}]]},"cursor":{"x":33}}],[0.652146,{"lines":{"0":[["Connecting to phar.phpunit.de (phar.phpunit.de)|188.94.27.25|:443... connected.  ",{}]],"1":[["HTTP request sent, awaiting response... 200 OK                                   ",{}]],"2":[["Length: 3214376 (3.1M) [application/octet-stream]                                ",{}]],"3":[["Saving to: ‘phpunit.phar’                                                        ",{}]],"4":[["                                                                                 ",{}]],"5":[["100%[=======================================>] 3,214,376   1.63MB/s   in 1.9s    ",{}]],"6":[["                                                                                 ",{}]],"7":[["2014-05-05 13:37:33 (1.63 MB/s) - ‘phpunit.phar’ saved [3214376/3214376]         ",{}]],"8":[["                                                                                 ",{}]],"9":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]],"10":[["total 3140                                                                       ",{}]],"11":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]],"13":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"14":[["                                                                                 ",{}]],"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]],"16":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]],"17":[["[sudo] password for mos:                                                         ",{}]],"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]],"19":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"20":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]],"21":[["/usr/local/bin/phpunit                                                           ",{}]],"22":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --version                                                ",{}]],"23":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.017532,{"lines":{"0":[["Length: 3214376 (3.1M) [application/octet-stream]                                ",{}]],"1":[["Saving to: ‘phpunit.phar’                                                        ",{}]],"2":[["                                                                                 ",{}]],"3":[["100%[=======================================>] 3,214,376   1.63MB/s   in 1.9s    ",{}]],"5":[["2014-05-05 13:37:33 (1.63 MB/s) - ‘phpunit.phar’ saved [3214376/3214376]         ",{}]],"7":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]],"8":[["total 3140                                                                       ",{}]],"9":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"10":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]],"11":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"12":[["                                                                                 ",{}]],"13":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]],"14":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]],"15":[["[sudo] password for mos:                                                         ",{}]],"16":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]],"17":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"18":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]],"19":[["/usr/local/bin/phpunit                                                           ",{}]],"20":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --version                                                ",{}]],"21":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"22":[["                                                                                 ",{}]]}}],[0.001364,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[1.812996,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> p                                                                ",{}]]},"cursor":{"x":17}}],[0.168032,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ph                                                               ",{}]]},"cursor":{"x":18}}],[0.111952,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php                                                              ",{}]]},"cursor":{"x":19}}],[0.656003,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpu                                                             ",{}]]},"cursor":{"x":20}}],[0.09199400000000001,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpun                                                            ",{}]]},"cursor":{"x":21}}],[0.19601,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpuni                                                           ",{}]]},"cursor":{"x":22}}],[0.164013,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit                                                          ",{}]]},"cursor":{"x":23}}],[0.084011,{"cursor":{"x":24}}],[0.823962,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit |                                                        ",{}]]},"cursor":{"x":25}}],[0.271986,{"cursor":{"x":26}}],[0.195996,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | m                                                      ",{}]]},"cursor":{"x":27}}],[0.08404399999999999,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | mo                                                     ",{}]]},"cursor":{"x":28}}],[0.172012,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | mor                                                    ",{}]]},"cursor":{"x":29}}],[0.091961,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | more                                                   ",{}]]},"cursor":{"x":30}}],[0.932214,{"lines":{"0":[["Saving to: ‘phpunit.phar’                                                        ",{}]],"1":[["                                                                                 ",{}]],"2":[["100%[=======================================>] 3,214,376   1.63MB/s   in 1.9s    ",{}]],"3":[["                                                                                 ",{}]],"4":[["2014-05-05 13:37:33 (1.63 MB/s) - ‘phpunit.phar’ saved [3214376/3214376]         ",{}]],"5":[["                                                                                 ",{}]],"6":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]],"7":[["total 3140                                                                       ",{}]],"8":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"9":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]],"10":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"11":[["                                                                                 ",{}]],"12":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]],"13":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]],"14":[["[sudo] password for mos:                                                         ",{}]],"15":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]],"16":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"17":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]],"18":[["/usr/local/bin/phpunit                                                           ",{}]],"19":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --version                                                ",{}]],"20":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"21":[["                                                                                 ",{}]],"22":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | more                                                   ",{}]],"23":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.017548,{"lines":{"0":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l                                                            ",{}]],"1":[["total 3140                                                                       ",{}]],"2":[["-rw-r--r-- 1 mos mos 3214376 May  2 09:18 phpunit.phar                           ",{}]],"3":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> php phpunit.phar --version                                       ",{}]],"4":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"6":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> chmod +x phpunit.phar                                            ",{}]],"7":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> sudo cp phpunit.phar /usr/local/bin/phpunit                      ",{}]],"8":[["[sudo] password for mos:                                                         ",{}]],"9":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> ls -l /usr/local/bin/phpunit                                     ",{}]],"10":[["-rwxr-xr-x 1 root staff 3214376 May  5 13:38 /usr/local/bin/phpunit              ",{}]],"11":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> which phpunit                                                    ",{}]],"12":[["/usr/local/bin/phpunit                                                           ",{}]],"13":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit --version                                                ",{}]],"14":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"15":[["                                                                                 ",{}]],"16":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> phpunit | more                                                   ",{}]],"17":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"18":[["                                                                                 ",{}]],"19":[["Usage: phpunit [options] UnitTest [UnitTest.php]                                 ",{}]],"20":[["       phpunit [options] <directory>                                             ",{}]],"22":[["Code Coverage Options:                                                           ",{}]]}}],[0.000271,{"lines":{"0":[["PHPUnit 4.1.0 by Sebastian Bergmann.                                             ",{}]],"1":[["                                                                                 ",{}]],"2":[["Usage: phpunit [options] UnitTest [UnitTest.php]                                 ",{}]],"3":[["       phpunit [options] <directory>                                             ",{}]],"4":[["                                                                                 ",{}]],"5":[["Code Coverage Options:                                                           ",{}]],"6":[["                                                                                 ",{}]],"7":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"8":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"9":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"10":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"11":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"12":[["                            Default: Standard output.                            ",{}]],"13":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"14":[["                                                                                 ",{}]],"15":[["Logging Options:                                                                 ",{}]],"16":[["                                                                                 ",{}]],"17":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"18":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"19":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"20":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"21":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"22":[["                                                                                 ",{}]],"23":[["--More--",{"inverse":true}],["                                                                         ",{}]]},"cursor":{"x":8}}],[5.687971,{"lines":{"0":[["                                                                                 ",{}]],"1":[["Usage: phpunit [options] UnitTest [UnitTest.php]                                 ",{}]],"2":[["       phpunit [options] <directory>                                             ",{}]],"3":[["                                                                                 ",{}]],"4":[["Code Coverage Options:                                                           ",{}]],"5":[["                                                                                 ",{}]],"6":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"7":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"8":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"9":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"10":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"11":[["                            Default: Standard output.                            ",{}]],"12":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"13":[["                                                                                 ",{}]],"14":[["Logging Options:                                                                 ",{}]],"15":[["                                                                                 ",{}]],"16":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"17":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"18":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"19":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"20":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"21":[["                                                                                 ",{}]],"22":[["Test Selection Options:                                                          ",{}]]}}],[0.352022,{"lines":{"0":[["Usage: phpunit [options] UnitTest [UnitTest.php]                                 ",{}]],"1":[["       phpunit [options] <directory>                                             ",{}]],"2":[["                                                                                 ",{}]],"3":[["Code Coverage Options:                                                           ",{}]],"4":[["                                                                                 ",{}]],"5":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"6":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"7":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"8":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"9":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"10":[["                            Default: Standard output.                            ",{}]],"11":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"12":[["                                                                                 ",{}]],"13":[["Logging Options:                                                                 ",{}]],"14":[["                                                                                 ",{}]],"15":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"16":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"17":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"18":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"19":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"20":[["                                                                                 ",{}]],"21":[["Test Selection Options:                                                          ",{}]],"22":[["                                                                                 ",{}]]}}],[0.499877,{"lines":{"0":[["       phpunit [options] <directory>                                             ",{}]],"1":[["                                                                                 ",{}]],"2":[["Code Coverage Options:                                                           ",{}]],"3":[["                                                                                 ",{}]],"4":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"5":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"6":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"7":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"8":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"9":[["                            Default: Standard output.                            ",{}]],"10":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"11":[["                                                                                 ",{}]],"12":[["Logging Options:                                                                 ",{}]],"13":[["                                                                                 ",{}]],"14":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"15":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"16":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"17":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"18":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"19":[["                                                                                 ",{}]],"20":[["Test Selection Options:                                                          ",{}]],"21":[["                                                                                 ",{}]],"22":[["  --filter <pattern>        Filter which tests to run.                           ",{}]]}}],[0.029798,{"lines":{"0":[["                                                                                 ",{}]],"1":[["Code Coverage Options:                                                           ",{}]],"2":[["                                                                                 ",{}]],"3":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"4":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"5":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"6":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"7":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"8":[["                            Default: Standard output.                            ",{}]],"9":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"10":[["                                                                                 ",{}]],"11":[["Logging Options:                                                                 ",{}]],"12":[["                                                                                 ",{}]],"13":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"14":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"15":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"16":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"17":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"18":[["                                                                                 ",{}]],"19":[["Test Selection Options:                                                          ",{}]],"20":[["                                                                                 ",{}]],"21":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"22":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]]}}],[0.030348,{"lines":{"0":[["Code Coverage Options:                                                           ",{}]],"1":[["                                                                                 ",{}]],"2":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"3":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"4":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"5":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"6":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"7":[["                            Default: Standard output.                            ",{}]],"8":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"9":[["                                                                                 ",{}]],"10":[["Logging Options:                                                                 ",{}]],"11":[["                                                                                 ",{}]],"12":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"13":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"14":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"15":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"16":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"17":[["                                                                                 ",{}]],"18":[["Test Selection Options:                                                          ",{}]],"19":[["                                                                                 ",{}]],"20":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"21":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"22":[["  --group ...               Only runs tests from the specified group(s).         ",{}]]}}],[0.030311,{"lines":{"0":[["                                                                                 ",{}]],"1":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"2":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"3":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"4":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"5":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"6":[["                            Default: Standard output.                            ",{}]],"7":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"8":[["                                                                                 ",{}]],"9":[["Logging Options:                                                                 ",{}]],"10":[["                                                                                 ",{}]],"11":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"12":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"13":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"14":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"15":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"16":[["                                                                                 ",{}]],"17":[["Test Selection Options:                                                          ",{}]],"18":[["                                                                                 ",{}]],"19":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"20":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"21":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"22":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]]}}],[0.029486,{"lines":{"0":[["  --coverage-clover <file>  Generate code coverage report in Clover XML format.  ",{}]],"1":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"2":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"3":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"4":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"5":[["                            Default: Standard output.                            ",{}]],"6":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"7":[["                                                                                 ",{}]],"8":[["Logging Options:                                                                 ",{}]],"9":[["                                                                                 ",{}]],"10":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"11":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"12":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"13":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"14":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"15":[["                                                                                 ",{}]],"16":[["Test Selection Options:                                                          ",{}]],"17":[["                                                                                 ",{}]],"18":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"19":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"20":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"21":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"22":[["  --list-groups             List available test groups.                          ",{}]]}}],[0.030638,{"lines":{"0":[["  --coverage-crap4j <file>  Generate code coverage report in Crap4J XML format.  ",{}]],"1":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"2":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"3":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"4":[["                            Default: Standard output.                            ",{}]],"5":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"6":[["                                                                                 ",{}]],"7":[["Logging Options:                                                                 ",{}]],"8":[["                                                                                 ",{}]],"9":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"10":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"11":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"12":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"13":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"14":[["                                                                                 ",{}]],"15":[["Test Selection Options:                                                          ",{}]],"16":[["                                                                                 ",{}]],"17":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"18":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"19":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"20":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"21":[["  --list-groups             List available test groups.                          ",{}]],"22":[["  --test-suffix ...         Only search for test in files with specified         ",{}]]}}],[0.029349,{"lines":{"0":[["  --coverage-html <dir>     Generate code coverage report in HTML format.        ",{}]],"1":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"2":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"3":[["                            Default: Standard output.                            ",{}]],"4":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"5":[["                                                                                 ",{}]],"6":[["Logging Options:                                                                 ",{}]],"7":[["                                                                                 ",{}]],"8":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"9":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"10":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"11":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"12":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"13":[["                                                                                 ",{}]],"14":[["Test Selection Options:                                                          ",{}]],"15":[["                                                                                 ",{}]],"16":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"17":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"18":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"19":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"20":[["  --list-groups             List available test groups.                          ",{}]],"21":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"22":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]]}}],[0.030678,{"lines":{"0":[["  --coverage-php <file>     Export PHP_CodeCoverage object to file.              ",{}]],"1":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"2":[["                            Default: Standard output.                            ",{}]],"3":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"4":[["                                                                                 ",{}]],"5":[["Logging Options:                                                                 ",{}]],"6":[["                                                                                 ",{}]],"7":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"8":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"9":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"10":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"11":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"12":[["                                                                                 ",{}]],"13":[["Test Selection Options:                                                          ",{}]],"14":[["                                                                                 ",{}]],"15":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"16":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"17":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"18":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"19":[["  --list-groups             List available test groups.                          ",{}]],"20":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"21":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"22":[["                                                                                 ",{}]]}}],[0.029276,{"lines":{"0":[["  --coverage-text=<file>    Generate code coverage report in text format.        ",{}]],"1":[["                            Default: Standard output.                            ",{}]],"2":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"3":[["                                                                                 ",{}]],"4":[["Logging Options:                                                                 ",{}]],"5":[["                                                                                 ",{}]],"6":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"7":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"8":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"9":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"10":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"11":[["                                                                                 ",{}]],"12":[["Test Selection Options:                                                          ",{}]],"13":[["                                                                                 ",{}]],"14":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"15":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"16":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"17":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"18":[["  --list-groups             List available test groups.                          ",{}]],"19":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"20":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"21":[["                                                                                 ",{}]],"22":[["Test Execution Options:                                                          ",{}]]}}],[0.030244,{"lines":{"0":[["                            Default: Standard output.                            ",{}]],"1":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"2":[["                                                                                 ",{}]],"3":[["Logging Options:                                                                 ",{}]],"4":[["                                                                                 ",{}]],"5":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"6":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"7":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"8":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"9":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"10":[["                                                                                 ",{}]],"11":[["Test Selection Options:                                                          ",{}]],"12":[["                                                                                 ",{}]],"13":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"14":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"15":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"16":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"17":[["  --list-groups             List available test groups.                          ",{}]],"18":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"19":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"20":[["                                                                                 ",{}]],"21":[["Test Execution Options:                                                          ",{}]],"22":[["                                                                                 ",{}]]}}],[0.03067,{"lines":{"0":[["  --coverage-xml <dir>      Generate code coverage report in PHPUnit XML format. ",{}]],"1":[["                                                                                 ",{}]],"2":[["Logging Options:                                                                 ",{}]],"3":[["                                                                                 ",{}]],"4":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"5":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"6":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"7":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"8":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"9":[["                                                                                 ",{}]],"10":[["Test Selection Options:                                                          ",{}]],"11":[["                                                                                 ",{}]],"12":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"13":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"14":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"15":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"16":[["  --list-groups             List available test groups.                          ",{}]],"17":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"18":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"19":[["                                                                                 ",{}]],"20":[["Test Execution Options:                                                          ",{}]],"21":[["                                                                                 ",{}]],"22":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]]}}],[0.030447,{"lines":{"0":[["                                                                                 ",{}]],"1":[["Logging Options:                                                                 ",{}]],"2":[["                                                                                 ",{}]],"3":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"4":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"5":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"6":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"7":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"8":[["                                                                                 ",{}]],"9":[["Test Selection Options:                                                          ",{}]],"10":[["                                                                                 ",{}]],"11":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"12":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"13":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"14":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"15":[["  --list-groups             List available test groups.                          ",{}]],"16":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"17":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"18":[["                                                                                 ",{}]],"19":[["Test Execution Options:                                                          ",{}]],"20":[["                                                                                 ",{}]],"21":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"22":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]]}}],[0.029478,{"lines":{"0":[["Logging Options:                                                                 ",{}]],"1":[["                                                                                 ",{}]],"2":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"3":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"4":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"5":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"6":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"7":[["                                                                                 ",{}]],"8":[["Test Selection Options:                                                          ",{}]],"9":[["                                                                                 ",{}]],"10":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"11":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"12":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"13":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"14":[["  --list-groups             List available test groups.                          ",{}]],"15":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"16":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"17":[["                                                                                 ",{}]],"18":[["Test Execution Options:                                                          ",{}]],"19":[["                                                                                 ",{}]],"20":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"21":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"22":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]]}}],[0.030336,{"lines":{"0":[["                                                                                 ",{}]],"1":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"2":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"3":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"4":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"5":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"6":[["                                                                                 ",{}]],"7":[["Test Selection Options:                                                          ",{}]],"8":[["                                                                                 ",{}]],"9":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"10":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"11":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"12":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"13":[["  --list-groups             List available test groups.                          ",{}]],"14":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"15":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"16":[["                                                                                 ",{}]],"17":[["Test Execution Options:                                                          ",{}]],"18":[["                                                                                 ",{}]],"19":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"20":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"21":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"22":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]]}}],[0.030462,{"lines":{"0":[["  --log-junit <file>        Log test execution in JUnit XML format to file.      ",{}]],"1":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"2":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"3":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"4":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"5":[["                                                                                 ",{}]],"6":[["Test Selection Options:                                                          ",{}]],"7":[["                                                                                 ",{}]],"8":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"9":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"10":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"11":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"12":[["  --list-groups             List available test groups.                          ",{}]],"13":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"14":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"15":[["                                                                                 ",{}]],"16":[["Test Execution Options:                                                          ",{}]],"17":[["                                                                                 ",{}]],"18":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"19":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"20":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"21":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"22":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]]}}],[0.02989,{"lines":{"0":[["  --log-tap <file>          Log test execution in TAP format to file.            ",{}]],"1":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"2":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"3":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"4":[["                                                                                 ",{}]],"5":[["Test Selection Options:                                                          ",{}]],"6":[["                                                                                 ",{}]],"7":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"8":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"9":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"10":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"11":[["  --list-groups             List available test groups.                          ",{}]],"12":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"13":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"14":[["                                                                                 ",{}]],"15":[["Test Execution Options:                                                          ",{}]],"16":[["                                                                                 ",{}]],"17":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"18":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"19":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"20":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"21":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"22":[["                                                                                 ",{}]]}}],[0.029419,{"lines":{"0":[["  --log-json <file>         Log test execution in JSON format.                   ",{}]],"1":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"2":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"3":[["                                                                                 ",{}]],"4":[["Test Selection Options:                                                          ",{}]],"5":[["                                                                                 ",{}]],"6":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"7":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"8":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"9":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"10":[["  --list-groups             List available test groups.                          ",{}]],"11":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"12":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"13":[["                                                                                 ",{}]],"14":[["Test Execution Options:                                                          ",{}]],"15":[["                                                                                 ",{}]],"16":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"17":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"18":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"19":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"20":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"21":[["                                                                                 ",{}]],"22":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]]}}],[0.030074,{"lines":{"0":[["  --testdox-html <file>     Write agile documentation in HTML format to file.    ",{}]],"1":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"2":[["                                                                                 ",{}]],"3":[["Test Selection Options:                                                          ",{}]],"4":[["                                                                                 ",{}]],"5":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"6":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"7":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"8":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"9":[["  --list-groups             List available test groups.                          ",{}]],"10":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"11":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"12":[["                                                                                 ",{}]],"13":[["Test Execution Options:                                                          ",{}]],"14":[["                                                                                 ",{}]],"15":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"16":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"17":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"18":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"19":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"20":[["                                                                                 ",{}]],"21":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"22":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]]}}],[0.03059,{"lines":{"0":[["  --testdox-text <file>     Write agile documentation in Text format to file.    ",{}]],"1":[["                                                                                 ",{}]],"2":[["Test Selection Options:                                                          ",{}]],"3":[["                                                                                 ",{}]],"4":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"5":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"6":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"7":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"8":[["  --list-groups             List available test groups.                          ",{}]],"9":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"10":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"11":[["                                                                                 ",{}]],"12":[["Test Execution Options:                                                          ",{}]],"13":[["                                                                                 ",{}]],"14":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"15":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"16":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"17":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"18":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"19":[["                                                                                 ",{}]],"20":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"21":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"22":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]]}}],[0.029921,{"lines":{"0":[["                                                                                 ",{}]],"1":[["Test Selection Options:                                                          ",{}]],"2":[["                                                                                 ",{}]],"3":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"4":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"5":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"6":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"7":[["  --list-groups             List available test groups.                          ",{}]],"8":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"9":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"10":[["                                                                                 ",{}]],"11":[["Test Execution Options:                                                          ",{}]],"12":[["                                                                                 ",{}]],"13":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"14":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"15":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"16":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"17":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"18":[["                                                                                 ",{}]],"19":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"20":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"21":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"22":[["                                                                                 ",{}]]}}],[0.03008,{"lines":{"0":[["Test Selection Options:                                                          ",{}]],"1":[["                                                                                 ",{}]],"2":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"3":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"4":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"5":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"6":[["  --list-groups             List available test groups.                          ",{}]],"7":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"8":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"9":[["                                                                                 ",{}]],"10":[["Test Execution Options:                                                          ",{}]],"11":[["                                                                                 ",{}]],"12":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"13":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"14":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"15":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"16":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"17":[["                                                                                 ",{}]],"18":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"19":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"20":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"21":[["                                                                                 ",{}]],"22":[["  --colors                  Use colors in output.                                ",{}]]}}],[0.03025,{"lines":{"0":[["                                                                                 ",{}]],"1":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"2":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"3":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"4":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"5":[["  --list-groups             List available test groups.                          ",{}]],"6":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"7":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"8":[["                                                                                 ",{}]],"9":[["Test Execution Options:                                                          ",{}]],"10":[["                                                                                 ",{}]],"11":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"12":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"13":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"14":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"15":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"16":[["                                                                                 ",{}]],"17":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"18":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"19":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"20":[["                                                                                 ",{}]],"21":[["  --colors                  Use colors in output.                                ",{}]],"22":[["  --stderr                  Write to STDERR instead of STDOUT.                   ",{}]]}}],[0.030812,{"lines":{"0":[["  --filter <pattern>        Filter which tests to run.                           ",{}]],"1":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"2":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"3":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"4":[["  --list-groups             List available test groups.                          ",{}]],"5":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"6":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"7":[["                                                                                 ",{}]],"8":[["Test Execution Options:                                                          ",{}]],"9":[["                                                                                 ",{}]],"10":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"11":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"12":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"13":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"14":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"15":[["                                                                                 ",{}]],"16":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"17":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"18":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"19":[["                                                                                 ",{}]],"20":[["  --colors                  Use colors in output.                                ",{}]],"21":[["  --stderr                  Write to STDERR instead of STDOUT.                   ",{}]],"22":[["  --stop-on-error           Stop execution upon first error.                     ",{}]]}}],[0.249554,{"lines":{"0":[["  --testsuite <pattern>     Filter which testsuite to run.                       ",{}]],"1":[["  --group ...               Only runs tests from the specified group(s).         ",{}]],"2":[["  --exclude-group ...       Exclude tests from the specified group(s).           ",{}]],"3":[["  --list-groups             List available test groups.                          ",{}]],"4":[["  --test-suffix ...         Only search for test in files with specified         ",{}]],"5":[["                            suffix(es). Default: Test.php,.phpt                  ",{}]],"6":[["                                                                                 ",{}]],"7":[["Test Execution Options:                                                          ",{}]],"8":[["                                                                                 ",{}]],"9":[["  --report-useless-tests    Be strict about tests that do not test anything.     ",{}]],"10":[["  --strict-coverage         Be strict about unintentionally covered code.        ",{}]],"11":[["  --disallow-test-output    Be strict about output during tests.                 ",{}]],"12":[["  --enforce-time-limit      Enforce time limit based on test size.               ",{}]],"13":[["  --strict                  Run tests in strict mode (enables all of the above). ",{}]],"14":[["                                                                                 ",{}]],"15":[["  --process-isolation       Run each test in a separate PHP process.             ",{}]],"16":[["  --no-globals-backup       Do not backup and restore $GLOBALS for each test.    ",{}]],"17":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"18":[["                                                                                 ",{}]],"19":[["  --colors                  Use colors in output.                                ",{}]],"20":[["  --stderr                  Write to STDERR instead of STDOUT.                   ",{}]],"21":[["  --stop-on-error           Stop execution upon first error.                     ",{}]],"22":[["  --stop-on-failure         Stop execution upon first error or failure.          ",{}]]}}],[0.770103,{"lines":{"0":[["  --static-backup           Backup and restore static attributes for each test.  ",{}]],"1":[["                                                                                 ",{}]],"2":[["  --colors                  Use colors in output.                                ",{}]],"3":[["  --stderr                  Write to STDERR instead of STDOUT.                   ",{}]],"4":[["  --stop-on-error           Stop execution upon first error.                     ",{}]],"5":[["  --stop-on-failure         Stop execution upon first error or failure.          ",{}]],"6":[["  --stop-on-risky           Stop execution upon first risky test.                ",{}]],"7":[["  --stop-on-skipped         Stop execution upon first skipped test.              ",{}]],"8":[["  --stop-on-incomplete      Stop execution upon first incomplete test.           ",{}]],"9":[["  -v|--verbose              Output more verbose information.                     ",{}]],"10":[["  --debug                   Display debugging information during test execution. ",{}]],"11":[["                                                                                 ",{}]],"12":[["  --loader <loader>         TestSuiteLoader implementation to use.               ",{}]],"13":[["  --repeat <times>          Runs the test(s) repeatedly.                         ",{}]],"14":[["  --tap                     Report test execution progress in TAP format.        ",{}]],"15":[["  --testdox                 Report test execution progress in TestDox format.    ",{}]],"16":[["  --printer <printer>       TestSuiteListener implementation to use.             ",{}]],"17":[["                                                                                 ",{}]],"18":[["Configuration Options:                                                           ",{}]],"19":[["                                                                                 ",{}]],"20":[["  --bootstrap <file>        A \"bootstrap\" PHP file that is run before the tests. ",{}]],"21":[["  -c|--configuration <file> Read configuration from XML file.                    ",{}]],"22":[["  --no-configuration        Ignore default configuration file (phpunit.xml).     ",{}]],"23":[["  --include-path <path(s)>  Prepend PHP's include_path with given pa             ",{}]]},"cursor":{"x":68}}],[1.4e-05,{"lines":{"0":[["  --stop-on-risky           Stop execution upon first risky test.                ",{}]],"1":[["  --stop-on-skipped         Stop execution upon first skipped test.              ",{}]],"2":[["  --stop-on-incomplete      Stop execution upon first incomplete test.           ",{}]],"3":[["  -v|--verbose              Output more verbose information.                     ",{}]],"4":[["  --debug                   Display debugging information during test execution. ",{}]],"5":[["                                                                                 ",{}]],"6":[["  --loader <loader>         TestSuiteLoader implementation to use.               ",{}]],"7":[["  --repeat <times>          Runs the test(s) repeatedly.                         ",{}]],"8":[["  --tap                     Report test execution progress in TAP format.        ",{}]],"9":[["  --testdox                 Report test execution progress in TestDox format.    ",{}]],"10":[["  --printer <printer>       TestSuiteListener implementation to use.             ",{}]],"12":[["Configuration Options:                                                           ",{}]],"13":[["                                                                                 ",{}]],"14":[["  --bootstrap <file>        A \"bootstrap\" PHP file that is run before the tests. ",{}]],"15":[["  -c|--configuration <file> Read configuration from XML file.                    ",{}]],"16":[["  --no-configuration        Ignore default configuration file (phpunit.xml).     ",{}]],"17":[["  --include-path <path(s)>  Prepend PHP's include_path with given path(s).       ",{}]],"18":[["  -d key[=value]            Sets a php.ini value.                                ",{}]],"20":[["Miscellaneous Options:                                                           ",{}]],"21":[["                                                                                 ",{}]],"22":[["  -h|--help                 Prints this usage information.                       ",{}]],"23":[["--More--",{"inverse":true}],["                                                                         ",{}]]},"cursor":{"x":8}}],[0.891989,{"lines":{"0":[["  -v|--verbose              Output more verbose information.                     ",{}]],"1":[["  --debug                   Display debugging information during test execution. ",{}]],"2":[["                                                                                 ",{}]],"3":[["  --loader <loader>         TestSuiteLoader implementation to use.               ",{}]],"4":[["  --repeat <times>          Runs the test(s) repeatedly.                         ",{}]],"5":[["  --tap                     Report test execution progress in TAP format.        ",{}]],"6":[["  --testdox                 Report test execution progress in TestDox format.    ",{}]],"7":[["  --printer <printer>       TestSuiteListener implementation to use.             ",{}]],"8":[["                                                                                 ",{}]],"9":[["Configuration Options:                                                           ",{}]],"10":[["                                                                                 ",{}]],"11":[["  --bootstrap <file>        A \"bootstrap\" PHP file that is run before the tests. ",{}]],"12":[["  -c|--configuration <file> Read configuration from XML file.                    ",{}]],"13":[["  --no-configuration        Ignore default configuration file (phpunit.xml).     ",{}]],"14":[["  --include-path <path(s)>  Prepend PHP's include_path with given path(s).       ",{}]],"15":[["  -d key[=value]            Sets a php.ini value.                                ",{}]],"16":[["                                                                                 ",{}]],"17":[["Miscellaneous Options:                                                           ",{}]],"18":[["                                                                                 ",{}]],"19":[["  -h|--help                 Prints this usage information.                       ",{}]],"20":[["  --version                 Prints the version and exits.                        ",{}]],"22":[["  --self-update             Update PHPUnit to the latest version.                ",{}]],"23":[["                                                                                 ",{}]]},"cursor":{"x":0}}],[0.000143,{"lines":{"23":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],[">                                                                  ",{}]]},"cursor":{"x":16}}],[3.67593,{"lines":{"0":[["  --debug                   Display debugging information during test execution. ",{}]],"1":[["                                                                                 ",{}]],"2":[["  --loader <loader>         TestSuiteLoader implementation to use.               ",{}]],"3":[["  --repeat <times>          Runs the test(s) repeatedly.                         ",{}]],"4":[["  --tap                     Report test execution progress in TAP format.        ",{}]],"5":[["  --testdox                 Report test execution progress in TestDox format.    ",{}]],"6":[["  --printer <printer>       TestSuiteListener implementation to use.             ",{}]],"7":[["                                                                                 ",{}]],"8":[["Configuration Options:                                                           ",{}]],"9":[["                                                                                 ",{}]],"10":[["  --bootstrap <file>        A \"bootstrap\" PHP file that is run before the tests. ",{}]],"11":[["  -c|--configuration <file> Read configuration from XML file.                    ",{}]],"12":[["  --no-configuration        Ignore default configuration file (phpunit.xml).     ",{}]],"13":[["  --include-path <path(s)>  Prepend PHP's include_path with given path(s).       ",{}]],"14":[["  -d key[=value]            Sets a php.ini value.                                ",{}]],"15":[["                                                                                 ",{}]],"16":[["Miscellaneous Options:                                                           ",{}]],"17":[["                                                                                 ",{}]],"18":[["  -h|--help                 Prints this usage information.                       ",{}]],"19":[["  --version                 Prints the version and exits.                        ",{}]],"20":[["                                                                                 ",{}]],"21":[["  --self-update             Update PHPUnit to the latest version.                ",{}]],"22":[["desktop",{"underline":true}],[":",{}],["~/test",{"bold":true}],["> exit                                                             ",{}]],"23":[["                                                                                 ",{}]]},"cursor":{"x":0}}]]