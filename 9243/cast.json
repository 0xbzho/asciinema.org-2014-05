[[0.375073,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["                                                                                                    ",{}]],"2":[["                                                                                                    ",{}]],"3":[["                                                                                                    ",{}]],"4":[["                                                                                                    ",{}]],"5":[["                                                                                                    ",{}]],"6":[["                                                                                                    ",{}]],"7":[["                                                                                                    ",{}]],"8":[["                                                                                                    ",{}]],"9":[["                                                                                                    ",{}]],"10":[["                                                                                                    ",{}]],"11":[["                                                                                                    ",{}]],"12":[["                                                                                                    ",{}]],"13":[["                                                                                                    ",{}]],"14":[["                                                                                                    ",{}]],"15":[["                                                                                                    ",{}]],"16":[["                                                                                                    ",{}]],"17":[["                                                                                                    ",{}]],"18":[["                                                                                                    ",{}]],"19":[["                                                                                                    ",{}]],"20":[["                                                                                                    ",{}]],"21":[["                                                                                                    ",{}]],"22":[["                                                                                                    ",{}]],"23":[["                                                                                                    ",{}]],"24":[["                                                                                                    ",{}]],"25":[["                                                                                                    ",{}]],"26":[["                                                                                                    ",{}]],"27":[["                                                                                                    ",{}]],"28":[["                                                                                                    ",{}]],"29":[["                                                                                                    ",{}]],"30":[["                                                                                                    ",{}]],"31":[["                                                                                                    ",{}]],"32":[["                                                                                                    ",{}]],"33":[["                                                                                                    ",{}]],"34":[["                                                                                                    ",{}]]},"cursor":{"x":0,"y":0,"visible":true}}],[0.105995,{}],[0.000336,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >>                                                             ",{}]]},"cursor":{"x":40}}],[0.436167,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >> l                                                           ",{}]]},"cursor":{"x":41}}],[0.001719,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >> ",{}],["l",{"fg":1}],["s                                                          ",{}]]}}],[0.141293,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >> ",{}],["ls",{"fg":1}],["                                                          ",{}]]},"cursor":{"x":42}}],[0.0005419999999999999,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >> ",{}],["ls",{"fg":2}],["                                                          ",{}]]}}],[0.407277,{"cursor":{"x":0,"y":1}}],[0.011882,{"lines":{"1":[["LICENSE             ",{}],["blowfish",{"fg":1}],["            blowfish-wiki.c     blowfish.h                              ",{}]],"2":[["Mars4_4.jar         blowfish-old.s      blowfish.c          blowfish.s                              ",{}]],"3":[["README.md           blowfish-schneier.c blowfish.cpp        input                                   ",{}]]},"cursor":{"y":4}}],[0.077263,{}],[0.000341,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >>                                                             ",{}]]},"cursor":{"x":40}}],[1.215641,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> l                                                           ",{}]]},"cursor":{"x":41}}],[0.001142,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["l",{"fg":1}],["s                                                          ",{}]]}}],[0.086369,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["le",{"fg":1}],["                                                          ",{}]]},"cursor":{"x":42}}],[0.00364,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["le",{"fg":1}],["ss /Users/Sam/code/314FinalProject/output                 ",{}]]}}],[0.189508,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["les",{"fg":1}],["s /Users/Sam/code/314FinalProject/output                 ",{}]]},"cursor":{"x":43}}],[0.151713,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":1}],[" /Users/Sam/code/314FinalProject/output                 ",{}]]},"cursor":{"x":44}}],[0.001036,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" /Users/Sam/code/314FinalProject/output                 ",{}]]}}],[0.086104,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less ",{"fg":2}],["/Users/Sam/code/314FinalProject/output                 ",{}]]},"cursor":{"x":45}}],[0.000744,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" /Users/Sam/code/314FinalProject/output                 ",{}]]}}],[0.190679,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" b                                                      ",{}]]},"cursor":{"x":46}}],[0.000471,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["b",{"fg":6,"bold":true}],["                                                      ",{}]]}}],[0.020115,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["b",{"fg":6,"bold":true}],["lowfish                                               ",{}]]}}],[0.179982,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["bl",{"fg":6,"bold":true}],["owfish                                               ",{}]]},"cursor":{"x":47}}],[0.112122,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blo",{"fg":6,"bold":true}],["wfish                                               ",{}]]},"cursor":{"x":48}}],[0.08795500000000001,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blow",{"fg":6,"bold":true}],["fish                                               ",{}]]},"cursor":{"x":49}}],[0.199716,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowf",{"fg":6,"bold":true}],["ish                                               ",{}]]},"cursor":{"x":50}}],[0.07245799999999999,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfi",{"fg":6,"bold":true}],["sh                                               ",{}]]},"cursor":{"x":51}}],[0.119936,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfis",{"fg":6,"bold":true}],["h                                               ",{}]]},"cursor":{"x":52}}],[0.135706,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfish",{"fg":6,"bold":true}],["                                               ",{}]]},"cursor":{"x":53}}],[0.223442,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfish.",{"fg":6,"bold":true}],["                                              ",{}]]},"cursor":{"x":54}}],[0.008806,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfish.",{"fg":6,"bold":true}],["c                                             ",{}]]}}],[0.174266,{"lines":{"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfish.s",{"fg":6,"bold":true}],["                                             ",{}]]},"cursor":{"x":55}}],[0.005324,{}],[0.98001,{"cursor":{"x":0,"y":5}}],[0.00575,{"lines":{"0":[["main:                                                                                               ",{}]],"1":[["        li $s0, 1                               #initialize behavior to 1(encrypt)                  ",{}]],"2":[["        la $a0, inputprompt             #load our prompt for input here                             ",{}]],"3":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"6":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"7":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"10":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"11":[["        jal keysched                    #call keyschedule.                                          ",{}]],"12":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"13":[[" care about output size efficiency.                                                                 ",{}]],"14":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"15":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"16":[["        jal dencrypt                                                                                ",{}]],"17":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"18":[["        li $v0, 4                               #for string printing                                ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"21":[["        syscall                                                                                     ",{}]],"22":[["        la $a0, nl                              #load the newline string                            ",{}]],"23":[["        syscall                                                                                     ",{}]],"24":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"25":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"26":[["        jal dencrypt                                                                                ",{}]],"27":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"28":[["        li $v0, 4                                                                                   ",{}]],"29":[["        syscall                                                                                     ",{}]],"30":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"31":[["        syscall                                                                                     ",{}]],"32":[["        la $a0, nl                              #load the newline string                            ",{}]],"33":[["        syscall                                                                                     ",{}]],"34":[["blowfish.s ",{"inverse":true}],["                                                                                         ",{}]]},"cursor":{"x":11,"y":34}}],[1.041773,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[9.500000000000001e-05,{"lines":{"0":[["        li $s0, 1                               #initialize behavior to 1(encrypt)                  ",{}]],"1":[["        la $a0, inputprompt             #load our prompt for input here                             ",{}]],"2":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"5":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"6":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"9":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"10":[["        jal keysched                    #call keyschedule.                                          ",{}]],"11":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"12":[[" care about output size efficiency.                                                                 ",{}]],"13":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"14":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"15":[["        jal dencrypt                                                                                ",{}]],"16":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"17":[["        li $v0, 4                               #for string printing                                ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"20":[["        syscall                                                                                     ",{}]],"21":[["        la $a0, nl                              #load the newline string                            ",{}]],"22":[["        syscall                                                                                     ",{}]],"23":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"24":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"25":[["        jal dencrypt                                                                                ",{}]],"26":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"27":[["        li $v0, 4                                                                                   ",{}]],"28":[["        syscall                                                                                     ",{}]],"29":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"30":[["        syscall                                                                                     ",{}]],"31":[["        la $a0, nl                              #load the newline string                            ",{}]],"32":[["        syscall                                                                                     ",{}]],"33":[["        j finish                                #We're done here.                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.416462,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.9e-05,{"lines":{"0":[["        la $a0, inputprompt             #load our prompt for input here                             ",{}]],"1":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"4":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"5":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"8":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"9":[["        jal keysched                    #call keyschedule.                                          ",{}]],"10":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"11":[[" care about output size efficiency.                                                                 ",{}]],"12":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"13":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"14":[["        jal dencrypt                                                                                ",{}]],"15":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"16":[["        li $v0, 4                               #for string printing                                ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        la $a0, nl                              #load the newline string                            ",{}]],"21":[["        syscall                                                                                     ",{}]],"22":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"23":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"24":[["        jal dencrypt                                                                                ",{}]],"25":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"26":[["        li $v0, 4                                                                                   ",{}]],"27":[["        syscall                                                                                     ",{}]],"28":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"29":[["        syscall                                                                                     ",{}]],"30":[["        la $a0, nl                              #load the newline string                            ",{}]],"31":[["        syscall                                                                                     ",{}]],"32":[["        j finish                                #We're done here.                                   ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100807,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"3":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"4":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"7":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"8":[["        jal keysched                    #call keyschedule.                                          ",{}]],"9":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"10":[[" care about output size efficiency.                                                                 ",{}]],"11":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"12":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"13":[["        jal dencrypt                                                                                ",{}]],"14":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"15":[["        li $v0, 4                               #for string printing                                ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        la $a0, nl                              #load the newline string                            ",{}]],"20":[["        syscall                                                                                     ",{}]],"21":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"22":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"23":[["        jal dencrypt                                                                                ",{}]],"24":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"25":[["        li $v0, 4                                                                                   ",{}]],"26":[["        syscall                                                                                     ",{}]],"27":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"28":[["        syscall                                                                                     ",{}]],"29":[["        la $a0, nl                              #load the newline string                            ",{}]],"30":[["        syscall                                                                                     ",{}]],"31":[["        j finish                                #We're done here.                                   ",{}]],"32":[["                                                                                                    ",{}]],"33":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100876,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.8e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"2":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"3":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"6":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"7":[["        jal keysched                    #call keyschedule.                                          ",{}]],"8":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"9":[[" care about output size efficiency.                                                                 ",{}]],"10":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"11":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"12":[["        jal dencrypt                                                                                ",{}]],"13":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"14":[["        li $v0, 4                               #for string printing                                ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        la $a0, nl                              #load the newline string                            ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"21":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"22":[["        jal dencrypt                                                                                ",{}]],"23":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"24":[["        li $v0, 4                                                                                   ",{}]],"25":[["        syscall                                                                                     ",{}]],"26":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"27":[["        syscall                                                                                     ",{}]],"28":[["        la $a0, nl                              #load the newline string                            ",{}]],"29":[["        syscall                                                                                     ",{}]],"30":[["        j finish                                #We're done here.                                   ",{}]],"31":[["                                                                                                    ",{}]],"32":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"33":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100678,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        la $a0, inputbuff               #load our input buffer's address into a0                    ",{}]],"1":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"2":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"5":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"6":[["        jal keysched                    #call keyschedule.                                          ",{}]],"7":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"8":[[" care about output size efficiency.                                                                 ",{}]],"9":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"10":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"11":[["        jal dencrypt                                                                                ",{}]],"12":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"13":[["        li $v0, 4                               #for string printing                                ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        la $a0, nl                              #load the newline string                            ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"20":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"21":[["        jal dencrypt                                                                                ",{}]],"22":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"23":[["        li $v0, 4                                                                                   ",{}]],"24":[["        syscall                                                                                     ",{}]],"25":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"26":[["        syscall                                                                                     ",{}]],"27":[["        la $a0, nl                              #load the newline string                            ",{}]],"28":[["        syscall                                                                                     ",{}]],"29":[["        j finish                                #We're done here.                                   ",{}]],"30":[["                                                                                                    ",{}]],"31":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"32":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"33":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101175,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.7e-05,{"lines":{"0":[["        li $a1, 4096                    #load the size of the buffer into a1                        ",{}]],"1":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"4":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"5":[["        jal keysched                    #call keyschedule.                                          ",{}]],"6":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"7":[[" care about output size efficiency.                                                                 ",{}]],"8":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"9":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"10":[["        jal dencrypt                                                                                ",{}]],"11":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"12":[["        li $v0, 4                               #for string printing                                ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        la $a0, nl                              #load the newline string                            ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"19":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"20":[["        jal dencrypt                                                                                ",{}]],"21":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"22":[["        li $v0, 4                                                                                   ",{}]],"23":[["        syscall                                                                                     ",{}]],"24":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"25":[["        syscall                                                                                     ",{}]],"26":[["        la $a0, nl                              #load the newline string                            ",{}]],"27":[["        syscall                                                                                     ",{}]],"28":[["        j finish                                #We're done here.                                   ",{}]],"29":[["                                                                                                    ",{}]],"30":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"31":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"32":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"33":[["        sw $t0, ($sp)                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100782,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        li $v0, 8                               #set v0 to 8 for string reading                     ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"3":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"4":[["        jal keysched                    #call keyschedule.                                          ",{}]],"5":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"6":[[" care about output size efficiency.                                                                 ",{}]],"7":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"8":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"9":[["        jal dencrypt                                                                                ",{}]],"10":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"11":[["        li $v0, 4                               #for string printing                                ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        la $a0, nl                              #load the newline string                            ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"18":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"19":[["        jal dencrypt                                                                                ",{}]],"20":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"21":[["        li $v0, 4                                                                                   ",{}]],"22":[["        syscall                                                                                     ",{}]],"23":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"24":[["        syscall                                                                                     ",{}]],"25":[["        la $a0, nl                              #load the newline string                            ",{}]],"26":[["        syscall                                                                                     ",{}]],"27":[["        j finish                                #We're done here.                                   ",{}]],"28":[["                                                                                                    ",{}]],"29":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"30":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"31":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"32":[["        sw $t0, ($sp)                                                                               ",{}]],"33":[["        sw $t1, 4($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100511,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"2":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"3":[["        jal keysched                    #call keyschedule.                                          ",{}]],"4":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"5":[[" care about output size efficiency.                                                                 ",{}]],"6":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"7":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"8":[["        jal dencrypt                                                                                ",{}]],"9":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"10":[["        li $v0, 4                               #for string printing                                ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        la $a0, nl                              #load the newline string                            ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"17":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"18":[["        jal dencrypt                                                                                ",{}]],"19":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"20":[["        li $v0, 4                                                                                   ",{}]],"21":[["        syscall                                                                                     ",{}]],"22":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"23":[["        syscall                                                                                     ",{}]],"24":[["        la $a0, nl                              #load the newline string                            ",{}]],"25":[["        syscall                                                                                     ",{}]],"26":[["        j finish                                #We're done here.                                   ",{}]],"27":[["                                                                                                    ",{}]],"28":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"29":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"30":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"31":[["        sw $t0, ($sp)                                                                               ",{}]],"32":[["        sw $t1, 4($sp)                                                                              ",{}]],"33":[["        sw $t2, 8($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101129,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.8e-05,{"lines":{"0":[["        la $a0, pockey                  #load the key's address into a0 for keyschedule             ",{}]],"1":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"2":[["        jal keysched                    #call keyschedule.                                          ",{}]],"3":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"4":[[" care about output size efficiency.                                                                 ",{}]],"5":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"6":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"7":[["        jal dencrypt                                                                                ",{}]],"8":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"9":[["        li $v0, 4                               #for string printing                                ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        la $a0, nl                              #load the newline string                            ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"16":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"17":[["        jal dencrypt                                                                                ",{}]],"18":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"19":[["        li $v0, 4                                                                                   ",{}]],"20":[["        syscall                                                                                     ",{}]],"21":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"22":[["        syscall                                                                                     ",{}]],"23":[["        la $a0, nl                              #load the newline string                            ",{}]],"24":[["        syscall                                                                                     ",{}]],"25":[["        j finish                                #We're done here.                                   ",{}]],"26":[["                                                                                                    ",{}]],"27":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"28":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"29":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"30":[["        sw $t0, ($sp)                                                                               ",{}]],"31":[["        sw $t1, 4($sp)                                                                              ",{}]],"32":[["        sw $t2, 8($sp)                                                                              ",{}]],"33":[["        sw $t3, 12($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101054,{"lines":{"0":[["        li $a1, 1                               #load the key's length, 1, into a1 for keyschedule  ",{}]],"1":[["        jal keysched                    #call keyschedule.                                          ",{}]],"2":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"3":[[" care about output size efficiency.                                                                 ",{}]],"4":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"5":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"6":[["        jal dencrypt                                                                                ",{}]],"7":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"8":[["        li $v0, 4                               #for string printing                                ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        la $a0, nl                              #load the newline string                            ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"15":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"16":[["        jal dencrypt                                                                                ",{}]],"17":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"18":[["        li $v0, 4                                                                                   ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"21":[["        syscall                                                                                     ",{}]],"22":[["        la $a0, nl                              #load the newline string                            ",{}]],"23":[["        syscall                                                                                     ",{}]],"24":[["        j finish                                #We're done here.                                   ",{}]],"25":[["                                                                                                    ",{}]],"26":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"27":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"28":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"29":[["        sw $t0, ($sp)                                                                               ",{}]],"30":[["        sw $t1, 4($sp)                                                                              ",{}]],"31":[["        sw $t2, 8($sp)                                                                              ",{}]],"32":[["        sw $t3, 12($sp)                                                                             ",{}]],"33":[["        sw $a0, 16($sp)                                                                             ",{}]]}}],[0.100562,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        jal keysched                    #call keyschedule.                                          ",{}]],"1":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"2":[[" care about output size efficiency.                                                                 ",{}]],"3":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"4":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"5":[["        jal dencrypt                                                                                ",{}]],"6":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"7":[["        li $v0, 4                               #for string printing                                ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        la $a0, nl                              #load the newline string                            ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"14":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"15":[["        jal dencrypt                                                                                ",{}]],"16":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"17":[["        li $v0, 4                                                                                   ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"20":[["        syscall                                                                                     ",{}]],"21":[["        la $a0, nl                              #load the newline string                            ",{}]],"22":[["        syscall                                                                                     ",{}]],"23":[["        j finish                                #We're done here.                                   ",{}]],"24":[["                                                                                                    ",{}]],"25":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"26":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"27":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"28":[["        sw $t0, ($sp)                                                                               ",{}]],"29":[["        sw $t1, 4($sp)                                                                              ",{}]],"30":[["        sw $t2, 8($sp)                                                                              ",{}]],"31":[["        sw $t3, 12($sp)                                                                             ",{}]],"32":[["        sw $a0, 16($sp)                                                                             ",{}]],"33":[["        #done storing                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101549,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        li $t2, 4096                    #set t2 to the length of the buffer because for now we don't",{}]],"1":[[" care about output size efficiency.                                                                 ",{}]],"2":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"3":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"4":[["        jal dencrypt                                                                                ",{}]],"5":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"6":[["        li $v0, 4                               #for string printing                                ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        la $a0, nl                              #load the newline string                            ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"13":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"14":[["        jal dencrypt                                                                                ",{}]],"15":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"16":[["        li $v0, 4                                                                                   ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        la $a0, nl                              #load the newline string                            ",{}]],"21":[["        syscall                                                                                     ",{}]],"22":[["        j finish                                #We're done here.                                   ",{}]],"23":[["                                                                                                    ",{}]],"24":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"25":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"26":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"27":[["        sw $t0, ($sp)                                                                               ",{}]],"28":[["        sw $t1, 4($sp)                                                                              ",{}]],"29":[["        sw $t2, 8($sp)                                                                              ",{}]],"30":[["        sw $t3, 12($sp)                                                                             ",{}]],"31":[["        sw $a0, 16($sp)                                                                             ",{}]],"32":[["        #done storing                                                                               ",{}]],"33":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101041,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[[" care about output size efficiency.                                                                 ",{}]],"1":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"2":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"3":[["        jal dencrypt                                                                                ",{}]],"4":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"5":[["        li $v0, 4                               #for string printing                                ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, nl                              #load the newline string                            ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"12":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"13":[["        jal dencrypt                                                                                ",{}]],"14":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"15":[["        li $v0, 4                                                                                   ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        la $a0, nl                              #load the newline string                            ",{}]],"20":[["        syscall                                                                                     ",{}]],"21":[["        j finish                                #We're done here.                                   ",{}]],"22":[["                                                                                                    ",{}]],"23":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"24":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"25":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"26":[["        sw $t0, ($sp)                                                                               ",{}]],"27":[["        sw $t1, 4($sp)                                                                              ",{}]],"28":[["        sw $t2, 8($sp)                                                                              ",{}]],"29":[["        sw $t3, 12($sp)                                                                             ",{}]],"30":[["        sw $a0, 16($sp)                                                                             ",{}]],"31":[["        #done storing                                                                               ",{}]],"32":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"33":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.472415,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.7e-05,{"lines":{"0":[["        la $a0, inputbuff               #load the input buffer's location for dencrypt              ",{}]],"1":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"2":[["        jal dencrypt                                                                                ",{}]],"3":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"4":[["        li $v0, 4                               #for string printing                                ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, nl                              #load the newline string                            ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"11":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"12":[["        jal dencrypt                                                                                ",{}]],"13":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"14":[["        li $v0, 4                                                                                   ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        la $a0, nl                              #load the newline string                            ",{}]],"19":[["        syscall                                                                                     ",{}]],"20":[["        j finish                                #We're done here.                                   ",{}]],"21":[["                                                                                                    ",{}]],"22":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"23":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"24":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"25":[["        sw $t0, ($sp)                                                                               ",{}]],"26":[["        sw $t1, 4($sp)                                                                              ",{}]],"27":[["        sw $t2, 8($sp)                                                                              ",{}]],"28":[["        sw $t3, 12($sp)                                                                             ",{}]],"29":[["        sw $a0, 16($sp)                                                                             ",{}]],"30":[["        #done storing                                                                               ",{}]],"31":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"32":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"33":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.417509,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.7e-05,{"lines":{"0":[["        add $a1, $zero, $t2             #load the length of the buffer's contents into a1           ",{}]],"1":[["        jal dencrypt                                                                                ",{}]],"2":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"3":[["        li $v0, 4                               #for string printing                                ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, nl                              #load the newline string                            ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"10":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"11":[["        jal dencrypt                                                                                ",{}]],"12":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"13":[["        li $v0, 4                                                                                   ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        la $a0, nl                              #load the newline string                            ",{}]],"18":[["        syscall                                                                                     ",{}]],"19":[["        j finish                                #We're done here.                                   ",{}]],"20":[["                                                                                                    ",{}]],"21":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"22":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"23":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"24":[["        sw $t0, ($sp)                                                                               ",{}]],"25":[["        sw $t1, 4($sp)                                                                              ",{}]],"26":[["        sw $t2, 8($sp)                                                                              ",{}]],"27":[["        sw $t3, 12($sp)                                                                             ",{}]],"28":[["        sw $a0, 16($sp)                                                                             ",{}]],"29":[["        #done storing                                                                               ",{}]],"30":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"31":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"32":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"33":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099845,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        jal dencrypt                                                                                ",{}]],"1":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"2":[["        li $v0, 4                               #for string printing                                ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, nl                              #load the newline string                            ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"9":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"10":[["        jal dencrypt                                                                                ",{}]],"11":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"12":[["        li $v0, 4                                                                                   ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        la $a0, nl                              #load the newline string                            ",{}]],"17":[["        syscall                                                                                     ",{}]],"18":[["        j finish                                #We're done here.                                   ",{}]],"19":[["                                                                                                    ",{}]],"20":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"21":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"22":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"23":[["        sw $t0, ($sp)                                                                               ",{}]],"24":[["        sw $t1, 4($sp)                                                                              ",{}]],"25":[["        sw $t2, 8($sp)                                                                              ",{}]],"26":[["        sw $t3, 12($sp)                                                                             ",{}]],"27":[["        sw $a0, 16($sp)                                                                             ",{}]],"28":[["        #done storing                                                                               ",{}]],"29":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"30":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"31":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"32":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"33":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100035,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["        la $a0, eoutputtext             #load the message about encrypted text                      ",{}]],"1":[["        li $v0, 4                               #for string printing                                ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, nl                              #load the newline string                            ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"8":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"9":[["        jal dencrypt                                                                                ",{}]],"10":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"11":[["        li $v0, 4                                                                                   ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        la $a0, nl                              #load the newline string                            ",{}]],"16":[["        syscall                                                                                     ",{}]],"17":[["        j finish                                #We're done here.                                   ",{}]],"18":[["                                                                                                    ",{}]],"19":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"20":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"21":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"22":[["        sw $t0, ($sp)                                                                               ",{}]],"23":[["        sw $t1, 4($sp)                                                                              ",{}]],"24":[["        sw $t2, 8($sp)                                                                              ",{}]],"25":[["        sw $t3, 12($sp)                                                                             ",{}]],"26":[["        sw $a0, 16($sp)                                                                             ",{}]],"27":[["        #done storing                                                                               ",{}]],"28":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"29":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"30":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"31":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"32":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"33":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100048,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        li $v0, 4                               #for string printing                                ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, nl                              #load the newline string                            ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"7":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"8":[["        jal dencrypt                                                                                ",{}]],"9":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"10":[["        li $v0, 4                                                                                   ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        la $a0, nl                              #load the newline string                            ",{}]],"15":[["        syscall                                                                                     ",{}]],"16":[["        j finish                                #We're done here.                                   ",{}]],"17":[["                                                                                                    ",{}]],"18":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"19":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"20":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"21":[["        sw $t0, ($sp)                                                                               ",{}]],"22":[["        sw $t1, 4($sp)                                                                              ",{}]],"23":[["        sw $t2, 8($sp)                                                                              ",{}]],"24":[["        sw $t3, 12($sp)                                                                             ",{}]],"25":[["        sw $a0, 16($sp)                                                                             ",{}]],"26":[["        #done storing                                                                               ",{}]],"27":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"28":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"29":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"30":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"31":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"32":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"33":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100021,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, nl                              #load the newline string                            ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"6":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"7":[["        jal dencrypt                                                                                ",{}]],"8":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"9":[["        li $v0, 4                                                                                   ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        la $a0, nl                              #load the newline string                            ",{}]],"14":[["        syscall                                                                                     ",{}]],"15":[["        j finish                                #We're done here.                                   ",{}]],"16":[["                                                                                                    ",{}]],"17":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"18":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"19":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"20":[["        sw $t0, ($sp)                                                                               ",{}]],"21":[["        sw $t1, 4($sp)                                                                              ",{}]],"22":[["        sw $t2, 8($sp)                                                                              ",{}]],"23":[["        sw $t3, 12($sp)                                                                             ",{}]],"24":[["        sw $a0, 16($sp)                                                                             ",{}]],"25":[["        #done storing                                                                               ",{}]],"26":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"27":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"28":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"29":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"30":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"31":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"32":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"33":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100682,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        la $a0, inputbuff               #load the now-encrypted text                                ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, nl                              #load the newline string                            ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"5":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"6":[["        jal dencrypt                                                                                ",{}]],"7":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"8":[["        li $v0, 4                                                                                   ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        la $a0, nl                              #load the newline string                            ",{}]],"13":[["        syscall                                                                                     ",{}]],"14":[["        j finish                                #We're done here.                                   ",{}]],"15":[["                                                                                                    ",{}]],"16":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"17":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"18":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"19":[["        sw $t0, ($sp)                                                                               ",{}]],"20":[["        sw $t1, 4($sp)                                                                              ",{}]],"21":[["        sw $t2, 8($sp)                                                                              ",{}]],"22":[["        sw $t3, 12($sp)                                                                             ",{}]],"23":[["        sw $a0, 16($sp)                                                                             ",{}]],"24":[["        #done storing                                                                               ",{}]],"25":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"26":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"27":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"28":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"29":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"30":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"31":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"32":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"33":[["        #begin restoring                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100241,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, nl                              #load the newline string                            ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"4":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"5":[["        jal dencrypt                                                                                ",{}]],"6":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"7":[["        li $v0, 4                                                                                   ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        la $a0, nl                              #load the newline string                            ",{}]],"12":[["        syscall                                                                                     ",{}]],"13":[["        j finish                                #We're done here.                                   ",{}]],"14":[["                                                                                                    ",{}]],"15":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"16":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"17":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"18":[["        sw $t0, ($sp)                                                                               ",{}]],"19":[["        sw $t1, 4($sp)                                                                              ",{}]],"20":[["        sw $t2, 8($sp)                                                                              ",{}]],"21":[["        sw $t3, 12($sp)                                                                             ",{}]],"22":[["        sw $a0, 16($sp)                                                                             ",{}]],"23":[["        #done storing                                                                               ",{}]],"24":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"25":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"26":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"27":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"28":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"29":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"30":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"31":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"32":[["        #begin restoring                                                                            ",{}]],"33":[["        lw $t0, ($sp)                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100967,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.3e-05,{"lines":{"0":[["        la $a0, nl                              #load the newline string                            ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"3":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"4":[["        jal dencrypt                                                                                ",{}]],"5":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"6":[["        li $v0, 4                                                                                   ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        la $a0, nl                              #load the newline string                            ",{}]],"11":[["        syscall                                                                                     ",{}]],"12":[["        j finish                                #We're done here.                                   ",{}]],"13":[["                                                                                                    ",{}]],"14":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"15":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"16":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"17":[["        sw $t0, ($sp)                                                                               ",{}]],"18":[["        sw $t1, 4($sp)                                                                              ",{}]],"19":[["        sw $t2, 8($sp)                                                                              ",{}]],"20":[["        sw $t3, 12($sp)                                                                             ",{}]],"21":[["        sw $a0, 16($sp)                                                                             ",{}]],"22":[["        #done storing                                                                               ",{}]],"23":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"24":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"25":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"26":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"27":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"28":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"29":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"30":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"31":[["        #begin restoring                                                                            ",{}]],"32":[["        lw $t0, ($sp)                                                                               ",{}]],"33":[["        lw $t1, 4($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101125,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.2e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"2":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"3":[["        jal dencrypt                                                                                ",{}]],"4":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"5":[["        li $v0, 4                                                                                   ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        la $a0, nl                              #load the newline string                            ",{}]],"10":[["        syscall                                                                                     ",{}]],"11":[["        j finish                                #We're done here.                                   ",{}]],"12":[["                                                                                                    ",{}]],"13":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"14":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"15":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"16":[["        sw $t0, ($sp)                                                                               ",{}]],"17":[["        sw $t1, 4($sp)                                                                              ",{}]],"18":[["        sw $t2, 8($sp)                                                                              ",{}]],"19":[["        sw $t3, 12($sp)                                                                             ",{}]],"20":[["        sw $a0, 16($sp)                                                                             ",{}]],"21":[["        #done storing                                                                               ",{}]],"22":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"23":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"24":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"25":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"26":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"27":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"28":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"29":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"30":[["        #begin restoring                                                                            ",{}]],"31":[["        lw $t0, ($sp)                                                                               ",{}]],"32":[["        lw $t1, 4($sp)                                                                              ",{}]],"33":[["        lw $t2, 8($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101049,{"lines":{"0":[["        la $a0, inputbuff               #load the text back again for decryption                    ",{}]],"1":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"2":[["        jal dencrypt                                                                                ",{}]],"3":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"4":[["        li $v0, 4                                                                                   ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        la $a0, nl                              #load the newline string                            ",{}]],"9":[["        syscall                                                                                     ",{}]],"10":[["        j finish                                #We're done here.                                   ",{}]],"11":[["                                                                                                    ",{}]],"12":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"13":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"14":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"15":[["        sw $t0, ($sp)                                                                               ",{}]],"16":[["        sw $t1, 4($sp)                                                                              ",{}]],"17":[["        sw $t2, 8($sp)                                                                              ",{}]],"18":[["        sw $t3, 12($sp)                                                                             ",{}]],"19":[["        sw $a0, 16($sp)                                                                             ",{}]],"20":[["        #done storing                                                                               ",{}]],"21":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"22":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"23":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"24":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"25":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"26":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"27":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"28":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"29":[["        #begin restoring                                                                            ",{}]],"30":[["        lw $t0, ($sp)                                                                               ",{}]],"31":[["        lw $t1, 4($sp)                                                                              ",{}]],"32":[["        lw $t2, 8($sp)                                                                              ",{}]],"33":[["        lw $t3, 12($sp)                                                                             ",{}]]}}],[0.101126,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        li $s0, 2                               #set behavior to decrypt                            ",{}]],"1":[["        jal dencrypt                                                                                ",{}]],"2":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"3":[["        li $v0, 4                                                                                   ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        la $a0, nl                              #load the newline string                            ",{}]],"8":[["        syscall                                                                                     ",{}]],"9":[["        j finish                                #We're done here.                                   ",{}]],"10":[["                                                                                                    ",{}]],"11":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"12":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"13":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"14":[["        sw $t0, ($sp)                                                                               ",{}]],"15":[["        sw $t1, 4($sp)                                                                              ",{}]],"16":[["        sw $t2, 8($sp)                                                                              ",{}]],"17":[["        sw $t3, 12($sp)                                                                             ",{}]],"18":[["        sw $a0, 16($sp)                                                                             ",{}]],"19":[["        #done storing                                                                               ",{}]],"20":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"21":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"22":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"23":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"24":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"25":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"26":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"27":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"28":[["        #begin restoring                                                                            ",{}]],"29":[["        lw $t0, ($sp)                                                                               ",{}]],"30":[["        lw $t1, 4($sp)                                                                              ",{}]],"31":[["        lw $t2, 8($sp)                                                                              ",{}]],"32":[["        lw $t3, 12($sp)                                                                             ",{}]],"33":[["        lw $a0, 16($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100885,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        jal dencrypt                                                                                ",{}]],"1":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"2":[["        li $v0, 4                                                                                   ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        la $a0, nl                              #load the newline string                            ",{}]],"7":[["        syscall                                                                                     ",{}]],"8":[["        j finish                                #We're done here.                                   ",{}]],"9":[["                                                                                                    ",{}]],"10":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"11":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"12":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"13":[["        sw $t0, ($sp)                                                                               ",{}]],"14":[["        sw $t1, 4($sp)                                                                              ",{}]],"15":[["        sw $t2, 8($sp)                                                                              ",{}]],"16":[["        sw $t3, 12($sp)                                                                             ",{}]],"17":[["        sw $a0, 16($sp)                                                                             ",{}]],"18":[["        #done storing                                                                               ",{}]],"19":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"20":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"21":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"22":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"23":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"24":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"25":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"26":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"27":[["        #begin restoring                                                                            ",{}]],"28":[["        lw $t0, ($sp)                                                                               ",{}]],"29":[["        lw $t1, 4($sp)                                                                              ",{}]],"30":[["        lw $t2, 8($sp)                                                                              ",{}]],"31":[["        lw $t3, 12($sp)                                                                             ",{}]],"32":[["        lw $a0, 16($sp)                                                                             ",{}]],"33":[["        addi $sp, $sp, 20                                                                           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101332,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        la $a0, doutputtext             #load the message about decrypted text                      ",{}]],"1":[["        li $v0, 4                                                                                   ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        la $a0, nl                              #load the newline string                            ",{}]],"6":[["        syscall                                                                                     ",{}]],"7":[["        j finish                                #We're done here.                                   ",{}]],"8":[["                                                                                                    ",{}]],"9":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"10":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"11":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"12":[["        sw $t0, ($sp)                                                                               ",{}]],"13":[["        sw $t1, 4($sp)                                                                              ",{}]],"14":[["        sw $t2, 8($sp)                                                                              ",{}]],"15":[["        sw $t3, 12($sp)                                                                             ",{}]],"16":[["        sw $a0, 16($sp)                                                                             ",{}]],"17":[["        #done storing                                                                               ",{}]],"18":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"19":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"20":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"21":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"22":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"23":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"24":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"25":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"26":[["        #begin restoring                                                                            ",{}]],"27":[["        lw $t0, ($sp)                                                                               ",{}]],"28":[["        lw $t1, 4($sp)                                                                              ",{}]],"29":[["        lw $t2, 8($sp)                                                                              ",{}]],"30":[["        lw $t3, 12($sp)                                                                             ",{}]],"31":[["        lw $a0, 16($sp)                                                                             ",{}]],"32":[["        addi $sp, $sp, 20                                                                           ",{}]],"33":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100385,{"lines":{"0":[["        li $v0, 4                                                                                   ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        la $a0, nl                              #load the newline string                            ",{}]],"5":[["        syscall                                                                                     ",{}]],"6":[["        j finish                                #We're done here.                                   ",{}]],"7":[["                                                                                                    ",{}]],"8":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"9":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"10":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"11":[["        sw $t0, ($sp)                                                                               ",{}]],"12":[["        sw $t1, 4($sp)                                                                              ",{}]],"13":[["        sw $t2, 8($sp)                                                                              ",{}]],"14":[["        sw $t3, 12($sp)                                                                             ",{}]],"15":[["        sw $a0, 16($sp)                                                                             ",{}]],"16":[["        #done storing                                                                               ",{}]],"17":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"18":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"19":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"20":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"21":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"22":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"23":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"24":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"25":[["        #begin restoring                                                                            ",{}]],"26":[["        lw $t0, ($sp)                                                                               ",{}]],"27":[["        lw $t1, 4($sp)                                                                              ",{}]],"28":[["        lw $t2, 8($sp)                                                                              ",{}]],"29":[["        lw $t3, 12($sp)                                                                             ",{}]],"30":[["        lw $a0, 16($sp)                                                                             ",{}]],"31":[["        addi $sp, $sp, 20                                                                           ",{}]],"32":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"33":[["                                                                                                    ",{}]]}}],[0.490111,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        la $a0, nl                              #load the newline string                            ",{}]],"4":[["        syscall                                                                                     ",{}]],"5":[["        j finish                                #We're done here.                                   ",{}]],"6":[["                                                                                                    ",{}]],"7":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"8":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"9":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"10":[["        sw $t0, ($sp)                                                                               ",{}]],"11":[["        sw $t1, 4($sp)                                                                              ",{}]],"12":[["        sw $t2, 8($sp)                                                                              ",{}]],"13":[["        sw $t3, 12($sp)                                                                             ",{}]],"14":[["        sw $a0, 16($sp)                                                                             ",{}]],"15":[["        #done storing                                                                               ",{}]],"16":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"17":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"18":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"19":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"20":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"21":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"22":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"23":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"24":[["        #begin restoring                                                                            ",{}]],"25":[["        lw $t0, ($sp)                                                                               ",{}]],"26":[["        lw $t1, 4($sp)                                                                              ",{}]],"27":[["        lw $t2, 8($sp)                                                                              ",{}]],"28":[["        lw $t3, 12($sp)                                                                             ",{}]],"29":[["        lw $a0, 16($sp)                                                                             ",{}]],"30":[["        addi $sp, $sp, 20                                                                           ",{}]],"31":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"32":[["                                                                                                    ",{}]],"33":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.417561,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        la $a0, inputbuff               #load the now-decrypted text                                ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        la $a0, nl                              #load the newline string                            ",{}]],"3":[["        syscall                                                                                     ",{}]],"4":[["        j finish                                #We're done here.                                   ",{}]],"5":[["                                                                                                    ",{}]],"6":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"7":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"8":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"9":[["        sw $t0, ($sp)                                                                               ",{}]],"10":[["        sw $t1, 4($sp)                                                                              ",{}]],"11":[["        sw $t2, 8($sp)                                                                              ",{}]],"12":[["        sw $t3, 12($sp)                                                                             ",{}]],"13":[["        sw $a0, 16($sp)                                                                             ",{}]],"14":[["        #done storing                                                                               ",{}]],"15":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"16":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"17":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"18":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"19":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"20":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"21":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"22":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"23":[["        #begin restoring                                                                            ",{}]],"24":[["        lw $t0, ($sp)                                                                               ",{}]],"25":[["        lw $t1, 4($sp)                                                                              ",{}]],"26":[["        lw $t2, 8($sp)                                                                              ",{}]],"27":[["        lw $t3, 12($sp)                                                                             ",{}]],"28":[["        lw $a0, 16($sp)                                                                             ",{}]],"29":[["        addi $sp, $sp, 20                                                                           ",{}]],"30":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"31":[["                                                                                                    ",{}]],"32":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"33":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100997,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.1e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        la $a0, nl                              #load the newline string                            ",{}]],"2":[["        syscall                                                                                     ",{}]],"3":[["        j finish                                #We're done here.                                   ",{}]],"4":[["                                                                                                    ",{}]],"5":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"6":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"7":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"8":[["        sw $t0, ($sp)                                                                               ",{}]],"9":[["        sw $t1, 4($sp)                                                                              ",{}]],"10":[["        sw $t2, 8($sp)                                                                              ",{}]],"11":[["        sw $t3, 12($sp)                                                                             ",{}]],"12":[["        sw $a0, 16($sp)                                                                             ",{}]],"13":[["        #done storing                                                                               ",{}]],"14":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"15":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"16":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"17":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"18":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"19":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"20":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"21":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"22":[["        #begin restoring                                                                            ",{}]],"23":[["        lw $t0, ($sp)                                                                               ",{}]],"24":[["        lw $t1, 4($sp)                                                                              ",{}]],"25":[["        lw $t2, 8($sp)                                                                              ",{}]],"26":[["        lw $t3, 12($sp)                                                                             ",{}]],"27":[["        lw $a0, 16($sp)                                                                             ",{}]],"28":[["        addi $sp, $sp, 20                                                                           ",{}]],"29":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"30":[["                                                                                                    ",{}]],"31":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"32":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"33":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101099,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5e-05,{"lines":{"0":[["        la $a0, nl                              #load the newline string                            ",{}]],"1":[["        syscall                                                                                     ",{}]],"2":[["        j finish                                #We're done here.                                   ",{}]],"3":[["                                                                                                    ",{}]],"4":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"5":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"6":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"7":[["        sw $t0, ($sp)                                                                               ",{}]],"8":[["        sw $t1, 4($sp)                                                                              ",{}]],"9":[["        sw $t2, 8($sp)                                                                              ",{}]],"10":[["        sw $t3, 12($sp)                                                                             ",{}]],"11":[["        sw $a0, 16($sp)                                                                             ",{}]],"12":[["        #done storing                                                                               ",{}]],"13":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"14":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"15":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"16":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"17":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"18":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"19":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"20":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"21":[["        #begin restoring                                                                            ",{}]],"22":[["        lw $t0, ($sp)                                                                               ",{}]],"23":[["        lw $t1, 4($sp)                                                                              ",{}]],"24":[["        lw $t2, 8($sp)                                                                              ",{}]],"25":[["        lw $t3, 12($sp)                                                                             ",{}]],"26":[["        lw $a0, 16($sp)                                                                             ",{}]],"27":[["        addi $sp, $sp, 20                                                                           ",{}]],"28":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"29":[["                                                                                                    ",{}]],"30":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"31":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"32":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"33":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101133,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        syscall                                                                                     ",{}]],"1":[["        j finish                                #We're done here.                                   ",{}]],"2":[["                                                                                                    ",{}]],"3":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"4":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"5":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"6":[["        sw $t0, ($sp)                                                                               ",{}]],"7":[["        sw $t1, 4($sp)                                                                              ",{}]],"8":[["        sw $t2, 8($sp)                                                                              ",{}]],"9":[["        sw $t3, 12($sp)                                                                             ",{}]],"10":[["        sw $a0, 16($sp)                                                                             ",{}]],"11":[["        #done storing                                                                               ",{}]],"12":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"13":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"14":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"15":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"16":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"17":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"18":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"19":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"20":[["        #begin restoring                                                                            ",{}]],"21":[["        lw $t0, ($sp)                                                                               ",{}]],"22":[["        lw $t1, 4($sp)                                                                              ",{}]],"23":[["        lw $t2, 8($sp)                                                                              ",{}]],"24":[["        lw $t3, 12($sp)                                                                             ",{}]],"25":[["        lw $a0, 16($sp)                                                                             ",{}]],"26":[["        addi $sp, $sp, 20                                                                           ",{}]],"27":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"28":[["                                                                                                    ",{}]],"29":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"30":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"31":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"32":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"33":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100137,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        j finish                                #We're done here.                                   ",{}]],"1":[["                                                                                                    ",{}]],"2":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"3":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"4":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"5":[["        sw $t0, ($sp)                                                                               ",{}]],"6":[["        sw $t1, 4($sp)                                                                              ",{}]],"7":[["        sw $t2, 8($sp)                                                                              ",{}]],"8":[["        sw $t3, 12($sp)                                                                             ",{}]],"9":[["        sw $a0, 16($sp)                                                                             ",{}]],"10":[["        #done storing                                                                               ",{}]],"11":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"12":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"13":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"14":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"15":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"16":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"17":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"18":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"19":[["        #begin restoring                                                                            ",{}]],"20":[["        lw $t0, ($sp)                                                                               ",{}]],"21":[["        lw $t1, 4($sp)                                                                              ",{}]],"22":[["        lw $t2, 8($sp)                                                                              ",{}]],"23":[["        lw $t3, 12($sp)                                                                             ",{}]],"24":[["        lw $a0, 16($sp)                                                                             ",{}]],"25":[["        addi $sp, $sp, 20                                                                           ",{}]],"26":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"27":[["                                                                                                    ",{}]],"28":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"29":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"30":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"31":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"32":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"33":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100865,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"2":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"3":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"4":[["        sw $t0, ($sp)                                                                               ",{}]],"5":[["        sw $t1, 4($sp)                                                                              ",{}]],"6":[["        sw $t2, 8($sp)                                                                              ",{}]],"7":[["        sw $t3, 12($sp)                                                                             ",{}]],"8":[["        sw $a0, 16($sp)                                                                             ",{}]],"9":[["        #done storing                                                                               ",{}]],"10":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"11":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"12":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"13":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"14":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"15":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"16":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"17":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"18":[["        #begin restoring                                                                            ",{}]],"19":[["        lw $t0, ($sp)                                                                               ",{}]],"20":[["        lw $t1, 4($sp)                                                                              ",{}]],"21":[["        lw $t2, 8($sp)                                                                              ",{}]],"22":[["        lw $t3, 12($sp)                                                                             ",{}]],"23":[["        lw $a0, 16($sp)                                                                             ",{}]],"24":[["        addi $sp, $sp, 20                                                                           ",{}]],"25":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"26":[["                                                                                                    ",{}]],"27":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"28":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"29":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"30":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"31":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"32":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"33":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]]}}],[0.100918,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.4e-05,{"lines":{"0":[["swapendian:                                     #takes a0 as swapthis                               ",{}]],"1":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"2":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"3":[["        sw $t0, ($sp)                                                                               ",{}]],"4":[["        sw $t1, 4($sp)                                                                              ",{}]],"5":[["        sw $t2, 8($sp)                                                                              ",{}]],"6":[["        sw $t3, 12($sp)                                                                             ",{}]],"7":[["        sw $a0, 16($sp)                                                                             ",{}]],"8":[["        #done storing                                                                               ",{}]],"9":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"10":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"11":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"12":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"13":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"14":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"15":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"16":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"17":[["        #begin restoring                                                                            ",{}]],"18":[["        lw $t0, ($sp)                                                                               ",{}]],"19":[["        lw $t1, 4($sp)                                                                              ",{}]],"20":[["        lw $t2, 8($sp)                                                                              ",{}]],"21":[["        lw $t3, 12($sp)                                                                             ",{}]],"22":[["        lw $a0, 16($sp)                                                                             ",{}]],"23":[["        addi $sp, $sp, 20                                                                           ",{}]],"24":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"25":[["                                                                                                    ",{}]],"26":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"27":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"28":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"29":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"30":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"31":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"32":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"33":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09986200000000001,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[3.8e-05,{"lines":{"0":[["        #Comments that better explain what I'm about to do can be found in dencrypt. Sorry.to make  ",{}]],"1":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"2":[["        sw $t0, ($sp)                                                                               ",{}]],"3":[["        sw $t1, 4($sp)                                                                              ",{}]],"4":[["        sw $t2, 8($sp)                                                                              ",{}]],"5":[["        sw $t3, 12($sp)                                                                             ",{}]],"6":[["        sw $a0, 16($sp)                                                                             ",{}]],"7":[["        #done storing                                                                               ",{}]],"8":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"9":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"10":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"11":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"12":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"13":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"14":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"15":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"16":[["        #begin restoring                                                                            ",{}]],"17":[["        lw $t0, ($sp)                                                                               ",{}]],"18":[["        lw $t1, 4($sp)                                                                              ",{}]],"19":[["        lw $t2, 8($sp)                                                                              ",{}]],"20":[["        lw $t3, 12($sp)                                                                             ",{}]],"21":[["        lw $a0, 16($sp)                                                                             ",{}]],"22":[["        addi $sp, $sp, 20                                                                           ",{}]],"23":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"24":[["                                                                                                    ",{}]],"25":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"26":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"27":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"28":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"29":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"30":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"31":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"32":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"33":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101901,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.899999999999999e-05,{"lines":{"0":[["        addi $sp, $sp, -20              #move the stack pointer down for heap stuff                 ",{}]],"1":[["        sw $t0, ($sp)                                                                               ",{}]],"2":[["        sw $t1, 4($sp)                                                                              ",{}]],"3":[["        sw $t2, 8($sp)                                                                              ",{}]],"4":[["        sw $t3, 12($sp)                                                                             ",{}]],"5":[["        sw $a0, 16($sp)                                                                             ",{}]],"6":[["        #done storing                                                                               ",{}]],"7":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"8":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"9":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"10":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"11":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"12":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"13":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"14":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"15":[["        #begin restoring                                                                            ",{}]],"16":[["        lw $t0, ($sp)                                                                               ",{}]],"17":[["        lw $t1, 4($sp)                                                                              ",{}]],"18":[["        lw $t2, 8($sp)                                                                              ",{}]],"19":[["        lw $t3, 12($sp)                                                                             ",{}]],"20":[["        lw $a0, 16($sp)                                                                             ",{}]],"21":[["        addi $sp, $sp, 20                                                                           ",{}]],"22":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"23":[["                                                                                                    ",{}]],"24":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"25":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"26":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"27":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"28":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"29":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"30":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"31":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"32":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"33":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100983,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.1e-05,{"lines":{"0":[["        sw $t0, ($sp)                                                                               ",{}]],"1":[["        sw $t1, 4($sp)                                                                              ",{}]],"2":[["        sw $t2, 8($sp)                                                                              ",{}]],"3":[["        sw $t3, 12($sp)                                                                             ",{}]],"4":[["        sw $a0, 16($sp)                                                                             ",{}]],"5":[["        #done storing                                                                               ",{}]],"6":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"7":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"8":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"9":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"10":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"11":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"12":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"13":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"14":[["        #begin restoring                                                                            ",{}]],"15":[["        lw $t0, ($sp)                                                                               ",{}]],"16":[["        lw $t1, 4($sp)                                                                              ",{}]],"17":[["        lw $t2, 8($sp)                                                                              ",{}]],"18":[["        lw $t3, 12($sp)                                                                             ",{}]],"19":[["        lw $a0, 16($sp)                                                                             ",{}]],"20":[["        addi $sp, $sp, 20                                                                           ",{}]],"21":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"22":[["                                                                                                    ",{}]],"23":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"24":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"25":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"26":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"27":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"28":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"29":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"30":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"31":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"32":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"33":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100179,{"lines":{"0":[["        sw $t1, 4($sp)                                                                              ",{}]],"1":[["        sw $t2, 8($sp)                                                                              ",{}]],"2":[["        sw $t3, 12($sp)                                                                             ",{}]],"3":[["        sw $a0, 16($sp)                                                                             ",{}]],"4":[["        #done storing                                                                               ",{}]],"5":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"6":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"7":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"8":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"9":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"10":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"11":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"12":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"13":[["        #begin restoring                                                                            ",{}]],"14":[["        lw $t0, ($sp)                                                                               ",{}]],"15":[["        lw $t1, 4($sp)                                                                              ",{}]],"16":[["        lw $t2, 8($sp)                                                                              ",{}]],"17":[["        lw $t3, 12($sp)                                                                             ",{}]],"18":[["        lw $a0, 16($sp)                                                                             ",{}]],"19":[["        addi $sp, $sp, 20                                                                           ",{}]],"20":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"21":[["                                                                                                    ",{}]],"22":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"23":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"24":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"25":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"26":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"27":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"28":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"29":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"30":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"31":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"32":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"33":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]]}}],[0.101297,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        sw $t2, 8($sp)                                                                              ",{}]],"1":[["        sw $t3, 12($sp)                                                                             ",{}]],"2":[["        sw $a0, 16($sp)                                                                             ",{}]],"3":[["        #done storing                                                                               ",{}]],"4":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"5":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"6":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"7":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"8":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"9":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"10":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"11":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"12":[["        #begin restoring                                                                            ",{}]],"13":[["        lw $t0, ($sp)                                                                               ",{}]],"14":[["        lw $t1, 4($sp)                                                                              ",{}]],"15":[["        lw $t2, 8($sp)                                                                              ",{}]],"16":[["        lw $t3, 12($sp)                                                                             ",{}]],"17":[["        lw $a0, 16($sp)                                                                             ",{}]],"18":[["        addi $sp, $sp, 20                                                                           ",{}]],"19":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"20":[["                                                                                                    ",{}]],"21":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"22":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"23":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"24":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"25":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"26":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"27":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"28":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"29":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"30":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"31":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"32":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"33":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101205,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        sw $t3, 12($sp)                                                                             ",{}]],"1":[["        sw $a0, 16($sp)                                                                             ",{}]],"2":[["        #done storing                                                                               ",{}]],"3":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"4":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"5":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"6":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"7":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"8":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"9":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"10":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"11":[["        #begin restoring                                                                            ",{}]],"12":[["        lw $t0, ($sp)                                                                               ",{}]],"13":[["        lw $t1, 4($sp)                                                                              ",{}]],"14":[["        lw $t2, 8($sp)                                                                              ",{}]],"15":[["        lw $t3, 12($sp)                                                                             ",{}]],"16":[["        lw $a0, 16($sp)                                                                             ",{}]],"17":[["        addi $sp, $sp, 20                                                                           ",{}]],"18":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"19":[["                                                                                                    ",{}]],"20":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"21":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"22":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"23":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"24":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"25":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"26":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"27":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"28":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"29":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"30":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"31":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"32":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"33":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101092,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        sw $a0, 16($sp)                                                                             ",{}]],"1":[["        #done storing                                                                               ",{}]],"2":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"3":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"4":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"5":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"6":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"7":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"8":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"9":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"10":[["        #begin restoring                                                                            ",{}]],"11":[["        lw $t0, ($sp)                                                                               ",{}]],"12":[["        lw $t1, 4($sp)                                                                              ",{}]],"13":[["        lw $t2, 8($sp)                                                                              ",{}]],"14":[["        lw $t3, 12($sp)                                                                             ",{}]],"15":[["        lw $a0, 16($sp)                                                                             ",{}]],"16":[["        addi $sp, $sp, 20                                                                           ",{}]],"17":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"18":[["                                                                                                    ",{}]],"19":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"20":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"21":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"22":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"23":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"24":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"25":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"26":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"27":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"28":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"29":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"30":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"31":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"32":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"33":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.078143,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        #done storing                                                                               ",{}]],"1":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"2":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"3":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"4":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"5":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"6":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"7":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"8":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"9":[["        #begin restoring                                                                            ",{}]],"10":[["        lw $t0, ($sp)                                                                               ",{}]],"11":[["        lw $t1, 4($sp)                                                                              ",{}]],"12":[["        lw $t2, 8($sp)                                                                              ",{}]],"13":[["        lw $t3, 12($sp)                                                                             ",{}]],"14":[["        lw $a0, 16($sp)                                                                             ",{}]],"15":[["        addi $sp, $sp, 20                                                                           ",{}]],"16":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"17":[["                                                                                                    ",{}]],"18":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"19":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"20":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"21":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"22":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"23":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"24":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"25":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"26":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"27":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"28":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"29":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"30":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"31":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"32":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"33":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.415934,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[3.8e-05,{"lines":{"0":[["        lb $t0, 19($sp)                 #tmp[0] = swapthis[3]                                       ",{}]],"1":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"2":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"3":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"4":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"5":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"6":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"7":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"8":[["        #begin restoring                                                                            ",{}]],"9":[["        lw $t0, ($sp)                                                                               ",{}]],"10":[["        lw $t1, 4($sp)                                                                              ",{}]],"11":[["        lw $t2, 8($sp)                                                                              ",{}]],"12":[["        lw $t3, 12($sp)                                                                             ",{}]],"13":[["        lw $a0, 16($sp)                                                                             ",{}]],"14":[["        addi $sp, $sp, 20                                                                           ",{}]],"15":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"16":[["                                                                                                    ",{}]],"17":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"18":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"19":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"20":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"21":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"22":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"23":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"24":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"25":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"26":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"27":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"28":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"29":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"30":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"31":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"32":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"33":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101592,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["        lb $t1, 18($sp)                 #tmp[1] = swapthis[2]                                       ",{}]],"1":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"2":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"3":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"4":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"5":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"6":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"7":[["        #begin restoring                                                                            ",{}]],"8":[["        lw $t0, ($sp)                                                                               ",{}]],"9":[["        lw $t1, 4($sp)                                                                              ",{}]],"10":[["        lw $t2, 8($sp)                                                                              ",{}]],"11":[["        lw $t3, 12($sp)                                                                             ",{}]],"12":[["        lw $a0, 16($sp)                                                                             ",{}]],"13":[["        addi $sp, $sp, 20                                                                           ",{}]],"14":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"15":[["                                                                                                    ",{}]],"16":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"17":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"18":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"19":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"20":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"21":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"22":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"23":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"24":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"25":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"26":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"27":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"28":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"29":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"30":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"31":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"32":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"33":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100766,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.499999999999999e-05,{"lines":{"0":[["        lb $t2, 17($sp)                 #tmp[2] = swapthis[1]                                       ",{}]],"1":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"2":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"3":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"4":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"5":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"6":[["        #begin restoring                                                                            ",{}]],"7":[["        lw $t0, ($sp)                                                                               ",{}]],"8":[["        lw $t1, 4($sp)                                                                              ",{}]],"9":[["        lw $t2, 8($sp)                                                                              ",{}]],"10":[["        lw $t3, 12($sp)                                                                             ",{}]],"11":[["        lw $a0, 16($sp)                                                                             ",{}]],"12":[["        addi $sp, $sp, 20                                                                           ",{}]],"13":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"14":[["                                                                                                    ",{}]],"15":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"16":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"17":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"18":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"19":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"20":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"21":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"22":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"23":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"24":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"25":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"26":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"27":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"28":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"29":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"30":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"31":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"32":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"33":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100028,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        lb $t3, 16($sp)                 #tmp[3] = swapthis[0]                                       ",{}]],"1":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"2":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"3":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"4":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"5":[["        #begin restoring                                                                            ",{}]],"6":[["        lw $t0, ($sp)                                                                               ",{}]],"7":[["        lw $t1, 4($sp)                                                                              ",{}]],"8":[["        lw $t2, 8($sp)                                                                              ",{}]],"9":[["        lw $t3, 12($sp)                                                                             ",{}]],"10":[["        lw $a0, 16($sp)                                                                             ",{}]],"11":[["        addi $sp, $sp, 20                                                                           ",{}]],"12":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"13":[["                                                                                                    ",{}]],"14":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"15":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"16":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"17":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"18":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"19":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"20":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"21":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"22":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"23":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"24":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"25":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"26":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"27":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"28":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"29":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"30":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"31":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"32":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"33":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100286,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.4e-05,{"lines":{"0":[["        sb $t0, 16($sp)                 #swapthis[0] = tmp[0]                                       ",{}]],"1":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"2":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"3":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"4":[["        #begin restoring                                                                            ",{}]],"5":[["        lw $t0, ($sp)                                                                               ",{}]],"6":[["        lw $t1, 4($sp)                                                                              ",{}]],"7":[["        lw $t2, 8($sp)                                                                              ",{}]],"8":[["        lw $t3, 12($sp)                                                                             ",{}]],"9":[["        lw $a0, 16($sp)                                                                             ",{}]],"10":[["        addi $sp, $sp, 20                                                                           ",{}]],"11":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"12":[["                                                                                                    ",{}]],"13":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"14":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"15":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"16":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"17":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"18":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"19":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"20":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"21":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"22":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"23":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"24":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"25":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"26":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"27":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"28":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"29":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"30":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"31":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"32":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"33":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100078,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        sb $t1, 17($sp)                 #swapthis[1] = tmp[1]                                       ",{}]],"1":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"2":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"3":[["        #begin restoring                                                                            ",{}]],"4":[["        lw $t0, ($sp)                                                                               ",{}]],"5":[["        lw $t1, 4($sp)                                                                              ",{}]],"6":[["        lw $t2, 8($sp)                                                                              ",{}]],"7":[["        lw $t3, 12($sp)                                                                             ",{}]],"8":[["        lw $a0, 16($sp)                                                                             ",{}]],"9":[["        addi $sp, $sp, 20                                                                           ",{}]],"10":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"11":[["                                                                                                    ",{}]],"12":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"13":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"14":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"15":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"16":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"17":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"18":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"19":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"20":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"21":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"22":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"23":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"24":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"25":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"26":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"27":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"28":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"29":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"30":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"31":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"32":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"33":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099909,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.6e-05,{"lines":{"0":[["        sb $t2, 18($sp)                 #swapthis[2] = tmp[2]                                       ",{}]],"1":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"2":[["        #begin restoring                                                                            ",{}]],"3":[["        lw $t0, ($sp)                                                                               ",{}]],"4":[["        lw $t1, 4($sp)                                                                              ",{}]],"5":[["        lw $t2, 8($sp)                                                                              ",{}]],"6":[["        lw $t3, 12($sp)                                                                             ",{}]],"7":[["        lw $a0, 16($sp)                                                                             ",{}]],"8":[["        addi $sp, $sp, 20                                                                           ",{}]],"9":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"10":[["                                                                                                    ",{}]],"11":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"12":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"13":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"14":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"15":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"16":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"17":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"18":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"19":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"20":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"21":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"22":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"23":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"24":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"25":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"26":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"27":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"28":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"29":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"30":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"31":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"32":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"33":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100311,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        sb $t3, 19($sp)                 #swapthis[3] = tmp[3]                                       ",{}]],"1":[["        #begin restoring                                                                            ",{}]],"2":[["        lw $t0, ($sp)                                                                               ",{}]],"3":[["        lw $t1, 4($sp)                                                                              ",{}]],"4":[["        lw $t2, 8($sp)                                                                              ",{}]],"5":[["        lw $t3, 12($sp)                                                                             ",{}]],"6":[["        lw $a0, 16($sp)                                                                             ",{}]],"7":[["        addi $sp, $sp, 20                                                                           ",{}]],"8":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"9":[["                                                                                                    ",{}]],"10":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"11":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"12":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"13":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"14":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"15":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"16":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"17":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"18":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"19":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"20":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"21":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"22":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"23":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"24":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"25":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"26":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"27":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"28":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"29":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"30":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"31":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"32":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10048,{"lines":{"0":[["        #begin restoring                                                                            ",{}]],"1":[["        lw $t0, ($sp)                                                                               ",{}]],"2":[["        lw $t1, 4($sp)                                                                              ",{}]],"3":[["        lw $t2, 8($sp)                                                                              ",{}]],"4":[["        lw $t3, 12($sp)                                                                             ",{}]],"5":[["        lw $a0, 16($sp)                                                                             ",{}]],"6":[["        addi $sp, $sp, 20                                                                           ",{}]],"7":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"8":[["                                                                                                    ",{}]],"9":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"10":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"11":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"12":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"13":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"14":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"15":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"16":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"17":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"18":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"19":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"20":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"21":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"22":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"23":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"24":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"25":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"26":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"27":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"28":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"29":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"30":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"31":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"32":[["                                                                                                    ",{}]],"33":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]]}}],[0.100195,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        lw $t0, ($sp)                                                                               ",{}]],"1":[["        lw $t1, 4($sp)                                                                              ",{}]],"2":[["        lw $t2, 8($sp)                                                                              ",{}]],"3":[["        lw $t3, 12($sp)                                                                             ",{}]],"4":[["        lw $a0, 16($sp)                                                                             ",{}]],"5":[["        addi $sp, $sp, 20                                                                           ",{}]],"6":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"7":[["                                                                                                    ",{}]],"8":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"9":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"10":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"11":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"12":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"13":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"14":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"15":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"16":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"17":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"18":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"19":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"20":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"21":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"22":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"23":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"24":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"25":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"26":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"27":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"28":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"29":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"30":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"31":[["                                                                                                    ",{}]],"32":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"33":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101198,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        lw $t1, 4($sp)                                                                              ",{}]],"1":[["        lw $t2, 8($sp)                                                                              ",{}]],"2":[["        lw $t3, 12($sp)                                                                             ",{}]],"3":[["        lw $a0, 16($sp)                                                                             ",{}]],"4":[["        addi $sp, $sp, 20                                                                           ",{}]],"5":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"6":[["                                                                                                    ",{}]],"7":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"8":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"9":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"10":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"11":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"12":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"13":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"14":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"15":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"16":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"17":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"18":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"19":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"20":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"21":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"22":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"23":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"24":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"25":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"26":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"27":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"28":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"29":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"30":[["                                                                                                    ",{}]],"31":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"32":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"33":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100496,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.8e-05,{"lines":{"0":[["        lw $t2, 8($sp)                                                                              ",{}]],"1":[["        lw $t3, 12($sp)                                                                             ",{}]],"2":[["        lw $a0, 16($sp)                                                                             ",{}]],"3":[["        addi $sp, $sp, 20                                                                           ",{}]],"4":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"5":[["                                                                                                    ",{}]],"6":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"7":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"8":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"9":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"10":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"11":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"12":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"13":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"14":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"15":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"16":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"17":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"18":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"19":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"20":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"21":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"22":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"23":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"24":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"25":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"26":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"27":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"28":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"29":[["                                                                                                    ",{}]],"30":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"31":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"32":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"33":[["and ra in the heap.                                                                                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100966,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.500000000000001e-05,{"lines":{"0":[["        lw $t3, 12($sp)                                                                             ",{}]],"1":[["        lw $a0, 16($sp)                                                                             ",{}]],"2":[["        addi $sp, $sp, 20                                                                           ",{}]],"3":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"4":[["                                                                                                    ",{}]],"5":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"6":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"7":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"8":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"9":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"10":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"11":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"12":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"13":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"14":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"15":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"16":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"17":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"18":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"19":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"20":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"21":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"22":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"23":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"24":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"25":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"26":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"27":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"28":[["                                                                                                    ",{}]],"29":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"30":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"31":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"32":[["and ra in the heap.                                                                                 ",{}]],"33":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100855,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["        lw $a0, 16($sp)                                                                             ",{}]],"1":[["        addi $sp, $sp, 20                                                                           ",{}]],"2":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"3":[["                                                                                                    ",{}]],"4":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"5":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"6":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"7":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"8":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"9":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"10":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"11":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"12":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"13":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"14":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"15":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"16":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"17":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"18":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"19":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"20":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"21":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"22":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"23":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"24":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"25":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"26":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"27":[["                                                                                                    ",{}]],"28":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"29":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"30":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"31":[["and ra in the heap.                                                                                 ",{}]],"32":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"33":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100534,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["        addi $sp, $sp, 20                                                                           ",{}]],"1":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"2":[["                                                                                                    ",{}]],"3":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"4":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"5":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"6":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"7":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"8":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"9":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"10":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"11":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"12":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"13":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"14":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"15":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"16":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"17":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"18":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"19":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"20":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"21":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"22":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"23":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"24":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"25":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"26":[["                                                                                                    ",{}]],"27":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"28":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"29":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"30":[["and ra in the heap.                                                                                 ",{}]],"31":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"32":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"33":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.108655,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.3e-05,{"lines":{"0":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"1":[["                                                                                                    ",{}]],"2":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"3":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"4":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"5":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"6":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"7":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"8":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"9":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"10":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"11":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"12":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"13":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"14":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"15":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"16":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"17":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"18":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"19":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"20":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"21":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"22":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"23":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"24":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"25":[["                                                                                                    ",{}]],"26":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"27":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"28":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"29":[["and ra in the heap.                                                                                 ",{}]],"30":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"31":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"32":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"33":[["        sw $t0, ($sp)                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.093483,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"2":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"3":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"4":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"5":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"6":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"7":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"8":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"9":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"10":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"11":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"12":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"13":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"14":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"15":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"16":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"17":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"18":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"19":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"20":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"21":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"22":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"23":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"24":[["                                                                                                    ",{}]],"25":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"26":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"27":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"28":[["and ra in the heap.                                                                                 ",{}]],"29":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"30":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"31":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"32":[["        sw $t0, ($sp)                                                                               ",{}]],"33":[["        sw $t1, 4($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101047,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["f:                                                      #takes a0 as \"x\"                            ",{}]],"1":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"2":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"3":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"4":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"5":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"6":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"7":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"8":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"9":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"10":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"11":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"12":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"13":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"14":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"15":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"16":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"17":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"18":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"19":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"20":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"21":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"22":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"23":[["                                                                                                    ",{}]],"24":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"25":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"26":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"27":[["and ra in the heap.                                                                                 ",{}]],"28":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"29":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"30":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"31":[["        sw $t0, ($sp)                                                                               ",{}]],"32":[["        sw $t1, 4($sp)                                                                              ",{}]],"33":[["        sw $t2, 8($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100043,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.2e-05,{"lines":{"0":[["        add $s7, $zero, $ra             #copy ra into s7 so we can jump safely to swapendian        ",{}]],"1":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"2":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"3":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"4":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"5":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"6":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"7":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"8":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"9":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"10":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"11":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"12":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"13":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"14":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"15":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"16":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"17":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"18":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"19":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"20":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"21":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"22":[["                                                                                                    ",{}]],"23":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"24":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"25":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"26":[["and ra in the heap.                                                                                 ",{}]],"27":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"28":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"29":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"30":[["        sw $t0, ($sp)                                                                               ",{}]],"31":[["        sw $t1, 4($sp)                                                                              ",{}]],"32":[["        sw $t2, 8($sp)                                                                              ",{}]],"33":[["        sw $t3, 12($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100843,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        jal swapendian                  #swap byte order because we're in little endian on intel    ",{}]],"1":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"2":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"3":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"4":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"5":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"6":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"7":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"8":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"9":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"10":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"11":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"12":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"13":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"14":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"15":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"16":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"17":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"18":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"19":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"20":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"21":[["                                                                                                    ",{}]],"22":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"23":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"24":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"25":[["and ra in the heap.                                                                                 ",{}]],"26":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"27":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"28":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"29":[["        sw $t0, ($sp)                                                                               ",{}]],"30":[["        sw $t1, 4($sp)                                                                              ",{}]],"31":[["        sw $t2, 8($sp)                                                                              ",{}]],"32":[["        sw $t3, 12($sp)                                                                             ",{}]],"33":[["        sw $t4, 16($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100601,{"lines":{"0":[["        add $ra, $zero, $s7             #copy it back                                               ",{}]],"1":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"2":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"3":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"4":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"5":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"6":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"7":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"8":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"9":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"10":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"11":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"12":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"13":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"14":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"15":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"16":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"17":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"18":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"19":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"20":[["                                                                                                    ",{}]],"21":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"22":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"23":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"24":[["and ra in the heap.                                                                                 ",{}]],"25":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"26":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"27":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"28":[["        sw $t0, ($sp)                                                                               ",{}]],"29":[["        sw $t1, 4($sp)                                                                              ",{}]],"30":[["        sw $t2, 8($sp)                                                                              ",{}]],"31":[["        sw $t3, 12($sp)                                                                             ",{}]],"32":[["        sw $t4, 16($sp)                                                                             ",{}]],"33":[["        sw $t5, 20($sp)                                                                             ",{}]]}}],[0.100763,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        srl $t6, $a0, 24                #shift a0 right 24 bits, store in t6                        ",{}]],"1":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"2":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"3":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"4":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"5":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"6":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"7":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"8":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"9":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"10":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"11":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"12":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"13":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"14":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"15":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"16":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"17":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"18":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"19":[["                                                                                                    ",{}]],"20":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"21":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"22":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"23":[["and ra in the heap.                                                                                 ",{}]],"24":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"25":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"26":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"27":[["        sw $t0, ($sp)                                                                               ",{}]],"28":[["        sw $t1, 4($sp)                                                                              ",{}]],"29":[["        sw $t2, 8($sp)                                                                              ",{}]],"30":[["        sw $t3, 12($sp)                                                                             ",{}]],"31":[["        sw $t4, 16($sp)                                                                             ",{}]],"32":[["        sw $t5, 20($sp)                                                                             ",{}]],"33":[["        sw $t6, 24($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101135,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        srl $t7, $a0, 16                #shift a0 right 16 bits, store in t7                        ",{}]],"1":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"2":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"3":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"4":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"5":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"6":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"7":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"8":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"9":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"10":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"11":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"12":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"13":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"14":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"15":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"16":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"17":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"18":[["                                                                                                    ",{}]],"19":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"20":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"21":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"22":[["and ra in the heap.                                                                                 ",{}]],"23":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"24":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"25":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"26":[["        sw $t0, ($sp)                                                                               ",{}]],"27":[["        sw $t1, 4($sp)                                                                              ",{}]],"28":[["        sw $t2, 8($sp)                                                                              ",{}]],"29":[["        sw $t3, 12($sp)                                                                             ",{}]],"30":[["        sw $t4, 16($sp)                                                                             ",{}]],"31":[["        sw $t5, 20($sp)                                                                             ",{}]],"32":[["        sw $t6, 24($sp)                                                                             ",{}]],"33":[["        sw $t7, 28($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100393,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        srl $t8, $a0, 8                 #shift a0 right 8 bits, store in t8                         ",{}]],"1":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"2":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"3":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"4":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"5":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"6":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"7":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"8":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"9":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"10":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"11":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"12":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"13":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"14":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"15":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"16":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"17":[["                                                                                                    ",{}]],"18":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"19":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"20":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"21":[["and ra in the heap.                                                                                 ",{}]],"22":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"23":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"24":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"25":[["        sw $t0, ($sp)                                                                               ",{}]],"26":[["        sw $t1, 4($sp)                                                                              ",{}]],"27":[["        sw $t2, 8($sp)                                                                              ",{}]],"28":[["        sw $t3, 12($sp)                                                                             ",{}]],"29":[["        sw $t4, 16($sp)                                                                             ",{}]],"30":[["        sw $t5, 20($sp)                                                                             ",{}]],"31":[["        sw $t6, 24($sp)                                                                             ",{}]],"32":[["        sw $t7, 28($sp)                                                                             ",{}]],"33":[["        sw $t8, 32($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101027,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        addu $t9, $zero, $a0    #copy a0 into t9                                                    ",{}]],"1":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"2":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"3":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"4":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"5":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"6":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"7":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"8":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"9":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"10":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"11":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"12":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"13":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"14":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"15":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"16":[["                                                                                                    ",{}]],"17":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"18":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"19":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"20":[["and ra in the heap.                                                                                 ",{}]],"21":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"22":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"23":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"24":[["        sw $t0, ($sp)                                                                               ",{}]],"25":[["        sw $t1, 4($sp)                                                                              ",{}]],"26":[["        sw $t2, 8($sp)                                                                              ",{}]],"27":[["        sw $t3, 12($sp)                                                                             ",{}]],"28":[["        sw $t4, 16($sp)                                                                             ",{}]],"29":[["        sw $t5, 20($sp)                                                                             ",{}]],"30":[["        sw $t6, 24($sp)                                                                             ",{}]],"31":[["        sw $t7, 28($sp)                                                                             ",{}]],"32":[["        sw $t8, 32($sp)                                                                             ",{}]],"33":[["        sw $t9, 36($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101017,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["        andi $t7, $t7, 0xff             #and our 16-bit-shifted copy of s0 with 255                 ",{}]],"1":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"2":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"3":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"4":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"5":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"6":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"7":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"8":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"9":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"10":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"11":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"12":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"13":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"14":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"15":[["                                                                                                    ",{}]],"16":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"17":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"18":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"19":[["and ra in the heap.                                                                                 ",{}]],"20":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"21":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"22":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"23":[["        sw $t0, ($sp)                                                                               ",{}]],"24":[["        sw $t1, 4($sp)                                                                              ",{}]],"25":[["        sw $t2, 8($sp)                                                                              ",{}]],"26":[["        sw $t3, 12($sp)                                                                             ",{}]],"27":[["        sw $t4, 16($sp)                                                                             ",{}]],"28":[["        sw $t5, 20($sp)                                                                             ",{}]],"29":[["        sw $t6, 24($sp)                                                                             ",{}]],"30":[["        sw $t7, 28($sp)                                                                             ",{}]],"31":[["        sw $t8, 32($sp)                                                                             ",{}]],"32":[["        sw $t9, 36($sp)                                                                             ",{}]],"33":[["        sw $s0, 40($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100252,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        andi $t8, $t8, 0xff             #again, for 8-bit                                           ",{}]],"1":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"2":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"3":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"4":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"5":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"6":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"7":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"8":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"9":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"10":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"11":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"12":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"13":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"14":[["                                                                                                    ",{}]],"15":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"16":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"17":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"18":[["and ra in the heap.                                                                                 ",{}]],"19":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"20":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"21":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"22":[["        sw $t0, ($sp)                                                                               ",{}]],"23":[["        sw $t1, 4($sp)                                                                              ",{}]],"24":[["        sw $t2, 8($sp)                                                                              ",{}]],"25":[["        sw $t3, 12($sp)                                                                             ",{}]],"26":[["        sw $t4, 16($sp)                                                                             ",{}]],"27":[["        sw $t5, 20($sp)                                                                             ",{}]],"28":[["        sw $t6, 24($sp)                                                                             ",{}]],"29":[["        sw $t7, 28($sp)                                                                             ",{}]],"30":[["        sw $t8, 32($sp)                                                                             ",{}]],"31":[["        sw $t9, 36($sp)                                                                             ",{}]],"32":[["        sw $s0, 40($sp)                                                                             ",{}]],"33":[["        sw $s1, 44($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101084,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        andi $t9, $t9, 0xff             #again, for the non-shifted one                             ",{}]],"1":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"2":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"3":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"4":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"5":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"6":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"7":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"8":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"9":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"10":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"11":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"12":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"13":[["                                                                                                    ",{}]],"14":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"15":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"16":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"17":[["and ra in the heap.                                                                                 ",{}]],"18":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"19":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"20":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"21":[["        sw $t0, ($sp)                                                                               ",{}]],"22":[["        sw $t1, 4($sp)                                                                              ",{}]],"23":[["        sw $t2, 8($sp)                                                                              ",{}]],"24":[["        sw $t3, 12($sp)                                                                             ",{}]],"25":[["        sw $t4, 16($sp)                                                                             ",{}]],"26":[["        sw $t5, 20($sp)                                                                             ",{}]],"27":[["        sw $t6, 24($sp)                                                                             ",{}]],"28":[["        sw $t7, 28($sp)                                                                             ",{}]],"29":[["        sw $t8, 32($sp)                                                                             ",{}]],"30":[["        sw $t9, 36($sp)                                                                             ",{}]],"31":[["        sw $s0, 40($sp)                                                                             ",{}]],"32":[["        sw $s1, 44($sp)                                                                             ",{}]],"33":[["        sw $s2, 48($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100087,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        sll $t6, $t6, 2                 #shift t6 left 2 for use as an array index                  ",{}]],"1":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"2":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"3":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"4":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"5":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"6":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"7":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"8":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"9":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"10":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"11":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"12":[["                                                                                                    ",{}]],"13":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"14":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"15":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"16":[["and ra in the heap.                                                                                 ",{}]],"17":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"18":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"19":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"20":[["        sw $t0, ($sp)                                                                               ",{}]],"21":[["        sw $t1, 4($sp)                                                                              ",{}]],"22":[["        sw $t2, 8($sp)                                                                              ",{}]],"23":[["        sw $t3, 12($sp)                                                                             ",{}]],"24":[["        sw $t4, 16($sp)                                                                             ",{}]],"25":[["        sw $t5, 20($sp)                                                                             ",{}]],"26":[["        sw $t6, 24($sp)                                                                             ",{}]],"27":[["        sw $t7, 28($sp)                                                                             ",{}]],"28":[["        sw $t8, 32($sp)                                                                             ",{}]],"29":[["        sw $t9, 36($sp)                                                                             ",{}]],"30":[["        sw $s0, 40($sp)                                                                             ",{}]],"31":[["        sw $s1, 44($sp)                                                                             ",{}]],"32":[["        sw $s2, 48($sp)                                                                             ",{}]],"33":[["        sw $s3, 52($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100622,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5e-05,{"lines":{"0":[["        sll $t7, $t7, 2                 #same for t7                                                ",{}]],"1":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"2":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"3":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"4":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"5":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"6":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"7":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"8":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"9":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"10":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"11":[["                                                                                                    ",{}]],"12":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"13":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"14":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"15":[["and ra in the heap.                                                                                 ",{}]],"16":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"17":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"18":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"19":[["        sw $t0, ($sp)                                                                               ",{}]],"20":[["        sw $t1, 4($sp)                                                                              ",{}]],"21":[["        sw $t2, 8($sp)                                                                              ",{}]],"22":[["        sw $t3, 12($sp)                                                                             ",{}]],"23":[["        sw $t4, 16($sp)                                                                             ",{}]],"24":[["        sw $t5, 20($sp)                                                                             ",{}]],"25":[["        sw $t6, 24($sp)                                                                             ",{}]],"26":[["        sw $t7, 28($sp)                                                                             ",{}]],"27":[["        sw $t8, 32($sp)                                                                             ",{}]],"28":[["        sw $t9, 36($sp)                                                                             ",{}]],"29":[["        sw $s0, 40($sp)                                                                             ",{}]],"30":[["        sw $s1, 44($sp)                                                                             ",{}]],"31":[["        sw $s2, 48($sp)                                                                             ",{}]],"32":[["        sw $s3, 52($sp)                                                                             ",{}]],"33":[["        sw $s5, 56($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100606,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.7e-05,{"lines":{"0":[["        sll $t8, $t8, 2                 #same for t8                                                ",{}]],"1":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"2":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"3":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"4":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"5":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"6":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"7":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"8":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"9":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"10":[["                                                                                                    ",{}]],"11":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"12":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"13":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"14":[["and ra in the heap.                                                                                 ",{}]],"15":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"16":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"17":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"18":[["        sw $t0, ($sp)                                                                               ",{}]],"19":[["        sw $t1, 4($sp)                                                                              ",{}]],"20":[["        sw $t2, 8($sp)                                                                              ",{}]],"21":[["        sw $t3, 12($sp)                                                                             ",{}]],"22":[["        sw $t4, 16($sp)                                                                             ",{}]],"23":[["        sw $t5, 20($sp)                                                                             ",{}]],"24":[["        sw $t6, 24($sp)                                                                             ",{}]],"25":[["        sw $t7, 28($sp)                                                                             ",{}]],"26":[["        sw $t8, 32($sp)                                                                             ",{}]],"27":[["        sw $t9, 36($sp)                                                                             ",{}]],"28":[["        sw $s0, 40($sp)                                                                             ",{}]],"29":[["        sw $s1, 44($sp)                                                                             ",{}]],"30":[["        sw $s2, 48($sp)                                                                             ",{}]],"31":[["        sw $s3, 52($sp)                                                                             ",{}]],"32":[["        sw $s5, 56($sp)                                                                             ",{}]],"33":[["        sw $s6, 60($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101173,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        sll $t9, $t9, 2                 #same for t9                                                ",{}]],"1":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"2":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"3":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"4":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"5":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"6":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"7":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"8":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"9":[["                                                                                                    ",{}]],"10":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"11":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"12":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"13":[["and ra in the heap.                                                                                 ",{}]],"14":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"15":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"16":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"17":[["        sw $t0, ($sp)                                                                               ",{}]],"18":[["        sw $t1, 4($sp)                                                                              ",{}]],"19":[["        sw $t2, 8($sp)                                                                              ",{}]],"20":[["        sw $t3, 12($sp)                                                                             ",{}]],"21":[["        sw $t4, 16($sp)                                                                             ",{}]],"22":[["        sw $t5, 20($sp)                                                                             ",{}]],"23":[["        sw $t6, 24($sp)                                                                             ",{}]],"24":[["        sw $t7, 28($sp)                                                                             ",{}]],"25":[["        sw $t8, 32($sp)                                                                             ",{}]],"26":[["        sw $t9, 36($sp)                                                                             ",{}]],"27":[["        sw $s0, 40($sp)                                                                             ",{}]],"28":[["        sw $s1, 44($sp)                                                                             ",{}]],"29":[["        sw $s2, 48($sp)                                                                             ",{}]],"30":[["        sw $s3, 52($sp)                                                                             ",{}]],"31":[["        sw $s5, 56($sp)                                                                             ",{}]],"32":[["        sw $s6, 60($sp)                                                                             ",{}]],"33":[["        sw $s7, 64($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100938,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["        lw $t6, slistone($t6)   #load the element of slistone at t6 into t6                         ",{}]],"1":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"2":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"3":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"4":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"5":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"6":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"7":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"8":[["                                                                                                    ",{}]],"9":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"10":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"11":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"12":[["and ra in the heap.                                                                                 ",{}]],"13":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"14":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"15":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"16":[["        sw $t0, ($sp)                                                                               ",{}]],"17":[["        sw $t1, 4($sp)                                                                              ",{}]],"18":[["        sw $t2, 8($sp)                                                                              ",{}]],"19":[["        sw $t3, 12($sp)                                                                             ",{}]],"20":[["        sw $t4, 16($sp)                                                                             ",{}]],"21":[["        sw $t5, 20($sp)                                                                             ",{}]],"22":[["        sw $t6, 24($sp)                                                                             ",{}]],"23":[["        sw $t7, 28($sp)                                                                             ",{}]],"24":[["        sw $t8, 32($sp)                                                                             ",{}]],"25":[["        sw $t9, 36($sp)                                                                             ",{}]],"26":[["        sw $s0, 40($sp)                                                                             ",{}]],"27":[["        sw $s1, 44($sp)                                                                             ",{}]],"28":[["        sw $s2, 48($sp)                                                                             ",{}]],"29":[["        sw $s3, 52($sp)                                                                             ",{}]],"30":[["        sw $s5, 56($sp)                                                                             ",{}]],"31":[["        sw $s6, 60($sp)                                                                             ",{}]],"32":[["        sw $s7, 64($sp)                                                                             ",{}]],"33":[["        sw $ra, 68($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100253,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        lw $t7, slisttwo($t7)   #same, for slisttwo and t7                                          ",{}]],"1":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"2":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"3":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"4":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"5":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"6":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"7":[["                                                                                                    ",{}]],"8":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"9":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"10":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"11":[["and ra in the heap.                                                                                 ",{}]],"12":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"13":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"14":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"15":[["        sw $t0, ($sp)                                                                               ",{}]],"16":[["        sw $t1, 4($sp)                                                                              ",{}]],"17":[["        sw $t2, 8($sp)                                                                              ",{}]],"18":[["        sw $t3, 12($sp)                                                                             ",{}]],"19":[["        sw $t4, 16($sp)                                                                             ",{}]],"20":[["        sw $t5, 20($sp)                                                                             ",{}]],"21":[["        sw $t6, 24($sp)                                                                             ",{}]],"22":[["        sw $t7, 28($sp)                                                                             ",{}]],"23":[["        sw $t8, 32($sp)                                                                             ",{}]],"24":[["        sw $t9, 36($sp)                                                                             ",{}]],"25":[["        sw $s0, 40($sp)                                                                             ",{}]],"26":[["        sw $s1, 44($sp)                                                                             ",{}]],"27":[["        sw $s2, 48($sp)                                                                             ",{}]],"28":[["        sw $s3, 52($sp)                                                                             ",{}]],"29":[["        sw $s5, 56($sp)                                                                             ",{}]],"30":[["        sw $s6, 60($sp)                                                                             ",{}]],"31":[["        sw $s7, 64($sp)                                                                             ",{}]],"32":[["        sw $ra, 68($sp)                                                                             ",{}]],"33":[["        #done storing                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100137,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.2e-05,{"lines":{"0":[["        lw $t8, slistthree($t8) #same, for slistthree and t8                                        ",{}]],"1":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"2":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"3":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"4":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"5":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"6":[["                                                                                                    ",{}]],"7":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"8":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"9":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"10":[["and ra in the heap.                                                                                 ",{}]],"11":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"12":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"13":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"14":[["        sw $t0, ($sp)                                                                               ",{}]],"15":[["        sw $t1, 4($sp)                                                                              ",{}]],"16":[["        sw $t2, 8($sp)                                                                              ",{}]],"17":[["        sw $t3, 12($sp)                                                                             ",{}]],"18":[["        sw $t4, 16($sp)                                                                             ",{}]],"19":[["        sw $t5, 20($sp)                                                                             ",{}]],"20":[["        sw $t6, 24($sp)                                                                             ",{}]],"21":[["        sw $t7, 28($sp)                                                                             ",{}]],"22":[["        sw $t8, 32($sp)                                                                             ",{}]],"23":[["        sw $t9, 36($sp)                                                                             ",{}]],"24":[["        sw $s0, 40($sp)                                                                             ",{}]],"25":[["        sw $s1, 44($sp)                                                                             ",{}]],"26":[["        sw $s2, 48($sp)                                                                             ",{}]],"27":[["        sw $s3, 52($sp)                                                                             ",{}]],"28":[["        sw $s5, 56($sp)                                                                             ",{}]],"29":[["        sw $s6, 60($sp)                                                                             ",{}]],"30":[["        sw $s7, 64($sp)                                                                             ",{}]],"31":[["        sw $ra, 68($sp)                                                                             ",{}]],"32":[["        #done storing                                                                               ",{}]],"33":[["        li $t0, 0                               #loop variable                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099998,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.6e-05,{"lines":{"0":[["        lw $t9, slistfour($t9)  #same, for slistfour and t9                                         ",{}]],"1":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"2":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"3":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"4":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"5":[["                                                                                                    ",{}]],"6":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"7":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"8":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"9":[["and ra in the heap.                                                                                 ",{}]],"10":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"11":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"12":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"13":[["        sw $t0, ($sp)                                                                               ",{}]],"14":[["        sw $t1, 4($sp)                                                                              ",{}]],"15":[["        sw $t2, 8($sp)                                                                              ",{}]],"16":[["        sw $t3, 12($sp)                                                                             ",{}]],"17":[["        sw $t4, 16($sp)                                                                             ",{}]],"18":[["        sw $t5, 20($sp)                                                                             ",{}]],"19":[["        sw $t6, 24($sp)                                                                             ",{}]],"20":[["        sw $t7, 28($sp)                                                                             ",{}]],"21":[["        sw $t8, 32($sp)                                                                             ",{}]],"22":[["        sw $t9, 36($sp)                                                                             ",{}]],"23":[["        sw $s0, 40($sp)                                                                             ",{}]],"24":[["        sw $s1, 44($sp)                                                                             ",{}]],"25":[["        sw $s2, 48($sp)                                                                             ",{}]],"26":[["        sw $s3, 52($sp)                                                                             ",{}]],"27":[["        sw $s5, 56($sp)                                                                             ",{}]],"28":[["        sw $s6, 60($sp)                                                                             ",{}]],"29":[["        sw $s7, 64($sp)                                                                             ",{}]],"30":[["        sw $ra, 68($sp)                                                                             ",{}]],"31":[["        #done storing                                                                               ",{}]],"32":[["        li $t0, 0                               #loop variable                                      ",{}]],"33":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100224,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        addu $t6, $t6, $t7              #add t6 to t7 and store in t6                               ",{}]],"1":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"2":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"3":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"4":[["                                                                                                    ",{}]],"5":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"6":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"7":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"8":[["and ra in the heap.                                                                                 ",{}]],"9":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"10":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"11":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"12":[["        sw $t0, ($sp)                                                                               ",{}]],"13":[["        sw $t1, 4($sp)                                                                              ",{}]],"14":[["        sw $t2, 8($sp)                                                                              ",{}]],"15":[["        sw $t3, 12($sp)                                                                             ",{}]],"16":[["        sw $t4, 16($sp)                                                                             ",{}]],"17":[["        sw $t5, 20($sp)                                                                             ",{}]],"18":[["        sw $t6, 24($sp)                                                                             ",{}]],"19":[["        sw $t7, 28($sp)                                                                             ",{}]],"20":[["        sw $t8, 32($sp)                                                                             ",{}]],"21":[["        sw $t9, 36($sp)                                                                             ",{}]],"22":[["        sw $s0, 40($sp)                                                                             ",{}]],"23":[["        sw $s1, 44($sp)                                                                             ",{}]],"24":[["        sw $s2, 48($sp)                                                                             ",{}]],"25":[["        sw $s3, 52($sp)                                                                             ",{}]],"26":[["        sw $s5, 56($sp)                                                                             ",{}]],"27":[["        sw $s6, 60($sp)                                                                             ",{}]],"28":[["        sw $s7, 64($sp)                                                                             ",{}]],"29":[["        sw $ra, 68($sp)                                                                             ",{}]],"30":[["        #done storing                                                                               ",{}]],"31":[["        li $t0, 0                               #loop variable                                      ",{}]],"32":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"33":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100029,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.2e-05,{"lines":{"0":[["        xor $t6, $t6, $t8               #xor with t8                                                ",{}]],"1":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"2":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"3":[["                                                                                                    ",{}]],"4":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"5":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"6":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"7":[["and ra in the heap.                                                                                 ",{}]],"8":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"9":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"10":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"11":[["        sw $t0, ($sp)                                                                               ",{}]],"12":[["        sw $t1, 4($sp)                                                                              ",{}]],"13":[["        sw $t2, 8($sp)                                                                              ",{}]],"14":[["        sw $t3, 12($sp)                                                                             ",{}]],"15":[["        sw $t4, 16($sp)                                                                             ",{}]],"16":[["        sw $t5, 20($sp)                                                                             ",{}]],"17":[["        sw $t6, 24($sp)                                                                             ",{}]],"18":[["        sw $t7, 28($sp)                                                                             ",{}]],"19":[["        sw $t8, 32($sp)                                                                             ",{}]],"20":[["        sw $t9, 36($sp)                                                                             ",{}]],"21":[["        sw $s0, 40($sp)                                                                             ",{}]],"22":[["        sw $s1, 44($sp)                                                                             ",{}]],"23":[["        sw $s2, 48($sp)                                                                             ",{}]],"24":[["        sw $s3, 52($sp)                                                                             ",{}]],"25":[["        sw $s5, 56($sp)                                                                             ",{}]],"26":[["        sw $s6, 60($sp)                                                                             ",{}]],"27":[["        sw $s7, 64($sp)                                                                             ",{}]],"28":[["        sw $ra, 68($sp)                                                                             ",{}]],"29":[["        #done storing                                                                               ",{}]],"30":[["        li $t0, 0                               #loop variable                                      ",{}]],"31":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"32":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"33":[["denloop:                                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101173,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        addu $v1, $t6, $t9              #add to t9 and store in v1 for output                       ",{}]],"1":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"2":[["                                                                                                    ",{}]],"3":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"4":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"5":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"6":[["and ra in the heap.                                                                                 ",{}]],"7":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"8":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"9":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"10":[["        sw $t0, ($sp)                                                                               ",{}]],"11":[["        sw $t1, 4($sp)                                                                              ",{}]],"12":[["        sw $t2, 8($sp)                                                                              ",{}]],"13":[["        sw $t3, 12($sp)                                                                             ",{}]],"14":[["        sw $t4, 16($sp)                                                                             ",{}]],"15":[["        sw $t5, 20($sp)                                                                             ",{}]],"16":[["        sw $t6, 24($sp)                                                                             ",{}]],"17":[["        sw $t7, 28($sp)                                                                             ",{}]],"18":[["        sw $t8, 32($sp)                                                                             ",{}]],"19":[["        sw $t9, 36($sp)                                                                             ",{}]],"20":[["        sw $s0, 40($sp)                                                                             ",{}]],"21":[["        sw $s1, 44($sp)                                                                             ",{}]],"22":[["        sw $s2, 48($sp)                                                                             ",{}]],"23":[["        sw $s3, 52($sp)                                                                             ",{}]],"24":[["        sw $s5, 56($sp)                                                                             ",{}]],"25":[["        sw $s6, 60($sp)                                                                             ",{}]],"26":[["        sw $s7, 64($sp)                                                                             ",{}]],"27":[["        sw $ra, 68($sp)                                                                             ",{}]],"28":[["        #done storing                                                                               ",{}]],"29":[["        li $t0, 0                               #loop variable                                      ",{}]],"30":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"31":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"32":[["denloop:                                                                                            ",{}]],"33":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100419,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["        jr $ra                                  #jump back to where we came here from.              ",{}]],"1":[["                                                                                                    ",{}]],"2":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"3":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"4":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"5":[["and ra in the heap.                                                                                 ",{}]],"6":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"7":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"8":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"9":[["        sw $t0, ($sp)                                                                               ",{}]],"10":[["        sw $t1, 4($sp)                                                                              ",{}]],"11":[["        sw $t2, 8($sp)                                                                              ",{}]],"12":[["        sw $t3, 12($sp)                                                                             ",{}]],"13":[["        sw $t4, 16($sp)                                                                             ",{}]],"14":[["        sw $t5, 20($sp)                                                                             ",{}]],"15":[["        sw $t6, 24($sp)                                                                             ",{}]],"16":[["        sw $t7, 28($sp)                                                                             ",{}]],"17":[["        sw $t8, 32($sp)                                                                             ",{}]],"18":[["        sw $t9, 36($sp)                                                                             ",{}]],"19":[["        sw $s0, 40($sp)                                                                             ",{}]],"20":[["        sw $s1, 44($sp)                                                                             ",{}]],"21":[["        sw $s2, 48($sp)                                                                             ",{}]],"22":[["        sw $s3, 52($sp)                                                                             ",{}]],"23":[["        sw $s5, 56($sp)                                                                             ",{}]],"24":[["        sw $s6, 60($sp)                                                                             ",{}]],"25":[["        sw $s7, 64($sp)                                                                             ",{}]],"26":[["        sw $ra, 68($sp)                                                                             ",{}]],"27":[["        #done storing                                                                               ",{}]],"28":[["        li $t0, 0                               #loop variable                                      ",{}]],"29":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"30":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"31":[["denloop:                                                                                            ",{}]],"32":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"33":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100134,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.100000000000001e-05,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"2":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"3":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"4":[["and ra in the heap.                                                                                 ",{}]],"5":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"6":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"7":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"8":[["        sw $t0, ($sp)                                                                               ",{}]],"9":[["        sw $t1, 4($sp)                                                                              ",{}]],"10":[["        sw $t2, 8($sp)                                                                              ",{}]],"11":[["        sw $t3, 12($sp)                                                                             ",{}]],"12":[["        sw $t4, 16($sp)                                                                             ",{}]],"13":[["        sw $t5, 20($sp)                                                                             ",{}]],"14":[["        sw $t6, 24($sp)                                                                             ",{}]],"15":[["        sw $t7, 28($sp)                                                                             ",{}]],"16":[["        sw $t8, 32($sp)                                                                             ",{}]],"17":[["        sw $t9, 36($sp)                                                                             ",{}]],"18":[["        sw $s0, 40($sp)                                                                             ",{}]],"19":[["        sw $s1, 44($sp)                                                                             ",{}]],"20":[["        sw $s2, 48($sp)                                                                             ",{}]],"21":[["        sw $s3, 52($sp)                                                                             ",{}]],"22":[["        sw $s5, 56($sp)                                                                             ",{}]],"23":[["        sw $s6, 60($sp)                                                                             ",{}]],"24":[["        sw $s7, 64($sp)                                                                             ",{}]],"25":[["        sw $ra, 68($sp)                                                                             ",{}]],"26":[["        #done storing                                                                               ",{}]],"27":[["        li $t0, 0                               #loop variable                                      ",{}]],"28":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"29":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"30":[["denloop:                                                                                            ",{}]],"31":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"32":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"33":[["4) for addressing the plain/ciphertext                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100754,{"lines":{"0":[["dencrypt:                                       #takes a0 as both the source and destination(we put ",{}]],"1":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"2":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"3":[["and ra in the heap.                                                                                 ",{}]],"4":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"5":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"6":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"7":[["        sw $t0, ($sp)                                                                               ",{}]],"8":[["        sw $t1, 4($sp)                                                                              ",{}]],"9":[["        sw $t2, 8($sp)                                                                              ",{}]],"10":[["        sw $t3, 12($sp)                                                                             ",{}]],"11":[["        sw $t4, 16($sp)                                                                             ",{}]],"12":[["        sw $t5, 20($sp)                                                                             ",{}]],"13":[["        sw $t6, 24($sp)                                                                             ",{}]],"14":[["        sw $t7, 28($sp)                                                                             ",{}]],"15":[["        sw $t8, 32($sp)                                                                             ",{}]],"16":[["        sw $t9, 36($sp)                                                                             ",{}]],"17":[["        sw $s0, 40($sp)                                                                             ",{}]],"18":[["        sw $s1, 44($sp)                                                                             ",{}]],"19":[["        sw $s2, 48($sp)                                                                             ",{}]],"20":[["        sw $s3, 52($sp)                                                                             ",{}]],"21":[["        sw $s5, 56($sp)                                                                             ",{}]],"22":[["        sw $s6, 60($sp)                                                                             ",{}]],"23":[["        sw $s7, 64($sp)                                                                             ",{}]],"24":[["        sw $ra, 68($sp)                                                                             ",{}]],"25":[["        #done storing                                                                               ",{}]],"26":[["        li $t0, 0                               #loop variable                                      ",{}]],"27":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"28":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"29":[["denloop:                                                                                            ",{}]],"30":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"31":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"32":[["4) for addressing the plain/ciphertext                                                              ",{}]],"33":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]]}}],[0.100079,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["it where we got it), and takes a1 as the length in bytes of the data(after padding)                 ",{}]],"1":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"2":[["and ra in the heap.                                                                                 ",{}]],"3":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"4":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"5":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"6":[["        sw $t0, ($sp)                                                                               ",{}]],"7":[["        sw $t1, 4($sp)                                                                              ",{}]],"8":[["        sw $t2, 8($sp)                                                                              ",{}]],"9":[["        sw $t3, 12($sp)                                                                             ",{}]],"10":[["        sw $t4, 16($sp)                                                                             ",{}]],"11":[["        sw $t5, 20($sp)                                                                             ",{}]],"12":[["        sw $t6, 24($sp)                                                                             ",{}]],"13":[["        sw $t7, 28($sp)                                                                             ",{}]],"14":[["        sw $t8, 32($sp)                                                                             ",{}]],"15":[["        sw $t9, 36($sp)                                                                             ",{}]],"16":[["        sw $s0, 40($sp)                                                                             ",{}]],"17":[["        sw $s1, 44($sp)                                                                             ",{}]],"18":[["        sw $s2, 48($sp)                                                                             ",{}]],"19":[["        sw $s3, 52($sp)                                                                             ",{}]],"20":[["        sw $s5, 56($sp)                                                                             ",{}]],"21":[["        sw $s6, 60($sp)                                                                             ",{}]],"22":[["        sw $s7, 64($sp)                                                                             ",{}]],"23":[["        sw $ra, 68($sp)                                                                             ",{}]],"24":[["        #done storing                                                                               ",{}]],"25":[["        li $t0, 0                               #loop variable                                      ",{}]],"26":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"27":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"28":[["denloop:                                                                                            ",{}]],"29":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"30":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"31":[["4) for addressing the plain/ciphertext                                                              ",{}]],"32":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"33":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10033,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        #For sake of ease, we're going to store the values of all t and s registers, other than s4, ",{}]],"1":[["and ra in the heap.                                                                                 ",{}]],"2":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"3":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"4":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"5":[["        sw $t0, ($sp)                                                                               ",{}]],"6":[["        sw $t1, 4($sp)                                                                              ",{}]],"7":[["        sw $t2, 8($sp)                                                                              ",{}]],"8":[["        sw $t3, 12($sp)                                                                             ",{}]],"9":[["        sw $t4, 16($sp)                                                                             ",{}]],"10":[["        sw $t5, 20($sp)                                                                             ",{}]],"11":[["        sw $t6, 24($sp)                                                                             ",{}]],"12":[["        sw $t7, 28($sp)                                                                             ",{}]],"13":[["        sw $t8, 32($sp)                                                                             ",{}]],"14":[["        sw $t9, 36($sp)                                                                             ",{}]],"15":[["        sw $s0, 40($sp)                                                                             ",{}]],"16":[["        sw $s1, 44($sp)                                                                             ",{}]],"17":[["        sw $s2, 48($sp)                                                                             ",{}]],"18":[["        sw $s3, 52($sp)                                                                             ",{}]],"19":[["        sw $s5, 56($sp)                                                                             ",{}]],"20":[["        sw $s6, 60($sp)                                                                             ",{}]],"21":[["        sw $s7, 64($sp)                                                                             ",{}]],"22":[["        sw $ra, 68($sp)                                                                             ",{}]],"23":[["        #done storing                                                                               ",{}]],"24":[["        li $t0, 0                               #loop variable                                      ",{}]],"25":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"26":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"27":[["denloop:                                                                                            ",{}]],"28":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"29":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"30":[["4) for addressing the plain/ciphertext                                                              ",{}]],"31":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"32":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"33":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099617,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["and ra in the heap.                                                                                 ",{}]],"1":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"2":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"3":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"4":[["        sw $t0, ($sp)                                                                               ",{}]],"5":[["        sw $t1, 4($sp)                                                                              ",{}]],"6":[["        sw $t2, 8($sp)                                                                              ",{}]],"7":[["        sw $t3, 12($sp)                                                                             ",{}]],"8":[["        sw $t4, 16($sp)                                                                             ",{}]],"9":[["        sw $t5, 20($sp)                                                                             ",{}]],"10":[["        sw $t6, 24($sp)                                                                             ",{}]],"11":[["        sw $t7, 28($sp)                                                                             ",{}]],"12":[["        sw $t8, 32($sp)                                                                             ",{}]],"13":[["        sw $t9, 36($sp)                                                                             ",{}]],"14":[["        sw $s0, 40($sp)                                                                             ",{}]],"15":[["        sw $s1, 44($sp)                                                                             ",{}]],"16":[["        sw $s2, 48($sp)                                                                             ",{}]],"17":[["        sw $s3, 52($sp)                                                                             ",{}]],"18":[["        sw $s5, 56($sp)                                                                             ",{}]],"19":[["        sw $s6, 60($sp)                                                                             ",{}]],"20":[["        sw $s7, 64($sp)                                                                             ",{}]],"21":[["        sw $ra, 68($sp)                                                                             ",{}]],"22":[["        #done storing                                                                               ",{}]],"23":[["        li $t0, 0                               #loop variable                                      ",{}]],"24":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"25":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"26":[["denloop:                                                                                            ",{}]],"27":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"28":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"29":[["4) for addressing the plain/ciphertext                                                              ",{}]],"30":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"31":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"32":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"33":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10014,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        #First though, it'll be used to backup a0 for allocating said memory.                       ",{}]],"1":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"2":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"3":[["        sw $t0, ($sp)                                                                               ",{}]],"4":[["        sw $t1, 4($sp)                                                                              ",{}]],"5":[["        sw $t2, 8($sp)                                                                              ",{}]],"6":[["        sw $t3, 12($sp)                                                                             ",{}]],"7":[["        sw $t4, 16($sp)                                                                             ",{}]],"8":[["        sw $t5, 20($sp)                                                                             ",{}]],"9":[["        sw $t6, 24($sp)                                                                             ",{}]],"10":[["        sw $t7, 28($sp)                                                                             ",{}]],"11":[["        sw $t8, 32($sp)                                                                             ",{}]],"12":[["        sw $t9, 36($sp)                                                                             ",{}]],"13":[["        sw $s0, 40($sp)                                                                             ",{}]],"14":[["        sw $s1, 44($sp)                                                                             ",{}]],"15":[["        sw $s2, 48($sp)                                                                             ",{}]],"16":[["        sw $s3, 52($sp)                                                                             ",{}]],"17":[["        sw $s5, 56($sp)                                                                             ",{}]],"18":[["        sw $s6, 60($sp)                                                                             ",{}]],"19":[["        sw $s7, 64($sp)                                                                             ",{}]],"20":[["        sw $ra, 68($sp)                                                                             ",{}]],"21":[["        #done storing                                                                               ",{}]],"22":[["        li $t0, 0                               #loop variable                                      ",{}]],"23":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"24":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"25":[["denloop:                                                                                            ",{}]],"26":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"27":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"28":[["4) for addressing the plain/ciphertext                                                              ",{}]],"29":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"30":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"31":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"32":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"33":[["                li $t3, 1                               #for behavior checking                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100721,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.8e-05,{"lines":{"0":[["        #Yes, we understand what we're doing here. Scoping in assembly is the best feature.         ",{}]],"1":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"2":[["        sw $t0, ($sp)                                                                               ",{}]],"3":[["        sw $t1, 4($sp)                                                                              ",{}]],"4":[["        sw $t2, 8($sp)                                                                              ",{}]],"5":[["        sw $t3, 12($sp)                                                                             ",{}]],"6":[["        sw $t4, 16($sp)                                                                             ",{}]],"7":[["        sw $t5, 20($sp)                                                                             ",{}]],"8":[["        sw $t6, 24($sp)                                                                             ",{}]],"9":[["        sw $t7, 28($sp)                                                                             ",{}]],"10":[["        sw $t8, 32($sp)                                                                             ",{}]],"11":[["        sw $t9, 36($sp)                                                                             ",{}]],"12":[["        sw $s0, 40($sp)                                                                             ",{}]],"13":[["        sw $s1, 44($sp)                                                                             ",{}]],"14":[["        sw $s2, 48($sp)                                                                             ",{}]],"15":[["        sw $s3, 52($sp)                                                                             ",{}]],"16":[["        sw $s5, 56($sp)                                                                             ",{}]],"17":[["        sw $s6, 60($sp)                                                                             ",{}]],"18":[["        sw $s7, 64($sp)                                                                             ",{}]],"19":[["        sw $ra, 68($sp)                                                                             ",{}]],"20":[["        #done storing                                                                               ",{}]],"21":[["        li $t0, 0                               #loop variable                                      ",{}]],"22":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"23":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"24":[["denloop:                                                                                            ",{}]],"25":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"26":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"27":[["4) for addressing the plain/ciphertext                                                              ",{}]],"28":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"29":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"30":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"31":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"32":[["                li $t3, 1                               #for behavior checking                      ",{}]],"33":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10009,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.7e-05,{"lines":{"0":[["        addi $sp, $sp, -92                              #92 bytes for all registers we plan to store",{}]],"1":[["        sw $t0, ($sp)                                                                               ",{}]],"2":[["        sw $t1, 4($sp)                                                                              ",{}]],"3":[["        sw $t2, 8($sp)                                                                              ",{}]],"4":[["        sw $t3, 12($sp)                                                                             ",{}]],"5":[["        sw $t4, 16($sp)                                                                             ",{}]],"6":[["        sw $t5, 20($sp)                                                                             ",{}]],"7":[["        sw $t6, 24($sp)                                                                             ",{}]],"8":[["        sw $t7, 28($sp)                                                                             ",{}]],"9":[["        sw $t8, 32($sp)                                                                             ",{}]],"10":[["        sw $t9, 36($sp)                                                                             ",{}]],"11":[["        sw $s0, 40($sp)                                                                             ",{}]],"12":[["        sw $s1, 44($sp)                                                                             ",{}]],"13":[["        sw $s2, 48($sp)                                                                             ",{}]],"14":[["        sw $s3, 52($sp)                                                                             ",{}]],"15":[["        sw $s5, 56($sp)                                                                             ",{}]],"16":[["        sw $s6, 60($sp)                                                                             ",{}]],"17":[["        sw $s7, 64($sp)                                                                             ",{}]],"18":[["        sw $ra, 68($sp)                                                                             ",{}]],"19":[["        #done storing                                                                               ",{}]],"20":[["        li $t0, 0                               #loop variable                                      ",{}]],"21":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"22":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"23":[["denloop:                                                                                            ",{}]],"24":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"25":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"26":[["4) for addressing the plain/ciphertext                                                              ",{}]],"27":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"28":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"29":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"30":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"31":[["                li $t3, 1                               #for behavior checking                      ",{}]],"32":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"33":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100313,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[3.6e-05,{"lines":{"0":[["        sw $t0, ($sp)                                                                               ",{}]],"1":[["        sw $t1, 4($sp)                                                                              ",{}]],"2":[["        sw $t2, 8($sp)                                                                              ",{}]],"3":[["        sw $t3, 12($sp)                                                                             ",{}]],"4":[["        sw $t4, 16($sp)                                                                             ",{}]],"5":[["        sw $t5, 20($sp)                                                                             ",{}]],"6":[["        sw $t6, 24($sp)                                                                             ",{}]],"7":[["        sw $t7, 28($sp)                                                                             ",{}]],"8":[["        sw $t8, 32($sp)                                                                             ",{}]],"9":[["        sw $t9, 36($sp)                                                                             ",{}]],"10":[["        sw $s0, 40($sp)                                                                             ",{}]],"11":[["        sw $s1, 44($sp)                                                                             ",{}]],"12":[["        sw $s2, 48($sp)                                                                             ",{}]],"13":[["        sw $s3, 52($sp)                                                                             ",{}]],"14":[["        sw $s5, 56($sp)                                                                             ",{}]],"15":[["        sw $s6, 60($sp)                                                                             ",{}]],"16":[["        sw $s7, 64($sp)                                                                             ",{}]],"17":[["        sw $ra, 68($sp)                                                                             ",{}]],"18":[["        #done storing                                                                               ",{}]],"19":[["        li $t0, 0                               #loop variable                                      ",{}]],"20":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"21":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"22":[["denloop:                                                                                            ",{}]],"23":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"24":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"25":[["4) for addressing the plain/ciphertext                                                              ",{}]],"26":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"27":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"28":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"29":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"30":[["                li $t3, 1                               #for behavior checking                      ",{}]],"31":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"32":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"33":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101837,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.9e-05,{"lines":{"0":[["        sw $t1, 4($sp)                                                                              ",{}]],"1":[["        sw $t2, 8($sp)                                                                              ",{}]],"2":[["        sw $t3, 12($sp)                                                                             ",{}]],"3":[["        sw $t4, 16($sp)                                                                             ",{}]],"4":[["        sw $t5, 20($sp)                                                                             ",{}]],"5":[["        sw $t6, 24($sp)                                                                             ",{}]],"6":[["        sw $t7, 28($sp)                                                                             ",{}]],"7":[["        sw $t8, 32($sp)                                                                             ",{}]],"8":[["        sw $t9, 36($sp)                                                                             ",{}]],"9":[["        sw $s0, 40($sp)                                                                             ",{}]],"10":[["        sw $s1, 44($sp)                                                                             ",{}]],"11":[["        sw $s2, 48($sp)                                                                             ",{}]],"12":[["        sw $s3, 52($sp)                                                                             ",{}]],"13":[["        sw $s5, 56($sp)                                                                             ",{}]],"14":[["        sw $s6, 60($sp)                                                                             ",{}]],"15":[["        sw $s7, 64($sp)                                                                             ",{}]],"16":[["        sw $ra, 68($sp)                                                                             ",{}]],"17":[["        #done storing                                                                               ",{}]],"18":[["        li $t0, 0                               #loop variable                                      ",{}]],"19":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"20":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"21":[["denloop:                                                                                            ",{}]],"22":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"23":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"24":[["4) for addressing the plain/ciphertext                                                              ",{}]],"25":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"26":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"27":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"28":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"29":[["                li $t3, 1                               #for behavior checking                      ",{}]],"30":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"31":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"32":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"33":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10037,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.999999999999999e-05,{"lines":{"0":[["        sw $t2, 8($sp)                                                                              ",{}]],"1":[["        sw $t3, 12($sp)                                                                             ",{}]],"2":[["        sw $t4, 16($sp)                                                                             ",{}]],"3":[["        sw $t5, 20($sp)                                                                             ",{}]],"4":[["        sw $t6, 24($sp)                                                                             ",{}]],"5":[["        sw $t7, 28($sp)                                                                             ",{}]],"6":[["        sw $t8, 32($sp)                                                                             ",{}]],"7":[["        sw $t9, 36($sp)                                                                             ",{}]],"8":[["        sw $s0, 40($sp)                                                                             ",{}]],"9":[["        sw $s1, 44($sp)                                                                             ",{}]],"10":[["        sw $s2, 48($sp)                                                                             ",{}]],"11":[["        sw $s3, 52($sp)                                                                             ",{}]],"12":[["        sw $s5, 56($sp)                                                                             ",{}]],"13":[["        sw $s6, 60($sp)                                                                             ",{}]],"14":[["        sw $s7, 64($sp)                                                                             ",{}]],"15":[["        sw $ra, 68($sp)                                                                             ",{}]],"16":[["        #done storing                                                                               ",{}]],"17":[["        li $t0, 0                               #loop variable                                      ",{}]],"18":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"19":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"20":[["denloop:                                                                                            ",{}]],"21":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"22":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"23":[["4) for addressing the plain/ciphertext                                                              ",{}]],"24":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"25":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"26":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"27":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"28":[["                li $t3, 1                               #for behavior checking                      ",{}]],"29":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"30":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"31":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"32":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"33":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101326,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.499999999999999e-05,{"lines":{"0":[["        sw $t3, 12($sp)                                                                             ",{}]],"1":[["        sw $t4, 16($sp)                                                                             ",{}]],"2":[["        sw $t5, 20($sp)                                                                             ",{}]],"3":[["        sw $t6, 24($sp)                                                                             ",{}]],"4":[["        sw $t7, 28($sp)                                                                             ",{}]],"5":[["        sw $t8, 32($sp)                                                                             ",{}]],"6":[["        sw $t9, 36($sp)                                                                             ",{}]],"7":[["        sw $s0, 40($sp)                                                                             ",{}]],"8":[["        sw $s1, 44($sp)                                                                             ",{}]],"9":[["        sw $s2, 48($sp)                                                                             ",{}]],"10":[["        sw $s3, 52($sp)                                                                             ",{}]],"11":[["        sw $s5, 56($sp)                                                                             ",{}]],"12":[["        sw $s6, 60($sp)                                                                             ",{}]],"13":[["        sw $s7, 64($sp)                                                                             ",{}]],"14":[["        sw $ra, 68($sp)                                                                             ",{}]],"15":[["        #done storing                                                                               ",{}]],"16":[["        li $t0, 0                               #loop variable                                      ",{}]],"17":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"18":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"19":[["denloop:                                                                                            ",{}]],"20":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"21":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"22":[["4) for addressing the plain/ciphertext                                                              ",{}]],"23":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"24":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"25":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"26":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"27":[["                li $t3, 1                               #for behavior checking                      ",{}]],"28":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"29":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"30":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"31":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"32":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"33":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101166,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        sw $t4, 16($sp)                                                                             ",{}]],"1":[["        sw $t5, 20($sp)                                                                             ",{}]],"2":[["        sw $t6, 24($sp)                                                                             ",{}]],"3":[["        sw $t7, 28($sp)                                                                             ",{}]],"4":[["        sw $t8, 32($sp)                                                                             ",{}]],"5":[["        sw $t9, 36($sp)                                                                             ",{}]],"6":[["        sw $s0, 40($sp)                                                                             ",{}]],"7":[["        sw $s1, 44($sp)                                                                             ",{}]],"8":[["        sw $s2, 48($sp)                                                                             ",{}]],"9":[["        sw $s3, 52($sp)                                                                             ",{}]],"10":[["        sw $s5, 56($sp)                                                                             ",{}]],"11":[["        sw $s6, 60($sp)                                                                             ",{}]],"12":[["        sw $s7, 64($sp)                                                                             ",{}]],"13":[["        sw $ra, 68($sp)                                                                             ",{}]],"14":[["        #done storing                                                                               ",{}]],"15":[["        li $t0, 0                               #loop variable                                      ",{}]],"16":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"17":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"18":[["denloop:                                                                                            ",{}]],"19":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"20":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"21":[["4) for addressing the plain/ciphertext                                                              ",{}]],"22":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"23":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"24":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"25":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"26":[["                li $t3, 1                               #for behavior checking                      ",{}]],"27":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"28":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"29":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"30":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"31":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"32":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"33":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.1002,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.9e-05,{"lines":{"0":[["        sw $t5, 20($sp)                                                                             ",{}]],"1":[["        sw $t6, 24($sp)                                                                             ",{}]],"2":[["        sw $t7, 28($sp)                                                                             ",{}]],"3":[["        sw $t8, 32($sp)                                                                             ",{}]],"4":[["        sw $t9, 36($sp)                                                                             ",{}]],"5":[["        sw $s0, 40($sp)                                                                             ",{}]],"6":[["        sw $s1, 44($sp)                                                                             ",{}]],"7":[["        sw $s2, 48($sp)                                                                             ",{}]],"8":[["        sw $s3, 52($sp)                                                                             ",{}]],"9":[["        sw $s5, 56($sp)                                                                             ",{}]],"10":[["        sw $s6, 60($sp)                                                                             ",{}]],"11":[["        sw $s7, 64($sp)                                                                             ",{}]],"12":[["        sw $ra, 68($sp)                                                                             ",{}]],"13":[["        #done storing                                                                               ",{}]],"14":[["        li $t0, 0                               #loop variable                                      ",{}]],"15":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"16":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"17":[["denloop:                                                                                            ",{}]],"18":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"19":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"20":[["4) for addressing the plain/ciphertext                                                              ",{}]],"21":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"22":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"23":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"24":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"25":[["                li $t3, 1                               #for behavior checking                      ",{}]],"26":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"27":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"28":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"29":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"30":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"31":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"32":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"33":[["                j denlr                                 #and skip the encryption because no         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101353,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.9e-05,{"lines":{"0":[["        sw $t6, 24($sp)                                                                             ",{}]],"1":[["        sw $t7, 28($sp)                                                                             ",{}]],"2":[["        sw $t8, 32($sp)                                                                             ",{}]],"3":[["        sw $t9, 36($sp)                                                                             ",{}]],"4":[["        sw $s0, 40($sp)                                                                             ",{}]],"5":[["        sw $s1, 44($sp)                                                                             ",{}]],"6":[["        sw $s2, 48($sp)                                                                             ",{}]],"7":[["        sw $s3, 52($sp)                                                                             ",{}]],"8":[["        sw $s5, 56($sp)                                                                             ",{}]],"9":[["        sw $s6, 60($sp)                                                                             ",{}]],"10":[["        sw $s7, 64($sp)                                                                             ",{}]],"11":[["        sw $ra, 68($sp)                                                                             ",{}]],"12":[["        #done storing                                                                               ",{}]],"13":[["        li $t0, 0                               #loop variable                                      ",{}]],"14":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"15":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"16":[["denloop:                                                                                            ",{}]],"17":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"18":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"19":[["4) for addressing the plain/ciphertext                                                              ",{}]],"20":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"21":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"22":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"23":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"24":[["                li $t3, 1                               #for behavior checking                      ",{}]],"25":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"26":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"27":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"28":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"29":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"30":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"31":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"32":[["                j denlr                                 #and skip the encryption because no         ",{}]],"33":[["denlen: jal encryptblock                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10083,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        sw $t7, 28($sp)                                                                             ",{}]],"1":[["        sw $t8, 32($sp)                                                                             ",{}]],"2":[["        sw $t9, 36($sp)                                                                             ",{}]],"3":[["        sw $s0, 40($sp)                                                                             ",{}]],"4":[["        sw $s1, 44($sp)                                                                             ",{}]],"5":[["        sw $s2, 48($sp)                                                                             ",{}]],"6":[["        sw $s3, 52($sp)                                                                             ",{}]],"7":[["        sw $s5, 56($sp)                                                                             ",{}]],"8":[["        sw $s6, 60($sp)                                                                             ",{}]],"9":[["        sw $s7, 64($sp)                                                                             ",{}]],"10":[["        sw $ra, 68($sp)                                                                             ",{}]],"11":[["        #done storing                                                                               ",{}]],"12":[["        li $t0, 0                               #loop variable                                      ",{}]],"13":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"14":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"15":[["denloop:                                                                                            ",{}]],"16":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"17":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"18":[["4) for addressing the plain/ciphertext                                                              ",{}]],"19":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"20":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"21":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"22":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"23":[["                li $t3, 1                               #for behavior checking                      ",{}]],"24":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"25":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"26":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"27":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"28":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"29":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"30":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"31":[["                j denlr                                 #and skip the encryption because no         ",{}]],"32":[["denlen: jal encryptblock                                                                            ",{}]],"33":[["denlr:                                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101048,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        sw $t8, 32($sp)                                                                             ",{}]],"1":[["        sw $t9, 36($sp)                                                                             ",{}]],"2":[["        sw $s0, 40($sp)                                                                             ",{}]],"3":[["        sw $s1, 44($sp)                                                                             ",{}]],"4":[["        sw $s2, 48($sp)                                                                             ",{}]],"5":[["        sw $s3, 52($sp)                                                                             ",{}]],"6":[["        sw $s5, 56($sp)                                                                             ",{}]],"7":[["        sw $s6, 60($sp)                                                                             ",{}]],"8":[["        sw $s7, 64($sp)                                                                             ",{}]],"9":[["        sw $ra, 68($sp)                                                                             ",{}]],"10":[["        #done storing                                                                               ",{}]],"11":[["        li $t0, 0                               #loop variable                                      ",{}]],"12":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"13":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"14":[["denloop:                                                                                            ",{}]],"15":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"16":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"17":[["4) for addressing the plain/ciphertext                                                              ",{}]],"18":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"19":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"20":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"21":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"22":[["                li $t3, 1                               #for behavior checking                      ",{}]],"23":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"24":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"25":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"26":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"27":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"28":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"29":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"30":[["                j denlr                                 #and skip the encryption because no         ",{}]],"31":[["denlen: jal encryptblock                                                                            ",{}]],"32":[["denlr:                                                                                              ",{}]],"33":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101027,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        sw $t9, 36($sp)                                                                             ",{}]],"1":[["        sw $s0, 40($sp)                                                                             ",{}]],"2":[["        sw $s1, 44($sp)                                                                             ",{}]],"3":[["        sw $s2, 48($sp)                                                                             ",{}]],"4":[["        sw $s3, 52($sp)                                                                             ",{}]],"5":[["        sw $s5, 56($sp)                                                                             ",{}]],"6":[["        sw $s6, 60($sp)                                                                             ",{}]],"7":[["        sw $s7, 64($sp)                                                                             ",{}]],"8":[["        sw $ra, 68($sp)                                                                             ",{}]],"9":[["        #done storing                                                                               ",{}]],"10":[["        li $t0, 0                               #loop variable                                      ",{}]],"11":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"12":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"13":[["denloop:                                                                                            ",{}]],"14":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"15":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"16":[["4) for addressing the plain/ciphertext                                                              ",{}]],"17":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"18":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"19":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"20":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"21":[["                li $t3, 1                               #for behavior checking                      ",{}]],"22":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"23":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"24":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"25":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"26":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"27":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"28":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"29":[["                j denlr                                 #and skip the encryption because no         ",{}]],"30":[["denlen: jal encryptblock                                                                            ",{}]],"31":[["denlr:                                                                                              ",{}]],"32":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"33":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101002,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        sw $s0, 40($sp)                                                                             ",{}]],"1":[["        sw $s1, 44($sp)                                                                             ",{}]],"2":[["        sw $s2, 48($sp)                                                                             ",{}]],"3":[["        sw $s3, 52($sp)                                                                             ",{}]],"4":[["        sw $s5, 56($sp)                                                                             ",{}]],"5":[["        sw $s6, 60($sp)                                                                             ",{}]],"6":[["        sw $s7, 64($sp)                                                                             ",{}]],"7":[["        sw $ra, 68($sp)                                                                             ",{}]],"8":[["        #done storing                                                                               ",{}]],"9":[["        li $t0, 0                               #loop variable                                      ",{}]],"10":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"11":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"12":[["denloop:                                                                                            ",{}]],"13":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"14":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"15":[["4) for addressing the plain/ciphertext                                                              ",{}]],"16":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"17":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"18":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"19":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"20":[["                li $t3, 1                               #for behavior checking                      ",{}]],"21":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"22":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"23":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"24":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"25":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"26":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"27":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"28":[["                j denlr                                 #and skip the encryption because no         ",{}]],"29":[["denlen: jal encryptblock                                                                            ",{}]],"30":[["denlr:                                                                                              ",{}]],"31":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"32":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"33":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10094,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        sw $s1, 44($sp)                                                                             ",{}]],"1":[["        sw $s2, 48($sp)                                                                             ",{}]],"2":[["        sw $s3, 52($sp)                                                                             ",{}]],"3":[["        sw $s5, 56($sp)                                                                             ",{}]],"4":[["        sw $s6, 60($sp)                                                                             ",{}]],"5":[["        sw $s7, 64($sp)                                                                             ",{}]],"6":[["        sw $ra, 68($sp)                                                                             ",{}]],"7":[["        #done storing                                                                               ",{}]],"8":[["        li $t0, 0                               #loop variable                                      ",{}]],"9":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"10":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"11":[["denloop:                                                                                            ",{}]],"12":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"13":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"14":[["4) for addressing the plain/ciphertext                                                              ",{}]],"15":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"16":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"17":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"18":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"19":[["                li $t3, 1                               #for behavior checking                      ",{}]],"20":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"21":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"22":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"23":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"24":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"25":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"26":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"27":[["                j denlr                                 #and skip the encryption because no         ",{}]],"28":[["denlen: jal encryptblock                                                                            ",{}]],"29":[["denlr:                                                                                              ",{}]],"30":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"31":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"32":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"33":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10069,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.4e-05,{"lines":{"0":[["        sw $s2, 48($sp)                                                                             ",{}]],"1":[["        sw $s3, 52($sp)                                                                             ",{}]],"2":[["        sw $s5, 56($sp)                                                                             ",{}]],"3":[["        sw $s6, 60($sp)                                                                             ",{}]],"4":[["        sw $s7, 64($sp)                                                                             ",{}]],"5":[["        sw $ra, 68($sp)                                                                             ",{}]],"6":[["        #done storing                                                                               ",{}]],"7":[["        li $t0, 0                               #loop variable                                      ",{}]],"8":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"9":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"10":[["denloop:                                                                                            ",{}]],"11":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"12":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"13":[["4) for addressing the plain/ciphertext                                                              ",{}]],"14":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"15":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"16":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"17":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"18":[["                li $t3, 1                               #for behavior checking                      ",{}]],"19":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"20":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"21":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"22":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"23":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"24":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"25":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"26":[["                j denlr                                 #and skip the encryption because no         ",{}]],"27":[["denlen: jal encryptblock                                                                            ",{}]],"28":[["denlr:                                                                                              ",{}]],"29":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"30":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"31":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"32":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"33":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101072,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        sw $s3, 52($sp)                                                                             ",{}]],"1":[["        sw $s5, 56($sp)                                                                             ",{}]],"2":[["        sw $s6, 60($sp)                                                                             ",{}]],"3":[["        sw $s7, 64($sp)                                                                             ",{}]],"4":[["        sw $ra, 68($sp)                                                                             ",{}]],"5":[["        #done storing                                                                               ",{}]],"6":[["        li $t0, 0                               #loop variable                                      ",{}]],"7":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"8":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"9":[["denloop:                                                                                            ",{}]],"10":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"11":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"12":[["4) for addressing the plain/ciphertext                                                              ",{}]],"13":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"14":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"15":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"16":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"17":[["                li $t3, 1                               #for behavior checking                      ",{}]],"18":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"19":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"20":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"21":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"22":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"23":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"24":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"25":[["                j denlr                                 #and skip the encryption because no         ",{}]],"26":[["denlen: jal encryptblock                                                                            ",{}]],"27":[["denlr:                                                                                              ",{}]],"28":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"29":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"30":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"31":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"32":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"33":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100584,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[2.9e-05,{"lines":{"0":[["        sw $s5, 56($sp)                                                                             ",{}]],"1":[["        sw $s6, 60($sp)                                                                             ",{}]],"2":[["        sw $s7, 64($sp)                                                                             ",{}]],"3":[["        sw $ra, 68($sp)                                                                             ",{}]],"4":[["        #done storing                                                                               ",{}]],"5":[["        li $t0, 0                               #loop variable                                      ",{}]],"6":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"7":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"8":[["denloop:                                                                                            ",{}]],"9":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"10":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"11":[["4) for addressing the plain/ciphertext                                                              ",{}]],"12":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"13":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"14":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"15":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"16":[["                li $t3, 1                               #for behavior checking                      ",{}]],"17":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"18":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"19":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"20":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"21":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"22":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"23":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"24":[["                j denlr                                 #and skip the encryption because no         ",{}]],"25":[["denlen: jal encryptblock                                                                            ",{}]],"26":[["denlr:                                                                                              ",{}]],"27":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"28":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"29":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"30":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"31":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"32":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"33":[["ce                                                                                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09950299999999999,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[2.9e-05,{"lines":{"0":[["        sw $s6, 60($sp)                                                                             ",{}]],"1":[["        sw $s7, 64($sp)                                                                             ",{}]],"2":[["        sw $ra, 68($sp)                                                                             ",{}]],"3":[["        #done storing                                                                               ",{}]],"4":[["        li $t0, 0                               #loop variable                                      ",{}]],"5":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"6":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"7":[["denloop:                                                                                            ",{}]],"8":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"9":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"10":[["4) for addressing the plain/ciphertext                                                              ",{}]],"11":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"12":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"13":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"14":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"15":[["                li $t3, 1                               #for behavior checking                      ",{}]],"16":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"17":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"18":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"19":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"20":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"21":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"22":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"23":[["                j denlr                                 #and skip the encryption because no         ",{}]],"24":[["denlen: jal encryptblock                                                                            ",{}]],"25":[["denlr:                                                                                              ",{}]],"26":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"27":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"28":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"29":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"30":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"31":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"32":[["ce                                                                                                  ",{}]],"33":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.102196,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.7e-05,{"lines":{"0":[["        sw $s7, 64($sp)                                                                             ",{}]],"1":[["        sw $ra, 68($sp)                                                                             ",{}]],"2":[["        #done storing                                                                               ",{}]],"3":[["        li $t0, 0                               #loop variable                                      ",{}]],"4":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"5":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"6":[["denloop:                                                                                            ",{}]],"7":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"8":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"9":[["4) for addressing the plain/ciphertext                                                              ",{}]],"10":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"11":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"12":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"13":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"14":[["                li $t3, 1                               #for behavior checking                      ",{}]],"15":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"16":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"17":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"18":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"19":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"20":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"21":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"22":[["                j denlr                                 #and skip the encryption because no         ",{}]],"23":[["denlen: jal encryptblock                                                                            ",{}]],"24":[["denlr:                                                                                              ",{}]],"25":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"26":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"27":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"28":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"29":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"30":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"31":[["ce                                                                                                  ",{}]],"32":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"33":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100943,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        sw $ra, 68($sp)                                                                             ",{}]],"1":[["        #done storing                                                                               ",{}]],"2":[["        li $t0, 0                               #loop variable                                      ",{}]],"3":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"4":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"5":[["denloop:                                                                                            ",{}]],"6":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"7":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"8":[["4) for addressing the plain/ciphertext                                                              ",{}]],"9":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"10":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"11":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"12":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"13":[["                li $t3, 1                               #for behavior checking                      ",{}]],"14":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"15":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"16":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"17":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"18":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"19":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"20":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"21":[["                j denlr                                 #and skip the encryption because no         ",{}]],"22":[["denlen: jal encryptblock                                                                            ",{}]],"23":[["denlr:                                                                                              ",{}]],"24":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"25":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"26":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"27":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"28":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"29":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"30":[["ce                                                                                                  ",{}]],"31":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"32":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"33":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101249,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[8.1e-05,{"lines":{"0":[["        #done storing                                                                               ",{}]],"1":[["        li $t0, 0                               #loop variable                                      ",{}]],"2":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"3":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"4":[["denloop:                                                                                            ",{}]],"5":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"6":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"7":[["4) for addressing the plain/ciphertext                                                              ",{}]],"8":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"9":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"10":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"11":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"12":[["                li $t3, 1                               #for behavior checking                      ",{}]],"13":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"14":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"15":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"16":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"17":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"18":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"19":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"20":[["                j denlr                                 #and skip the encryption because no         ",{}]],"21":[["denlen: jal encryptblock                                                                            ",{}]],"22":[["denlr:                                                                                              ",{}]],"23":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"24":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"25":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"26":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"27":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"28":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"29":[["ce                                                                                                  ",{}]],"30":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"31":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"32":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"33":[["                j denloop                               #keep looping                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101018,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        li $t0, 0                               #loop variable                                      ",{}]],"1":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"2":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"3":[["denloop:                                                                                            ",{}]],"4":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"5":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"6":[["4) for addressing the plain/ciphertext                                                              ",{}]],"7":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"8":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"9":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"10":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"11":[["                li $t3, 1                               #for behavior checking                      ",{}]],"12":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"13":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"14":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"15":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"16":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"17":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"18":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"19":[["                j denlr                                 #and skip the encryption because no         ",{}]],"20":[["denlen: jal encryptblock                                                                            ",{}]],"21":[["denlr:                                                                                              ",{}]],"22":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"23":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"24":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"25":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"26":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"27":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"28":[["ce                                                                                                  ",{}]],"29":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"30":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"31":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"32":[["                j denloop                               #keep looping                               ",{}]],"33":[["enddenloop:                                                                                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100236,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        add $t1, $zero, $a1             #loop condition                                             ",{}]],"1":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"2":[["denloop:                                                                                            ",{}]],"3":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"4":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"5":[["4) for addressing the plain/ciphertext                                                              ",{}]],"6":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"7":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"8":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"9":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"10":[["                li $t3, 1                               #for behavior checking                      ",{}]],"11":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"12":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"13":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"14":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"15":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"16":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"17":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"18":[["                j denlr                                 #and skip the encryption because no         ",{}]],"19":[["denlen: jal encryptblock                                                                            ",{}]],"20":[["denlr:                                                                                              ",{}]],"21":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"22":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"23":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"24":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"25":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"26":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"27":[["ce                                                                                                  ",{}]],"28":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"29":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"30":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"31":[["                j denloop                               #keep looping                               ",{}]],"32":[["enddenloop:                                                                                         ",{}]],"33":[["        #begin restoring                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100207,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.4e-05,{"lines":{"0":[["        sra $t1, $t1, 3                 #shift right 3 to divide by 8(size in bytes of a block)     ",{}]],"1":[["denloop:                                                                                            ",{}]],"2":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"3":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"4":[["4) for addressing the plain/ciphertext                                                              ",{}]],"5":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"6":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"7":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"8":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"9":[["                li $t3, 1                               #for behavior checking                      ",{}]],"10":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"11":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"12":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"13":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"14":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"15":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"16":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"17":[["                j denlr                                 #and skip the encryption because no         ",{}]],"18":[["denlen: jal encryptblock                                                                            ",{}]],"19":[["denlr:                                                                                              ",{}]],"20":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"21":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"22":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"23":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"24":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"25":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"26":[["ce                                                                                                  ",{}]],"27":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"28":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"29":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"30":[["                j denloop                               #keep looping                               ",{}]],"31":[["enddenloop:                                                                                         ",{}]],"32":[["        #begin restoring                                                                            ",{}]],"33":[["        lw $t0, ($sp)                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100412,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.2e-05,{"lines":{"0":[["denloop:                                                                                            ",{}]],"1":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"2":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"3":[["4) for addressing the plain/ciphertext                                                              ",{}]],"4":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"5":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"6":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"7":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"8":[["                li $t3, 1                               #for behavior checking                      ",{}]],"9":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"10":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"11":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"12":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"13":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"14":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"15":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"16":[["                j denlr                                 #and skip the encryption because no         ",{}]],"17":[["denlen: jal encryptblock                                                                            ",{}]],"18":[["denlr:                                                                                              ",{}]],"19":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"20":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"21":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"22":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"23":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"24":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"25":[["ce                                                                                                  ",{}]],"26":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"27":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"28":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"29":[["                j denloop                               #keep looping                               ",{}]],"30":[["enddenloop:                                                                                         ",{}]],"31":[["        #begin restoring                                                                            ",{}]],"32":[["        lw $t0, ($sp)                                                                               ",{}]],"33":[["        lw $t1, 4($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100233,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                beq $t0, $t1, enddenloop        #kill the loop if we hit the end                    ",{}]],"1":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"2":[["4) for addressing the plain/ciphertext                                                              ",{}]],"3":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"4":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"5":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"6":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"7":[["                li $t3, 1                               #for behavior checking                      ",{}]],"8":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"9":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"10":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"11":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"12":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"13":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"14":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"15":[["                j denlr                                 #and skip the encryption because no         ",{}]],"16":[["denlen: jal encryptblock                                                                            ",{}]],"17":[["denlr:                                                                                              ",{}]],"18":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"19":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"20":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"21":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"22":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"23":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"24":[["ce                                                                                                  ",{}]],"25":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"26":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"27":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"28":[["                j denloop                               #keep looping                               ",{}]],"29":[["enddenloop:                                                                                         ",{}]],"30":[["        #begin restoring                                                                            ",{}]],"31":[["        lw $t0, ($sp)                                                                               ",{}]],"32":[["        lw $t1, 4($sp)                                                                              ",{}]],"33":[["        lw $t2, 8($sp)                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100057,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                sll $t2, $t0, 3                 #shift loop variable left 3(mult by 2 and then also ",{}]],"1":[["4) for addressing the plain/ciphertext                                                              ",{}]],"2":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"3":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"4":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"5":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"6":[["                li $t3, 1                               #for behavior checking                      ",{}]],"7":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"8":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"9":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"10":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"11":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"12":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"13":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"14":[["                j denlr                                 #and skip the encryption because no         ",{}]],"15":[["denlen: jal encryptblock                                                                            ",{}]],"16":[["denlr:                                                                                              ",{}]],"17":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"18":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"19":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"20":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"21":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"22":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"23":[["ce                                                                                                  ",{}]],"24":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"25":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"26":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"27":[["                j denloop                               #keep looping                               ",{}]],"28":[["enddenloop:                                                                                         ",{}]],"29":[["        #begin restoring                                                                            ",{}]],"30":[["        lw $t0, ($sp)                                                                               ",{}]],"31":[["        lw $t1, 4($sp)                                                                              ",{}]],"32":[["        lw $t2, 8($sp)                                                                              ",{}]],"33":[["        lw $t3, 12($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100501,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.2e-05,{"lines":{"0":[["4) for addressing the plain/ciphertext                                                              ",{}]],"1":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"2":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"3":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"4":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"5":[["                li $t3, 1                               #for behavior checking                      ",{}]],"6":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"7":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"8":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"9":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"10":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"11":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"12":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"13":[["                j denlr                                 #and skip the encryption because no         ",{}]],"14":[["denlen: jal encryptblock                                                                            ",{}]],"15":[["denlr:                                                                                              ",{}]],"16":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"17":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"18":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"19":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"20":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"21":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"22":[["ce                                                                                                  ",{}]],"23":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"24":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"25":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"26":[["                j denloop                               #keep looping                               ",{}]],"27":[["enddenloop:                                                                                         ",{}]],"28":[["        #begin restoring                                                                            ",{}]],"29":[["        lw $t0, ($sp)                                                                               ",{}]],"30":[["        lw $t1, 4($sp)                                                                              ",{}]],"31":[["        lw $t2, 8($sp)                                                                              ",{}]],"32":[["        lw $t3, 12($sp)                                                                             ",{}]],"33":[["        lw $t4, 16($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099879,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["                addu $t2, $t2, $a0              #for addressing                                     ",{}]],"1":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"2":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"3":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"4":[["                li $t3, 1                               #for behavior checking                      ",{}]],"5":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"6":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"7":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"8":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"9":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"10":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"11":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"12":[["                j denlr                                 #and skip the encryption because no         ",{}]],"13":[["denlen: jal encryptblock                                                                            ",{}]],"14":[["denlr:                                                                                              ",{}]],"15":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"16":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"17":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"18":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"19":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"20":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"21":[["ce                                                                                                  ",{}]],"22":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"23":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"24":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"25":[["                j denloop                               #keep looping                               ",{}]],"26":[["enddenloop:                                                                                         ",{}]],"27":[["        #begin restoring                                                                            ",{}]],"28":[["        lw $t0, ($sp)                                                                               ",{}]],"29":[["        lw $t1, 4($sp)                                                                              ",{}]],"30":[["        lw $t2, 8($sp)                                                                              ",{}]],"31":[["        lw $t3, 12($sp)                                                                             ",{}]],"32":[["        lw $t4, 16($sp)                                                                             ",{}]],"33":[["        lw $t5, 20($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100376,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["                lw $a2, ($t2)                   #load the \"i*2\"th item                              ",{}]],"1":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"2":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"3":[["                li $t3, 1                               #for behavior checking                      ",{}]],"4":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"5":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"6":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"7":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"8":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"9":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"10":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"11":[["                j denlr                                 #and skip the encryption because no         ",{}]],"12":[["denlen: jal encryptblock                                                                            ",{}]],"13":[["denlr:                                                                                              ",{}]],"14":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"15":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"16":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"17":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"18":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"19":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"20":[["ce                                                                                                  ",{}]],"21":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"22":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"23":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"24":[["                j denloop                               #keep looping                               ",{}]],"25":[["enddenloop:                                                                                         ",{}]],"26":[["        #begin restoring                                                                            ",{}]],"27":[["        lw $t0, ($sp)                                                                               ",{}]],"28":[["        lw $t1, 4($sp)                                                                              ",{}]],"29":[["        lw $t2, 8($sp)                                                                              ",{}]],"30":[["        lw $t3, 12($sp)                                                                             ",{}]],"31":[["        lw $t4, 16($sp)                                                                             ",{}]],"32":[["        lw $t5, 20($sp)                                                                             ",{}]],"33":[["        lw $t6, 24($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099971,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.6e-05,{"lines":{"0":[["                addi $t2, $t2, 4                #add 1 for accessing next item                      ",{}]],"1":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"2":[["                li $t3, 1                               #for behavior checking                      ",{}]],"3":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"4":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"5":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"6":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"7":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"8":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"9":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"10":[["                j denlr                                 #and skip the encryption because no         ",{}]],"11":[["denlen: jal encryptblock                                                                            ",{}]],"12":[["denlr:                                                                                              ",{}]],"13":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"14":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"15":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"16":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"17":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"18":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"19":[["ce                                                                                                  ",{}]],"20":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"21":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"22":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"23":[["                j denloop                               #keep looping                               ",{}]],"24":[["enddenloop:                                                                                         ",{}]],"25":[["        #begin restoring                                                                            ",{}]],"26":[["        lw $t0, ($sp)                                                                               ",{}]],"27":[["        lw $t1, 4($sp)                                                                              ",{}]],"28":[["        lw $t2, 8($sp)                                                                              ",{}]],"29":[["        lw $t3, 12($sp)                                                                             ",{}]],"30":[["        lw $t4, 16($sp)                                                                             ",{}]],"31":[["        lw $t5, 20($sp)                                                                             ",{}]],"32":[["        lw $t6, 24($sp)                                                                             ",{}]],"33":[["        lw $t7, 28($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100344,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["                lw $a3, ($t2)                   #load the \"i*2+1\"th item                            ",{}]],"1":[["                li $t3, 1                               #for behavior checking                      ",{}]],"2":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"3":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"4":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"5":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"6":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"7":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"8":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"9":[["                j denlr                                 #and skip the encryption because no         ",{}]],"10":[["denlen: jal encryptblock                                                                            ",{}]],"11":[["denlr:                                                                                              ",{}]],"12":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"13":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"14":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"15":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"16":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"17":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"18":[["ce                                                                                                  ",{}]],"19":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"20":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"21":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"22":[["                j denloop                               #keep looping                               ",{}]],"23":[["enddenloop:                                                                                         ",{}]],"24":[["        #begin restoring                                                                            ",{}]],"25":[["        lw $t0, ($sp)                                                                               ",{}]],"26":[["        lw $t1, 4($sp)                                                                              ",{}]],"27":[["        lw $t2, 8($sp)                                                                              ",{}]],"28":[["        lw $t3, 12($sp)                                                                             ",{}]],"29":[["        lw $t4, 16($sp)                                                                             ",{}]],"30":[["        lw $t5, 20($sp)                                                                             ",{}]],"31":[["        lw $t6, 24($sp)                                                                             ",{}]],"32":[["        lw $t7, 28($sp)                                                                             ",{}]],"33":[["        lw $t8, 32($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099936,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.6e-05,{"lines":{"0":[["                li $t3, 1                               #for behavior checking                      ",{}]],"1":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"2":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"3":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"4":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"5":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"6":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"7":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"8":[["                j denlr                                 #and skip the encryption because no         ",{}]],"9":[["denlen: jal encryptblock                                                                            ",{}]],"10":[["denlr:                                                                                              ",{}]],"11":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"12":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"13":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"14":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"15":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"16":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"17":[["ce                                                                                                  ",{}]],"18":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"19":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"20":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"21":[["                j denloop                               #keep looping                               ",{}]],"22":[["enddenloop:                                                                                         ",{}]],"23":[["        #begin restoring                                                                            ",{}]],"24":[["        lw $t0, ($sp)                                                                               ",{}]],"25":[["        lw $t1, 4($sp)                                                                              ",{}]],"26":[["        lw $t2, 8($sp)                                                                              ",{}]],"27":[["        lw $t3, 12($sp)                                                                             ",{}]],"28":[["        lw $t4, 16($sp)                                                                             ",{}]],"29":[["        lw $t5, 20($sp)                                                                             ",{}]],"30":[["        lw $t6, 24($sp)                                                                             ",{}]],"31":[["        lw $t7, 28($sp)                                                                             ",{}]],"32":[["        lw $t8, 32($sp)                                                                             ",{}]],"33":[["        lw $t9, 36($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101439,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["                sw $t0, 72($sp)                 #prevent data corruption                            ",{}]],"1":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"2":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"3":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"4":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"5":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"6":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"7":[["                j denlr                                 #and skip the encryption because no         ",{}]],"8":[["denlen: jal encryptblock                                                                            ",{}]],"9":[["denlr:                                                                                              ",{}]],"10":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"11":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"12":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"13":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"14":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"15":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"16":[["ce                                                                                                  ",{}]],"17":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"18":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"19":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"20":[["                j denloop                               #keep looping                               ",{}]],"21":[["enddenloop:                                                                                         ",{}]],"22":[["        #begin restoring                                                                            ",{}]],"23":[["        lw $t0, ($sp)                                                                               ",{}]],"24":[["        lw $t1, 4($sp)                                                                              ",{}]],"25":[["        lw $t2, 8($sp)                                                                              ",{}]],"26":[["        lw $t3, 12($sp)                                                                             ",{}]],"27":[["        lw $t4, 16($sp)                                                                             ",{}]],"28":[["        lw $t5, 20($sp)                                                                             ",{}]],"29":[["        lw $t6, 24($sp)                                                                             ",{}]],"30":[["        lw $t7, 28($sp)                                                                             ",{}]],"31":[["        lw $t8, 32($sp)                                                                             ",{}]],"32":[["        lw $t9, 36($sp)                                                                             ",{}]],"33":[["        lw $s0, 40($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101179,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.4e-05,{"lines":{"0":[["                sw $t1, 76($sp)                 #prevent data corruption                            ",{}]],"1":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"2":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"3":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"4":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"5":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"6":[["                j denlr                                 #and skip the encryption because no         ",{}]],"7":[["denlen: jal encryptblock                                                                            ",{}]],"8":[["denlr:                                                                                              ",{}]],"9":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"10":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"11":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"12":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"13":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"14":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"15":[["ce                                                                                                  ",{}]],"16":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"17":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"18":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"19":[["                j denloop                               #keep looping                               ",{}]],"20":[["enddenloop:                                                                                         ",{}]],"21":[["        #begin restoring                                                                            ",{}]],"22":[["        lw $t0, ($sp)                                                                               ",{}]],"23":[["        lw $t1, 4($sp)                                                                              ",{}]],"24":[["        lw $t2, 8($sp)                                                                              ",{}]],"25":[["        lw $t3, 12($sp)                                                                             ",{}]],"26":[["        lw $t4, 16($sp)                                                                             ",{}]],"27":[["        lw $t5, 20($sp)                                                                             ",{}]],"28":[["        lw $t6, 24($sp)                                                                             ",{}]],"29":[["        lw $t7, 28($sp)                                                                             ",{}]],"30":[["        lw $t8, 32($sp)                                                                             ",{}]],"31":[["        lw $t9, 36($sp)                                                                             ",{}]],"32":[["        lw $s0, 40($sp)                                                                             ",{}]],"33":[["        lw $s1, 44($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100007,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                sw $t2, 80($sp)                 #prevent data corruption                            ",{}]],"1":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"2":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"3":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"4":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"5":[["                j denlr                                 #and skip the encryption because no         ",{}]],"6":[["denlen: jal encryptblock                                                                            ",{}]],"7":[["denlr:                                                                                              ",{}]],"8":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"9":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"10":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"11":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"12":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"13":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"14":[["ce                                                                                                  ",{}]],"15":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"16":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"17":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"18":[["                j denloop                               #keep looping                               ",{}]],"19":[["enddenloop:                                                                                         ",{}]],"20":[["        #begin restoring                                                                            ",{}]],"21":[["        lw $t0, ($sp)                                                                               ",{}]],"22":[["        lw $t1, 4($sp)                                                                              ",{}]],"23":[["        lw $t2, 8($sp)                                                                              ",{}]],"24":[["        lw $t3, 12($sp)                                                                             ",{}]],"25":[["        lw $t4, 16($sp)                                                                             ",{}]],"26":[["        lw $t5, 20($sp)                                                                             ",{}]],"27":[["        lw $t6, 24($sp)                                                                             ",{}]],"28":[["        lw $t7, 28($sp)                                                                             ",{}]],"29":[["        lw $t8, 32($sp)                                                                             ",{}]],"30":[["        lw $t9, 36($sp)                                                                             ",{}]],"31":[["        lw $s0, 40($sp)                                                                             ",{}]],"32":[["        lw $s1, 44($sp)                                                                             ",{}]],"33":[["        lw $s2, 48($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101086,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.4e-05,{"lines":{"0":[["                sw $t3, 84($sp)                 #prevent data corruption                            ",{}]],"1":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"2":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"3":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"4":[["                j denlr                                 #and skip the encryption because no         ",{}]],"5":[["denlen: jal encryptblock                                                                            ",{}]],"6":[["denlr:                                                                                              ",{}]],"7":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"8":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"9":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"10":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"11":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"12":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"13":[["ce                                                                                                  ",{}]],"14":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"15":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"16":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"17":[["                j denloop                               #keep looping                               ",{}]],"18":[["enddenloop:                                                                                         ",{}]],"19":[["        #begin restoring                                                                            ",{}]],"20":[["        lw $t0, ($sp)                                                                               ",{}]],"21":[["        lw $t1, 4($sp)                                                                              ",{}]],"22":[["        lw $t2, 8($sp)                                                                              ",{}]],"23":[["        lw $t3, 12($sp)                                                                             ",{}]],"24":[["        lw $t4, 16($sp)                                                                             ",{}]],"25":[["        lw $t5, 20($sp)                                                                             ",{}]],"26":[["        lw $t6, 24($sp)                                                                             ",{}]],"27":[["        lw $t7, 28($sp)                                                                             ",{}]],"28":[["        lw $t8, 32($sp)                                                                             ",{}]],"29":[["        lw $t9, 36($sp)                                                                             ",{}]],"30":[["        lw $s0, 40($sp)                                                                             ",{}]],"31":[["        lw $s1, 44($sp)                                                                             ",{}]],"32":[["        lw $s2, 48($sp)                                                                             ",{}]],"33":[["        lw $s3, 52($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100901,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                sw $a0, 88($sp)                 #prevent moar data corruption                       ",{}]],"1":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"2":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"3":[["                j denlr                                 #and skip the encryption because no         ",{}]],"4":[["denlen: jal encryptblock                                                                            ",{}]],"5":[["denlr:                                                                                              ",{}]],"6":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"7":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"8":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"9":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"10":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"11":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"12":[["ce                                                                                                  ",{}]],"13":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"14":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"15":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"16":[["                j denloop                               #keep looping                               ",{}]],"17":[["enddenloop:                                                                                         ",{}]],"18":[["        #begin restoring                                                                            ",{}]],"19":[["        lw $t0, ($sp)                                                                               ",{}]],"20":[["        lw $t1, 4($sp)                                                                              ",{}]],"21":[["        lw $t2, 8($sp)                                                                              ",{}]],"22":[["        lw $t3, 12($sp)                                                                             ",{}]],"23":[["        lw $t4, 16($sp)                                                                             ",{}]],"24":[["        lw $t5, 20($sp)                                                                             ",{}]],"25":[["        lw $t6, 24($sp)                                                                             ",{}]],"26":[["        lw $t7, 28($sp)                                                                             ",{}]],"27":[["        lw $t8, 32($sp)                                                                             ",{}]],"28":[["        lw $t9, 36($sp)                                                                             ",{}]],"29":[["        lw $s0, 40($sp)                                                                             ",{}]],"30":[["        lw $s1, 44($sp)                                                                             ",{}]],"31":[["        lw $s2, 48($sp)                                                                             ",{}]],"32":[["        lw $s3, 52($sp)                                                                             ",{}]],"33":[["        lw $s5, 56($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10025,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                beq $t3, $s0, denlen    #go to where we encrypt if that's what we're supposed to do ",{}]],"1":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"2":[["                j denlr                                 #and skip the encryption because no         ",{}]],"3":[["denlen: jal encryptblock                                                                            ",{}]],"4":[["denlr:                                                                                              ",{}]],"5":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"6":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"7":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"8":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"9":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"10":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"11":[["ce                                                                                                  ",{}]],"12":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"13":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"14":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"15":[["                j denloop                               #keep looping                               ",{}]],"16":[["enddenloop:                                                                                         ",{}]],"17":[["        #begin restoring                                                                            ",{}]],"18":[["        lw $t0, ($sp)                                                                               ",{}]],"19":[["        lw $t1, 4($sp)                                                                              ",{}]],"20":[["        lw $t2, 8($sp)                                                                              ",{}]],"21":[["        lw $t3, 12($sp)                                                                             ",{}]],"22":[["        lw $t4, 16($sp)                                                                             ",{}]],"23":[["        lw $t5, 20($sp)                                                                             ",{}]],"24":[["        lw $t6, 24($sp)                                                                             ",{}]],"25":[["        lw $t7, 28($sp)                                                                             ",{}]],"26":[["        lw $t8, 32($sp)                                                                             ",{}]],"27":[["        lw $t9, 36($sp)                                                                             ",{}]],"28":[["        lw $s0, 40($sp)                                                                             ",{}]],"29":[["        lw $s1, 44($sp)                                                                             ",{}]],"30":[["        lw $s2, 48($sp)                                                                             ",{}]],"31":[["        lw $s3, 52($sp)                                                                             ",{}]],"32":[["        lw $s5, 56($sp)                                                                             ",{}]],"33":[["        lw $s6, 60($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10105,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                jal decryptblock                #otherwise, decrypt                                 ",{}]],"1":[["                j denlr                                 #and skip the encryption because no         ",{}]],"2":[["denlen: jal encryptblock                                                                            ",{}]],"3":[["denlr:                                                                                              ",{}]],"4":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"5":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"6":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"7":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"8":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"9":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"10":[["ce                                                                                                  ",{}]],"11":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"12":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"13":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"14":[["                j denloop                               #keep looping                               ",{}]],"15":[["enddenloop:                                                                                         ",{}]],"16":[["        #begin restoring                                                                            ",{}]],"17":[["        lw $t0, ($sp)                                                                               ",{}]],"18":[["        lw $t1, 4($sp)                                                                              ",{}]],"19":[["        lw $t2, 8($sp)                                                                              ",{}]],"20":[["        lw $t3, 12($sp)                                                                             ",{}]],"21":[["        lw $t4, 16($sp)                                                                             ",{}]],"22":[["        lw $t5, 20($sp)                                                                             ",{}]],"23":[["        lw $t6, 24($sp)                                                                             ",{}]],"24":[["        lw $t7, 28($sp)                                                                             ",{}]],"25":[["        lw $t8, 32($sp)                                                                             ",{}]],"26":[["        lw $t9, 36($sp)                                                                             ",{}]],"27":[["        lw $s0, 40($sp)                                                                             ",{}]],"28":[["        lw $s1, 44($sp)                                                                             ",{}]],"29":[["        lw $s2, 48($sp)                                                                             ",{}]],"30":[["        lw $s3, 52($sp)                                                                             ",{}]],"31":[["        lw $s5, 56($sp)                                                                             ",{}]],"32":[["        lw $s6, 60($sp)                                                                             ",{}]],"33":[["        lw $s7, 64($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10009,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["                j denlr                                 #and skip the encryption because no         ",{}]],"1":[["denlen: jal encryptblock                                                                            ",{}]],"2":[["denlr:                                                                                              ",{}]],"3":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"4":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"5":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"6":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"7":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"8":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"9":[["ce                                                                                                  ",{}]],"10":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"11":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"12":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"13":[["                j denloop                               #keep looping                               ",{}]],"14":[["enddenloop:                                                                                         ",{}]],"15":[["        #begin restoring                                                                            ",{}]],"16":[["        lw $t0, ($sp)                                                                               ",{}]],"17":[["        lw $t1, 4($sp)                                                                              ",{}]],"18":[["        lw $t2, 8($sp)                                                                              ",{}]],"19":[["        lw $t3, 12($sp)                                                                             ",{}]],"20":[["        lw $t4, 16($sp)                                                                             ",{}]],"21":[["        lw $t5, 20($sp)                                                                             ",{}]],"22":[["        lw $t6, 24($sp)                                                                             ",{}]],"23":[["        lw $t7, 28($sp)                                                                             ",{}]],"24":[["        lw $t8, 32($sp)                                                                             ",{}]],"25":[["        lw $t9, 36($sp)                                                                             ",{}]],"26":[["        lw $s0, 40($sp)                                                                             ",{}]],"27":[["        lw $s1, 44($sp)                                                                             ",{}]],"28":[["        lw $s2, 48($sp)                                                                             ",{}]],"29":[["        lw $s3, 52($sp)                                                                             ",{}]],"30":[["        lw $s5, 56($sp)                                                                             ",{}]],"31":[["        lw $s6, 60($sp)                                                                             ",{}]],"32":[["        lw $s7, 64($sp)                                                                             ",{}]],"33":[["        lw $ra, 68($sp)                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100118,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["denlen: jal encryptblock                                                                            ",{}]],"1":[["denlr:                                                                                              ",{}]],"2":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"3":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"4":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"5":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"6":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"7":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"8":[["ce                                                                                                  ",{}]],"9":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"10":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"11":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"12":[["                j denloop                               #keep looping                               ",{}]],"13":[["enddenloop:                                                                                         ",{}]],"14":[["        #begin restoring                                                                            ",{}]],"15":[["        lw $t0, ($sp)                                                                               ",{}]],"16":[["        lw $t1, 4($sp)                                                                              ",{}]],"17":[["        lw $t2, 8($sp)                                                                              ",{}]],"18":[["        lw $t3, 12($sp)                                                                             ",{}]],"19":[["        lw $t4, 16($sp)                                                                             ",{}]],"20":[["        lw $t5, 20($sp)                                                                             ",{}]],"21":[["        lw $t6, 24($sp)                                                                             ",{}]],"22":[["        lw $t7, 28($sp)                                                                             ",{}]],"23":[["        lw $t8, 32($sp)                                                                             ",{}]],"24":[["        lw $t9, 36($sp)                                                                             ",{}]],"25":[["        lw $s0, 40($sp)                                                                             ",{}]],"26":[["        lw $s1, 44($sp)                                                                             ",{}]],"27":[["        lw $s2, 48($sp)                                                                             ",{}]],"28":[["        lw $s3, 52($sp)                                                                             ",{}]],"29":[["        lw $s5, 56($sp)                                                                             ",{}]],"30":[["        lw $s6, 60($sp)                                                                             ",{}]],"31":[["        lw $s7, 64($sp)                                                                             ",{}]],"32":[["        lw $ra, 68($sp)                                                                             ",{}]],"33":[["        addi $sp, $sp, -92                                                                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101413,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.9e-05,{"lines":{"0":[["denlr:                                                                                              ",{}]],"1":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"2":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"3":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"4":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"5":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"6":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"7":[["ce                                                                                                  ",{}]],"8":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"9":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"10":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"11":[["                j denloop                               #keep looping                               ",{}]],"12":[["enddenloop:                                                                                         ",{}]],"13":[["        #begin restoring                                                                            ",{}]],"14":[["        lw $t0, ($sp)                                                                               ",{}]],"15":[["        lw $t1, 4($sp)                                                                              ",{}]],"16":[["        lw $t2, 8($sp)                                                                              ",{}]],"17":[["        lw $t3, 12($sp)                                                                             ",{}]],"18":[["        lw $t4, 16($sp)                                                                             ",{}]],"19":[["        lw $t5, 20($sp)                                                                             ",{}]],"20":[["        lw $t6, 24($sp)                                                                             ",{}]],"21":[["        lw $t7, 28($sp)                                                                             ",{}]],"22":[["        lw $t8, 32($sp)                                                                             ",{}]],"23":[["        lw $t9, 36($sp)                                                                             ",{}]],"24":[["        lw $s0, 40($sp)                                                                             ",{}]],"25":[["        lw $s1, 44($sp)                                                                             ",{}]],"26":[["        lw $s2, 48($sp)                                                                             ",{}]],"27":[["        lw $s3, 52($sp)                                                                             ",{}]],"28":[["        lw $s5, 56($sp)                                                                             ",{}]],"29":[["        lw $s6, 60($sp)                                                                             ",{}]],"30":[["        lw $s7, 64($sp)                                                                             ",{}]],"31":[["        lw $ra, 68($sp)                                                                             ",{}]],"32":[["        addi $sp, $sp, -92                                                                          ",{}]],"33":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100886,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.1e-05,{"lines":{"0":[["                lw $t0, 72($sp)                 #bring back values                                  ",{}]],"1":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"2":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"3":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"4":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"5":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"6":[["ce                                                                                                  ",{}]],"7":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"8":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"9":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"10":[["                j denloop                               #keep looping                               ",{}]],"11":[["enddenloop:                                                                                         ",{}]],"12":[["        #begin restoring                                                                            ",{}]],"13":[["        lw $t0, ($sp)                                                                               ",{}]],"14":[["        lw $t1, 4($sp)                                                                              ",{}]],"15":[["        lw $t2, 8($sp)                                                                              ",{}]],"16":[["        lw $t3, 12($sp)                                                                             ",{}]],"17":[["        lw $t4, 16($sp)                                                                             ",{}]],"18":[["        lw $t5, 20($sp)                                                                             ",{}]],"19":[["        lw $t6, 24($sp)                                                                             ",{}]],"20":[["        lw $t7, 28($sp)                                                                             ",{}]],"21":[["        lw $t8, 32($sp)                                                                             ",{}]],"22":[["        lw $t9, 36($sp)                                                                             ",{}]],"23":[["        lw $s0, 40($sp)                                                                             ",{}]],"24":[["        lw $s1, 44($sp)                                                                             ",{}]],"25":[["        lw $s2, 48($sp)                                                                             ",{}]],"26":[["        lw $s3, 52($sp)                                                                             ",{}]],"27":[["        lw $s5, 56($sp)                                                                             ",{}]],"28":[["        lw $s6, 60($sp)                                                                             ",{}]],"29":[["        lw $s7, 64($sp)                                                                             ",{}]],"30":[["        lw $ra, 68($sp)                                                                             ",{}]],"31":[["        addi $sp, $sp, -92                                                                          ",{}]],"32":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101037,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                lw $t1, 76($sp)                 #bring back values                                  ",{}]],"1":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"2":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"3":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"4":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"5":[["ce                                                                                                  ",{}]],"6":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"7":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"8":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"9":[["                j denloop                               #keep looping                               ",{}]],"10":[["enddenloop:                                                                                         ",{}]],"11":[["        #begin restoring                                                                            ",{}]],"12":[["        lw $t0, ($sp)                                                                               ",{}]],"13":[["        lw $t1, 4($sp)                                                                              ",{}]],"14":[["        lw $t2, 8($sp)                                                                              ",{}]],"15":[["        lw $t3, 12($sp)                                                                             ",{}]],"16":[["        lw $t4, 16($sp)                                                                             ",{}]],"17":[["        lw $t5, 20($sp)                                                                             ",{}]],"18":[["        lw $t6, 24($sp)                                                                             ",{}]],"19":[["        lw $t7, 28($sp)                                                                             ",{}]],"20":[["        lw $t8, 32($sp)                                                                             ",{}]],"21":[["        lw $t9, 36($sp)                                                                             ",{}]],"22":[["        lw $s0, 40($sp)                                                                             ",{}]],"23":[["        lw $s1, 44($sp)                                                                             ",{}]],"24":[["        lw $s2, 48($sp)                                                                             ",{}]],"25":[["        lw $s3, 52($sp)                                                                             ",{}]],"26":[["        lw $s5, 56($sp)                                                                             ",{}]],"27":[["        lw $s6, 60($sp)                                                                             ",{}]],"28":[["        lw $s7, 64($sp)                                                                             ",{}]],"29":[["        lw $ra, 68($sp)                                                                             ",{}]],"30":[["        addi $sp, $sp, -92                                                                          ",{}]],"31":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"32":[["                                                                                                    ",{}]],"33":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101106,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.2e-05,{"lines":{"0":[["                lw $t2, 80($sp)                 #bring back values                                  ",{}]],"1":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"2":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"3":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"4":[["ce                                                                                                  ",{}]],"5":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"6":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"7":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"8":[["                j denloop                               #keep looping                               ",{}]],"9":[["enddenloop:                                                                                         ",{}]],"10":[["        #begin restoring                                                                            ",{}]],"11":[["        lw $t0, ($sp)                                                                               ",{}]],"12":[["        lw $t1, 4($sp)                                                                              ",{}]],"13":[["        lw $t2, 8($sp)                                                                              ",{}]],"14":[["        lw $t3, 12($sp)                                                                             ",{}]],"15":[["        lw $t4, 16($sp)                                                                             ",{}]],"16":[["        lw $t5, 20($sp)                                                                             ",{}]],"17":[["        lw $t6, 24($sp)                                                                             ",{}]],"18":[["        lw $t7, 28($sp)                                                                             ",{}]],"19":[["        lw $t8, 32($sp)                                                                             ",{}]],"20":[["        lw $t9, 36($sp)                                                                             ",{}]],"21":[["        lw $s0, 40($sp)                                                                             ",{}]],"22":[["        lw $s1, 44($sp)                                                                             ",{}]],"23":[["        lw $s2, 48($sp)                                                                             ",{}]],"24":[["        lw $s3, 52($sp)                                                                             ",{}]],"25":[["        lw $s5, 56($sp)                                                                             ",{}]],"26":[["        lw $s6, 60($sp)                                                                             ",{}]],"27":[["        lw $s7, 64($sp)                                                                             ",{}]],"28":[["        lw $ra, 68($sp)                                                                             ",{}]],"29":[["        addi $sp, $sp, -92                                                                          ",{}]],"30":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"31":[["                                                                                                    ",{}]],"32":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"33":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100952,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                lw $t3, 84($sp)                 #bring back values                                  ",{}]],"1":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"2":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"3":[["ce                                                                                                  ",{}]],"4":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"5":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"6":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"7":[["                j denloop                               #keep looping                               ",{}]],"8":[["enddenloop:                                                                                         ",{}]],"9":[["        #begin restoring                                                                            ",{}]],"10":[["        lw $t0, ($sp)                                                                               ",{}]],"11":[["        lw $t1, 4($sp)                                                                              ",{}]],"12":[["        lw $t2, 8($sp)                                                                              ",{}]],"13":[["        lw $t3, 12($sp)                                                                             ",{}]],"14":[["        lw $t4, 16($sp)                                                                             ",{}]],"15":[["        lw $t5, 20($sp)                                                                             ",{}]],"16":[["        lw $t6, 24($sp)                                                                             ",{}]],"17":[["        lw $t7, 28($sp)                                                                             ",{}]],"18":[["        lw $t8, 32($sp)                                                                             ",{}]],"19":[["        lw $t9, 36($sp)                                                                             ",{}]],"20":[["        lw $s0, 40($sp)                                                                             ",{}]],"21":[["        lw $s1, 44($sp)                                                                             ",{}]],"22":[["        lw $s2, 48($sp)                                                                             ",{}]],"23":[["        lw $s3, 52($sp)                                                                             ",{}]],"24":[["        lw $s5, 56($sp)                                                                             ",{}]],"25":[["        lw $s6, 60($sp)                                                                             ",{}]],"26":[["        lw $s7, 64($sp)                                                                             ",{}]],"27":[["        lw $ra, 68($sp)                                                                             ",{}]],"28":[["        addi $sp, $sp, -92                                                                          ",{}]],"29":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"30":[["                                                                                                    ",{}]],"31":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"32":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"33":[["ill get back correctly                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100778,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.7e-05,{"lines":{"0":[["                lw $a0, 88($sp)                 #bring back moar values                             ",{}]],"1":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"2":[["ce                                                                                                  ",{}]],"3":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"4":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"5":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"6":[["                j denloop                               #keep looping                               ",{}]],"7":[["enddenloop:                                                                                         ",{}]],"8":[["        #begin restoring                                                                            ",{}]],"9":[["        lw $t0, ($sp)                                                                               ",{}]],"10":[["        lw $t1, 4($sp)                                                                              ",{}]],"11":[["        lw $t2, 8($sp)                                                                              ",{}]],"12":[["        lw $t3, 12($sp)                                                                             ",{}]],"13":[["        lw $t4, 16($sp)                                                                             ",{}]],"14":[["        lw $t5, 20($sp)                                                                             ",{}]],"15":[["        lw $t6, 24($sp)                                                                             ",{}]],"16":[["        lw $t7, 28($sp)                                                                             ",{}]],"17":[["        lw $t8, 32($sp)                                                                             ",{}]],"18":[["        lw $t9, 36($sp)                                                                             ",{}]],"19":[["        lw $s0, 40($sp)                                                                             ",{}]],"20":[["        lw $s1, 44($sp)                                                                             ",{}]],"21":[["        lw $s2, 48($sp)                                                                             ",{}]],"22":[["        lw $s3, 52($sp)                                                                             ",{}]],"23":[["        lw $s5, 56($sp)                                                                             ",{}]],"24":[["        lw $s6, 60($sp)                                                                             ",{}]],"25":[["        lw $s7, 64($sp)                                                                             ",{}]],"26":[["        lw $ra, 68($sp)                                                                             ",{}]],"27":[["        addi $sp, $sp, -92                                                                          ",{}]],"28":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"29":[["                                                                                                    ",{}]],"30":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"31":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"32":[["ill get back correctly                                                                              ",{}]],"33":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101221,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                sw $a3, ($t2)                   #store the en/decrypted a3 back in the \"i*2+1\"th pla",{}]],"1":[["ce                                                                                                  ",{}]],"2":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"3":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"4":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"5":[["                j denloop                               #keep looping                               ",{}]],"6":[["enddenloop:                                                                                         ",{}]],"7":[["        #begin restoring                                                                            ",{}]],"8":[["        lw $t0, ($sp)                                                                               ",{}]],"9":[["        lw $t1, 4($sp)                                                                              ",{}]],"10":[["        lw $t2, 8($sp)                                                                              ",{}]],"11":[["        lw $t3, 12($sp)                                                                             ",{}]],"12":[["        lw $t4, 16($sp)                                                                             ",{}]],"13":[["        lw $t5, 20($sp)                                                                             ",{}]],"14":[["        lw $t6, 24($sp)                                                                             ",{}]],"15":[["        lw $t7, 28($sp)                                                                             ",{}]],"16":[["        lw $t8, 32($sp)                                                                             ",{}]],"17":[["        lw $t9, 36($sp)                                                                             ",{}]],"18":[["        lw $s0, 40($sp)                                                                             ",{}]],"19":[["        lw $s1, 44($sp)                                                                             ",{}]],"20":[["        lw $s2, 48($sp)                                                                             ",{}]],"21":[["        lw $s3, 52($sp)                                                                             ",{}]],"22":[["        lw $s5, 56($sp)                                                                             ",{}]],"23":[["        lw $s6, 60($sp)                                                                             ",{}]],"24":[["        lw $s7, 64($sp)                                                                             ",{}]],"25":[["        lw $ra, 68($sp)                                                                             ",{}]],"26":[["        addi $sp, $sp, -92                                                                          ",{}]],"27":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"28":[["                                                                                                    ",{}]],"29":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"30":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"31":[["ill get back correctly                                                                              ",{}]],"32":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"33":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101114,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["ce                                                                                                  ",{}]],"1":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"2":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"3":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"4":[["                j denloop                               #keep looping                               ",{}]],"5":[["enddenloop:                                                                                         ",{}]],"6":[["        #begin restoring                                                                            ",{}]],"7":[["        lw $t0, ($sp)                                                                               ",{}]],"8":[["        lw $t1, 4($sp)                                                                              ",{}]],"9":[["        lw $t2, 8($sp)                                                                              ",{}]],"10":[["        lw $t3, 12($sp)                                                                             ",{}]],"11":[["        lw $t4, 16($sp)                                                                             ",{}]],"12":[["        lw $t5, 20($sp)                                                                             ",{}]],"13":[["        lw $t6, 24($sp)                                                                             ",{}]],"14":[["        lw $t7, 28($sp)                                                                             ",{}]],"15":[["        lw $t8, 32($sp)                                                                             ",{}]],"16":[["        lw $t9, 36($sp)                                                                             ",{}]],"17":[["        lw $s0, 40($sp)                                                                             ",{}]],"18":[["        lw $s1, 44($sp)                                                                             ",{}]],"19":[["        lw $s2, 48($sp)                                                                             ",{}]],"20":[["        lw $s3, 52($sp)                                                                             ",{}]],"21":[["        lw $s5, 56($sp)                                                                             ",{}]],"22":[["        lw $s6, 60($sp)                                                                             ",{}]],"23":[["        lw $s7, 64($sp)                                                                             ",{}]],"24":[["        lw $ra, 68($sp)                                                                             ",{}]],"25":[["        addi $sp, $sp, -92                                                                          ",{}]],"26":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"27":[["                                                                                                    ",{}]],"28":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"29":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"30":[["ill get back correctly                                                                              ",{}]],"31":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"32":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"33":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100915,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.2e-05,{"lines":{"0":[["                addi $t2, $t2, -4               #subtract 1 for accessing the previous item         ",{}]],"1":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"2":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"3":[["                j denloop                               #keep looping                               ",{}]],"4":[["enddenloop:                                                                                         ",{}]],"5":[["        #begin restoring                                                                            ",{}]],"6":[["        lw $t0, ($sp)                                                                               ",{}]],"7":[["        lw $t1, 4($sp)                                                                              ",{}]],"8":[["        lw $t2, 8($sp)                                                                              ",{}]],"9":[["        lw $t3, 12($sp)                                                                             ",{}]],"10":[["        lw $t4, 16($sp)                                                                             ",{}]],"11":[["        lw $t5, 20($sp)                                                                             ",{}]],"12":[["        lw $t6, 24($sp)                                                                             ",{}]],"13":[["        lw $t7, 28($sp)                                                                             ",{}]],"14":[["        lw $t8, 32($sp)                                                                             ",{}]],"15":[["        lw $t9, 36($sp)                                                                             ",{}]],"16":[["        lw $s0, 40($sp)                                                                             ",{}]],"17":[["        lw $s1, 44($sp)                                                                             ",{}]],"18":[["        lw $s2, 48($sp)                                                                             ",{}]],"19":[["        lw $s3, 52($sp)                                                                             ",{}]],"20":[["        lw $s5, 56($sp)                                                                             ",{}]],"21":[["        lw $s6, 60($sp)                                                                             ",{}]],"22":[["        lw $s7, 64($sp)                                                                             ",{}]],"23":[["        lw $ra, 68($sp)                                                                             ",{}]],"24":[["        addi $sp, $sp, -92                                                                          ",{}]],"25":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"26":[["                                                                                                    ",{}]],"27":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"28":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"29":[["ill get back correctly                                                                              ",{}]],"30":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"31":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"32":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100682,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.1e-05,{"lines":{"0":[["                sw $a2, ($t2)                   #store the en/decrypted a2 back in the \"i*2\"th place",{}]],"1":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"2":[["                j denloop                               #keep looping                               ",{}]],"3":[["enddenloop:                                                                                         ",{}]],"4":[["        #begin restoring                                                                            ",{}]],"5":[["        lw $t0, ($sp)                                                                               ",{}]],"6":[["        lw $t1, 4($sp)                                                                              ",{}]],"7":[["        lw $t2, 8($sp)                                                                              ",{}]],"8":[["        lw $t3, 12($sp)                                                                             ",{}]],"9":[["        lw $t4, 16($sp)                                                                             ",{}]],"10":[["        lw $t5, 20($sp)                                                                             ",{}]],"11":[["        lw $t6, 24($sp)                                                                             ",{}]],"12":[["        lw $t7, 28($sp)                                                                             ",{}]],"13":[["        lw $t8, 32($sp)                                                                             ",{}]],"14":[["        lw $t9, 36($sp)                                                                             ",{}]],"15":[["        lw $s0, 40($sp)                                                                             ",{}]],"16":[["        lw $s1, 44($sp)                                                                             ",{}]],"17":[["        lw $s2, 48($sp)                                                                             ",{}]],"18":[["        lw $s3, 52($sp)                                                                             ",{}]],"19":[["        lw $s5, 56($sp)                                                                             ",{}]],"20":[["        lw $s6, 60($sp)                                                                             ",{}]],"21":[["        lw $s7, 64($sp)                                                                             ",{}]],"22":[["        lw $ra, 68($sp)                                                                             ",{}]],"23":[["        addi $sp, $sp, -92                                                                          ",{}]],"24":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"25":[["                                                                                                    ",{}]],"26":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"27":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"28":[["ill get back correctly                                                                              ",{}]],"29":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"30":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"31":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"33":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100958,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.899999999999999e-05,{"lines":{"0":[["                addi $t0, $t0, 1                #increment loop variable                            ",{}]],"1":[["                j denloop                               #keep looping                               ",{}]],"2":[["enddenloop:                                                                                         ",{}]],"3":[["        #begin restoring                                                                            ",{}]],"4":[["        lw $t0, ($sp)                                                                               ",{}]],"5":[["        lw $t1, 4($sp)                                                                              ",{}]],"6":[["        lw $t2, 8($sp)                                                                              ",{}]],"7":[["        lw $t3, 12($sp)                                                                             ",{}]],"8":[["        lw $t4, 16($sp)                                                                             ",{}]],"9":[["        lw $t5, 20($sp)                                                                             ",{}]],"10":[["        lw $t6, 24($sp)                                                                             ",{}]],"11":[["        lw $t7, 28($sp)                                                                             ",{}]],"12":[["        lw $t8, 32($sp)                                                                             ",{}]],"13":[["        lw $t9, 36($sp)                                                                             ",{}]],"14":[["        lw $s0, 40($sp)                                                                             ",{}]],"15":[["        lw $s1, 44($sp)                                                                             ",{}]],"16":[["        lw $s2, 48($sp)                                                                             ",{}]],"17":[["        lw $s3, 52($sp)                                                                             ",{}]],"18":[["        lw $s5, 56($sp)                                                                             ",{}]],"19":[["        lw $s6, 60($sp)                                                                             ",{}]],"20":[["        lw $s7, 64($sp)                                                                             ",{}]],"21":[["        lw $ra, 68($sp)                                                                             ",{}]],"22":[["        addi $sp, $sp, -92                                                                          ",{}]],"23":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"24":[["                                                                                                    ",{}]],"25":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"26":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"27":[["ill get back correctly                                                                              ",{}]],"28":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"29":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"30":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"32":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"33":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101108,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                j denloop                               #keep looping                               ",{}]],"1":[["enddenloop:                                                                                         ",{}]],"2":[["        #begin restoring                                                                            ",{}]],"3":[["        lw $t0, ($sp)                                                                               ",{}]],"4":[["        lw $t1, 4($sp)                                                                              ",{}]],"5":[["        lw $t2, 8($sp)                                                                              ",{}]],"6":[["        lw $t3, 12($sp)                                                                             ",{}]],"7":[["        lw $t4, 16($sp)                                                                             ",{}]],"8":[["        lw $t5, 20($sp)                                                                             ",{}]],"9":[["        lw $t6, 24($sp)                                                                             ",{}]],"10":[["        lw $t7, 28($sp)                                                                             ",{}]],"11":[["        lw $t8, 32($sp)                                                                             ",{}]],"12":[["        lw $t9, 36($sp)                                                                             ",{}]],"13":[["        lw $s0, 40($sp)                                                                             ",{}]],"14":[["        lw $s1, 44($sp)                                                                             ",{}]],"15":[["        lw $s2, 48($sp)                                                                             ",{}]],"16":[["        lw $s3, 52($sp)                                                                             ",{}]],"17":[["        lw $s5, 56($sp)                                                                             ",{}]],"18":[["        lw $s6, 60($sp)                                                                             ",{}]],"19":[["        lw $s7, 64($sp)                                                                             ",{}]],"20":[["        lw $ra, 68($sp)                                                                             ",{}]],"21":[["        addi $sp, $sp, -92                                                                          ",{}]],"22":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"23":[["                                                                                                    ",{}]],"24":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"25":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"26":[["ill get back correctly                                                                              ",{}]],"27":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"28":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"29":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"31":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"32":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"33":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100877,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.3e-05,{"lines":{"0":[["enddenloop:                                                                                         ",{}]],"1":[["        #begin restoring                                                                            ",{}]],"2":[["        lw $t0, ($sp)                                                                               ",{}]],"3":[["        lw $t1, 4($sp)                                                                              ",{}]],"4":[["        lw $t2, 8($sp)                                                                              ",{}]],"5":[["        lw $t3, 12($sp)                                                                             ",{}]],"6":[["        lw $t4, 16($sp)                                                                             ",{}]],"7":[["        lw $t5, 20($sp)                                                                             ",{}]],"8":[["        lw $t6, 24($sp)                                                                             ",{}]],"9":[["        lw $t7, 28($sp)                                                                             ",{}]],"10":[["        lw $t8, 32($sp)                                                                             ",{}]],"11":[["        lw $t9, 36($sp)                                                                             ",{}]],"12":[["        lw $s0, 40($sp)                                                                             ",{}]],"13":[["        lw $s1, 44($sp)                                                                             ",{}]],"14":[["        lw $s2, 48($sp)                                                                             ",{}]],"15":[["        lw $s3, 52($sp)                                                                             ",{}]],"16":[["        lw $s5, 56($sp)                                                                             ",{}]],"17":[["        lw $s6, 60($sp)                                                                             ",{}]],"18":[["        lw $s7, 64($sp)                                                                             ",{}]],"19":[["        lw $ra, 68($sp)                                                                             ",{}]],"20":[["        addi $sp, $sp, -92                                                                          ",{}]],"21":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"22":[["                                                                                                    ",{}]],"23":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"24":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"25":[["ill get back correctly                                                                              ",{}]],"26":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"27":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"28":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"30":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"31":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"32":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"33":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09966700000000001,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        #begin restoring                                                                            ",{}]],"1":[["        lw $t0, ($sp)                                                                               ",{}]],"2":[["        lw $t1, 4($sp)                                                                              ",{}]],"3":[["        lw $t2, 8($sp)                                                                              ",{}]],"4":[["        lw $t3, 12($sp)                                                                             ",{}]],"5":[["        lw $t4, 16($sp)                                                                             ",{}]],"6":[["        lw $t5, 20($sp)                                                                             ",{}]],"7":[["        lw $t6, 24($sp)                                                                             ",{}]],"8":[["        lw $t7, 28($sp)                                                                             ",{}]],"9":[["        lw $t8, 32($sp)                                                                             ",{}]],"10":[["        lw $t9, 36($sp)                                                                             ",{}]],"11":[["        lw $s0, 40($sp)                                                                             ",{}]],"12":[["        lw $s1, 44($sp)                                                                             ",{}]],"13":[["        lw $s2, 48($sp)                                                                             ",{}]],"14":[["        lw $s3, 52($sp)                                                                             ",{}]],"15":[["        lw $s5, 56($sp)                                                                             ",{}]],"16":[["        lw $s6, 60($sp)                                                                             ",{}]],"17":[["        lw $s7, 64($sp)                                                                             ",{}]],"18":[["        lw $ra, 68($sp)                                                                             ",{}]],"19":[["        addi $sp, $sp, -92                                                                          ",{}]],"20":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"21":[["                                                                                                    ",{}]],"22":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"23":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"24":[["ill get back correctly                                                                              ",{}]],"25":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"26":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"27":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"29":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"30":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"31":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"32":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"33":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100301,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        lw $t0, ($sp)                                                                               ",{}]],"1":[["        lw $t1, 4($sp)                                                                              ",{}]],"2":[["        lw $t2, 8($sp)                                                                              ",{}]],"3":[["        lw $t3, 12($sp)                                                                             ",{}]],"4":[["        lw $t4, 16($sp)                                                                             ",{}]],"5":[["        lw $t5, 20($sp)                                                                             ",{}]],"6":[["        lw $t6, 24($sp)                                                                             ",{}]],"7":[["        lw $t7, 28($sp)                                                                             ",{}]],"8":[["        lw $t8, 32($sp)                                                                             ",{}]],"9":[["        lw $t9, 36($sp)                                                                             ",{}]],"10":[["        lw $s0, 40($sp)                                                                             ",{}]],"11":[["        lw $s1, 44($sp)                                                                             ",{}]],"12":[["        lw $s2, 48($sp)                                                                             ",{}]],"13":[["        lw $s3, 52($sp)                                                                             ",{}]],"14":[["        lw $s5, 56($sp)                                                                             ",{}]],"15":[["        lw $s6, 60($sp)                                                                             ",{}]],"16":[["        lw $s7, 64($sp)                                                                             ",{}]],"17":[["        lw $ra, 68($sp)                                                                             ",{}]],"18":[["        addi $sp, $sp, -92                                                                          ",{}]],"19":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"20":[["                                                                                                    ",{}]],"21":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"22":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"23":[["ill get back correctly                                                                              ",{}]],"24":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"25":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"26":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"28":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"29":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"30":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"31":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"32":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"33":[["                jal f                                   #call f                                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100094,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["        lw $t1, 4($sp)                                                                              ",{}]],"1":[["        lw $t2, 8($sp)                                                                              ",{}]],"2":[["        lw $t3, 12($sp)                                                                             ",{}]],"3":[["        lw $t4, 16($sp)                                                                             ",{}]],"4":[["        lw $t5, 20($sp)                                                                             ",{}]],"5":[["        lw $t6, 24($sp)                                                                             ",{}]],"6":[["        lw $t7, 28($sp)                                                                             ",{}]],"7":[["        lw $t8, 32($sp)                                                                             ",{}]],"8":[["        lw $t9, 36($sp)                                                                             ",{}]],"9":[["        lw $s0, 40($sp)                                                                             ",{}]],"10":[["        lw $s1, 44($sp)                                                                             ",{}]],"11":[["        lw $s2, 48($sp)                                                                             ",{}]],"12":[["        lw $s3, 52($sp)                                                                             ",{}]],"13":[["        lw $s5, 56($sp)                                                                             ",{}]],"14":[["        lw $s6, 60($sp)                                                                             ",{}]],"15":[["        lw $s7, 64($sp)                                                                             ",{}]],"16":[["        lw $ra, 68($sp)                                                                             ",{}]],"17":[["        addi $sp, $sp, -92                                                                          ",{}]],"18":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"19":[["                                                                                                    ",{}]],"20":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"21":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"22":[["ill get back correctly                                                                              ",{}]],"23":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"24":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"25":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"27":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"28":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"29":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"30":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"31":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"32":[["                jal f                                   #call f                                     ",{}]],"33":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101319,{"lines":{"0":[["        lw $t2, 8($sp)                                                                              ",{}]],"1":[["        lw $t3, 12($sp)                                                                             ",{}]],"2":[["        lw $t4, 16($sp)                                                                             ",{}]],"3":[["        lw $t5, 20($sp)                                                                             ",{}]],"4":[["        lw $t6, 24($sp)                                                                             ",{}]],"5":[["        lw $t7, 28($sp)                                                                             ",{}]],"6":[["        lw $t8, 32($sp)                                                                             ",{}]],"7":[["        lw $t9, 36($sp)                                                                             ",{}]],"8":[["        lw $s0, 40($sp)                                                                             ",{}]],"9":[["        lw $s1, 44($sp)                                                                             ",{}]],"10":[["        lw $s2, 48($sp)                                                                             ",{}]],"11":[["        lw $s3, 52($sp)                                                                             ",{}]],"12":[["        lw $s5, 56($sp)                                                                             ",{}]],"13":[["        lw $s6, 60($sp)                                                                             ",{}]],"14":[["        lw $s7, 64($sp)                                                                             ",{}]],"15":[["        lw $ra, 68($sp)                                                                             ",{}]],"16":[["        addi $sp, $sp, -92                                                                          ",{}]],"17":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"18":[["                                                                                                    ",{}]],"19":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"20":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"21":[["ill get back correctly                                                                              ",{}]],"22":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"23":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"24":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"26":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"27":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"28":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"29":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"30":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"31":[["                jal f                                   #call f                                     ",{}]],"32":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"33":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]]}}],[0.10007,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["        lw $t3, 12($sp)                                                                             ",{}]],"1":[["        lw $t4, 16($sp)                                                                             ",{}]],"2":[["        lw $t5, 20($sp)                                                                             ",{}]],"3":[["        lw $t6, 24($sp)                                                                             ",{}]],"4":[["        lw $t7, 28($sp)                                                                             ",{}]],"5":[["        lw $t8, 32($sp)                                                                             ",{}]],"6":[["        lw $t9, 36($sp)                                                                             ",{}]],"7":[["        lw $s0, 40($sp)                                                                             ",{}]],"8":[["        lw $s1, 44($sp)                                                                             ",{}]],"9":[["        lw $s2, 48($sp)                                                                             ",{}]],"10":[["        lw $s3, 52($sp)                                                                             ",{}]],"11":[["        lw $s5, 56($sp)                                                                             ",{}]],"12":[["        lw $s6, 60($sp)                                                                             ",{}]],"13":[["        lw $s7, 64($sp)                                                                             ",{}]],"14":[["        lw $ra, 68($sp)                                                                             ",{}]],"15":[["        addi $sp, $sp, -92                                                                          ",{}]],"16":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"17":[["                                                                                                    ",{}]],"18":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"19":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"20":[["ill get back correctly                                                                              ",{}]],"21":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"22":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"23":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"25":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"26":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"27":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"28":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"29":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"30":[["                jal f                                   #call f                                     ",{}]],"31":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"32":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"33":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100439,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["        lw $t4, 16($sp)                                                                             ",{}]],"1":[["        lw $t5, 20($sp)                                                                             ",{}]],"2":[["        lw $t6, 24($sp)                                                                             ",{}]],"3":[["        lw $t7, 28($sp)                                                                             ",{}]],"4":[["        lw $t8, 32($sp)                                                                             ",{}]],"5":[["        lw $t9, 36($sp)                                                                             ",{}]],"6":[["        lw $s0, 40($sp)                                                                             ",{}]],"7":[["        lw $s1, 44($sp)                                                                             ",{}]],"8":[["        lw $s2, 48($sp)                                                                             ",{}]],"9":[["        lw $s3, 52($sp)                                                                             ",{}]],"10":[["        lw $s5, 56($sp)                                                                             ",{}]],"11":[["        lw $s6, 60($sp)                                                                             ",{}]],"12":[["        lw $s7, 64($sp)                                                                             ",{}]],"13":[["        lw $ra, 68($sp)                                                                             ",{}]],"14":[["        addi $sp, $sp, -92                                                                          ",{}]],"15":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"16":[["                                                                                                    ",{}]],"17":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"18":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"19":[["ill get back correctly                                                                              ",{}]],"20":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"21":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"22":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"24":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"25":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"26":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"27":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"28":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"29":[["                jal f                                   #call f                                     ",{}]],"30":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"31":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"32":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"33":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100362,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        lw $t5, 20($sp)                                                                             ",{}]],"1":[["        lw $t6, 24($sp)                                                                             ",{}]],"2":[["        lw $t7, 28($sp)                                                                             ",{}]],"3":[["        lw $t8, 32($sp)                                                                             ",{}]],"4":[["        lw $t9, 36($sp)                                                                             ",{}]],"5":[["        lw $s0, 40($sp)                                                                             ",{}]],"6":[["        lw $s1, 44($sp)                                                                             ",{}]],"7":[["        lw $s2, 48($sp)                                                                             ",{}]],"8":[["        lw $s3, 52($sp)                                                                             ",{}]],"9":[["        lw $s5, 56($sp)                                                                             ",{}]],"10":[["        lw $s6, 60($sp)                                                                             ",{}]],"11":[["        lw $s7, 64($sp)                                                                             ",{}]],"12":[["        lw $ra, 68($sp)                                                                             ",{}]],"13":[["        addi $sp, $sp, -92                                                                          ",{}]],"14":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"15":[["                                                                                                    ",{}]],"16":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"17":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"18":[["ill get back correctly                                                                              ",{}]],"19":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"20":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"21":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"23":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"24":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"25":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"26":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"27":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"28":[["                jal f                                   #call f                                     ",{}]],"29":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"30":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"31":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"32":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"33":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099922,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        lw $t6, 24($sp)                                                                             ",{}]],"1":[["        lw $t7, 28($sp)                                                                             ",{}]],"2":[["        lw $t8, 32($sp)                                                                             ",{}]],"3":[["        lw $t9, 36($sp)                                                                             ",{}]],"4":[["        lw $s0, 40($sp)                                                                             ",{}]],"5":[["        lw $s1, 44($sp)                                                                             ",{}]],"6":[["        lw $s2, 48($sp)                                                                             ",{}]],"7":[["        lw $s3, 52($sp)                                                                             ",{}]],"8":[["        lw $s5, 56($sp)                                                                             ",{}]],"9":[["        lw $s6, 60($sp)                                                                             ",{}]],"10":[["        lw $s7, 64($sp)                                                                             ",{}]],"11":[["        lw $ra, 68($sp)                                                                             ",{}]],"12":[["        addi $sp, $sp, -92                                                                          ",{}]],"13":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"14":[["                                                                                                    ",{}]],"15":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"16":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"17":[["ill get back correctly                                                                              ",{}]],"18":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"19":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"20":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"22":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"23":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"24":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"25":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"26":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"27":[["                jal f                                   #call f                                     ",{}]],"28":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"29":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"30":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"31":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"32":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"33":[["                j ebloop                                        #continue the loop                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100433,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.9e-05,{"lines":{"0":[["        lw $t7, 28($sp)                                                                             ",{}]],"1":[["        lw $t8, 32($sp)                                                                             ",{}]],"2":[["        lw $t9, 36($sp)                                                                             ",{}]],"3":[["        lw $s0, 40($sp)                                                                             ",{}]],"4":[["        lw $s1, 44($sp)                                                                             ",{}]],"5":[["        lw $s2, 48($sp)                                                                             ",{}]],"6":[["        lw $s3, 52($sp)                                                                             ",{}]],"7":[["        lw $s5, 56($sp)                                                                             ",{}]],"8":[["        lw $s6, 60($sp)                                                                             ",{}]],"9":[["        lw $s7, 64($sp)                                                                             ",{}]],"10":[["        lw $ra, 68($sp)                                                                             ",{}]],"11":[["        addi $sp, $sp, -92                                                                          ",{}]],"12":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"13":[["                                                                                                    ",{}]],"14":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"15":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"16":[["ill get back correctly                                                                              ",{}]],"17":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"18":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"19":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"21":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"22":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"23":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"24":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"25":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"26":[["                jal f                                   #call f                                     ",{}]],"27":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"28":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"29":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"30":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"31":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"32":[["                j ebloop                                        #continue the loop                  ",{}]],"33":[["endebl:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101146,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.6e-05,{"lines":{"0":[["        lw $t8, 32($sp)                                                                             ",{}]],"1":[["        lw $t9, 36($sp)                                                                             ",{}]],"2":[["        lw $s0, 40($sp)                                                                             ",{}]],"3":[["        lw $s1, 44($sp)                                                                             ",{}]],"4":[["        lw $s2, 48($sp)                                                                             ",{}]],"5":[["        lw $s3, 52($sp)                                                                             ",{}]],"6":[["        lw $s5, 56($sp)                                                                             ",{}]],"7":[["        lw $s6, 60($sp)                                                                             ",{}]],"8":[["        lw $s7, 64($sp)                                                                             ",{}]],"9":[["        lw $ra, 68($sp)                                                                             ",{}]],"10":[["        addi $sp, $sp, -92                                                                          ",{}]],"11":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"12":[["                                                                                                    ",{}]],"13":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"14":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"15":[["ill get back correctly                                                                              ",{}]],"16":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"17":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"18":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"20":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"21":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"22":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"23":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"24":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"25":[["                jal f                                   #call f                                     ",{}]],"26":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"27":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"28":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"29":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"30":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"31":[["                j ebloop                                        #continue the loop                  ",{}]],"32":[["endebl:                                                                                             ",{}]],"33":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10083,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        lw $t9, 36($sp)                                                                             ",{}]],"1":[["        lw $s0, 40($sp)                                                                             ",{}]],"2":[["        lw $s1, 44($sp)                                                                             ",{}]],"3":[["        lw $s2, 48($sp)                                                                             ",{}]],"4":[["        lw $s3, 52($sp)                                                                             ",{}]],"5":[["        lw $s5, 56($sp)                                                                             ",{}]],"6":[["        lw $s6, 60($sp)                                                                             ",{}]],"7":[["        lw $s7, 64($sp)                                                                             ",{}]],"8":[["        lw $ra, 68($sp)                                                                             ",{}]],"9":[["        addi $sp, $sp, -92                                                                          ",{}]],"10":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"11":[["                                                                                                    ",{}]],"12":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"13":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"14":[["ill get back correctly                                                                              ",{}]],"15":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"16":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"17":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"19":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"20":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"21":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"22":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"23":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"24":[["                jal f                                   #call f                                     ",{}]],"25":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"26":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"27":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"28":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"29":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"30":[["                j ebloop                                        #continue the loop                  ",{}]],"31":[["endebl:                                                                                             ",{}]],"32":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"33":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100596,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        lw $s0, 40($sp)                                                                             ",{}]],"1":[["        lw $s1, 44($sp)                                                                             ",{}]],"2":[["        lw $s2, 48($sp)                                                                             ",{}]],"3":[["        lw $s3, 52($sp)                                                                             ",{}]],"4":[["        lw $s5, 56($sp)                                                                             ",{}]],"5":[["        lw $s6, 60($sp)                                                                             ",{}]],"6":[["        lw $s7, 64($sp)                                                                             ",{}]],"7":[["        lw $ra, 68($sp)                                                                             ",{}]],"8":[["        addi $sp, $sp, -92                                                                          ",{}]],"9":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"10":[["                                                                                                    ",{}]],"11":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"12":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"13":[["ill get back correctly                                                                              ",{}]],"14":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"15":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"16":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"18":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"19":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"20":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"21":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"22":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"23":[["                jal f                                   #call f                                     ",{}]],"24":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"25":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"26":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"27":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"28":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"29":[["                j ebloop                                        #continue the loop                  ",{}]],"30":[["endebl:                                                                                             ",{}]],"31":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"32":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"33":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101114,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        lw $s1, 44($sp)                                                                             ",{}]],"1":[["        lw $s2, 48($sp)                                                                             ",{}]],"2":[["        lw $s3, 52($sp)                                                                             ",{}]],"3":[["        lw $s5, 56($sp)                                                                             ",{}]],"4":[["        lw $s6, 60($sp)                                                                             ",{}]],"5":[["        lw $s7, 64($sp)                                                                             ",{}]],"6":[["        lw $ra, 68($sp)                                                                             ",{}]],"7":[["        addi $sp, $sp, -92                                                                          ",{}]],"8":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"9":[["                                                                                                    ",{}]],"10":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"11":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"12":[["ill get back correctly                                                                              ",{}]],"13":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"14":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"15":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"17":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"18":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"19":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"20":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"21":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"22":[["                jal f                                   #call f                                     ",{}]],"23":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"24":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"25":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"26":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"27":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"28":[["                j ebloop                                        #continue the loop                  ",{}]],"29":[["endebl:                                                                                             ",{}]],"30":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"31":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"32":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"33":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100996,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        lw $s2, 48($sp)                                                                             ",{}]],"1":[["        lw $s3, 52($sp)                                                                             ",{}]],"2":[["        lw $s5, 56($sp)                                                                             ",{}]],"3":[["        lw $s6, 60($sp)                                                                             ",{}]],"4":[["        lw $s7, 64($sp)                                                                             ",{}]],"5":[["        lw $ra, 68($sp)                                                                             ",{}]],"6":[["        addi $sp, $sp, -92                                                                          ",{}]],"7":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"8":[["                                                                                                    ",{}]],"9":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"10":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"11":[["ill get back correctly                                                                              ",{}]],"12":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"13":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"14":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"16":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"17":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"18":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"19":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"20":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"21":[["                jal f                                   #call f                                     ",{}]],"22":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"23":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"24":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"25":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"26":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"27":[["                j ebloop                                        #continue the loop                  ",{}]],"28":[["endebl:                                                                                             ",{}]],"29":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"30":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"31":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"32":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"33":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100916,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["        lw $s3, 52($sp)                                                                             ",{}]],"1":[["        lw $s5, 56($sp)                                                                             ",{}]],"2":[["        lw $s6, 60($sp)                                                                             ",{}]],"3":[["        lw $s7, 64($sp)                                                                             ",{}]],"4":[["        lw $ra, 68($sp)                                                                             ",{}]],"5":[["        addi $sp, $sp, -92                                                                          ",{}]],"6":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"7":[["                                                                                                    ",{}]],"8":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"9":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"10":[["ill get back correctly                                                                              ",{}]],"11":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"12":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"13":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"15":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"16":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"17":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"18":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"19":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"20":[["                jal f                                   #call f                                     ",{}]],"21":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"22":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"23":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"24":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"25":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"26":[["                j ebloop                                        #continue the loop                  ",{}]],"27":[["endebl:                                                                                             ",{}]],"28":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"29":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"30":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"31":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"32":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"33":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101102,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.000000000000001e-05,{"lines":{"0":[["        lw $s5, 56($sp)                                                                             ",{}]],"1":[["        lw $s6, 60($sp)                                                                             ",{}]],"2":[["        lw $s7, 64($sp)                                                                             ",{}]],"3":[["        lw $ra, 68($sp)                                                                             ",{}]],"4":[["        addi $sp, $sp, -92                                                                          ",{}]],"5":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"6":[["                                                                                                    ",{}]],"7":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"8":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"9":[["ill get back correctly                                                                              ",{}]],"10":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"11":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"12":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"14":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"15":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"16":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"17":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"18":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"19":[["                jal f                                   #call f                                     ",{}]],"20":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"21":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"22":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"23":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"24":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"25":[["                j ebloop                                        #continue the loop                  ",{}]],"26":[["endebl:                                                                                             ",{}]],"27":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"28":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"29":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"30":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"31":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"32":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"33":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09995,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        lw $s6, 60($sp)                                                                             ",{}]],"1":[["        lw $s7, 64($sp)                                                                             ",{}]],"2":[["        lw $ra, 68($sp)                                                                             ",{}]],"3":[["        addi $sp, $sp, -92                                                                          ",{}]],"4":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"5":[["                                                                                                    ",{}]],"6":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"7":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"8":[["ill get back correctly                                                                              ",{}]],"9":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"10":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"11":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"13":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"14":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"15":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"16":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"17":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"18":[["                jal f                                   #call f                                     ",{}]],"19":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"20":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"21":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"22":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"23":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"24":[["                j ebloop                                        #continue the loop                  ",{}]],"25":[["endebl:                                                                                             ",{}]],"26":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"27":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"28":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"29":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"30":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"31":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"32":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"33":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100982,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        lw $s7, 64($sp)                                                                             ",{}]],"1":[["        lw $ra, 68($sp)                                                                             ",{}]],"2":[["        addi $sp, $sp, -92                                                                          ",{}]],"3":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"4":[["                                                                                                    ",{}]],"5":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"6":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"7":[["ill get back correctly                                                                              ",{}]],"8":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"9":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"10":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"12":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"13":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"14":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"15":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"16":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"17":[["                jal f                                   #call f                                     ",{}]],"18":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"19":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"20":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"21":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"22":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"23":[["                j ebloop                                        #continue the loop                  ",{}]],"24":[["endebl:                                                                                             ",{}]],"25":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"26":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"27":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"28":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"29":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"30":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"31":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"32":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"33":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101131,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[9.500000000000001e-05,{"lines":{"0":[["        lw $ra, 68($sp)                                                                             ",{}]],"1":[["        addi $sp, $sp, -92                                                                          ",{}]],"2":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"3":[["                                                                                                    ",{}]],"4":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"5":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"6":[["ill get back correctly                                                                              ",{}]],"7":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"8":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"9":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"11":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"12":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"13":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"14":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"15":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"16":[["                jal f                                   #call f                                     ",{}]],"17":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"18":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"19":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"20":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"21":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"22":[["                j ebloop                                        #continue the loop                  ",{}]],"23":[["endebl:                                                                                             ",{}]],"24":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"25":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"26":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"27":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"28":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"29":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"30":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"31":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"32":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"33":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100806,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["        addi $sp, $sp, -92                                                                          ",{}]],"1":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"2":[["                                                                                                    ",{}]],"3":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"4":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"5":[["ill get back correctly                                                                              ",{}]],"6":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"7":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"8":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"10":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"11":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"12":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"13":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"14":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"15":[["                jal f                                   #call f                                     ",{}]],"16":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"17":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"18":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"19":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"20":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"21":[["                j ebloop                                        #continue the loop                  ",{}]],"22":[["endebl:                                                                                             ",{}]],"23":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"24":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"25":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"26":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"27":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"28":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"29":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"30":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"31":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"32":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"33":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100823,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["        jr $ra                                  #jump back to where we came from                    ",{}]],"1":[["                                                                                                    ",{}]],"2":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"3":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"4":[["ill get back correctly                                                                              ",{}]],"5":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"6":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"7":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"9":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"10":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"11":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"12":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"13":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"14":[["                jal f                                   #call f                                     ",{}]],"15":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"16":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"17":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"18":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"19":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"20":[["                j ebloop                                        #continue the loop                  ",{}]],"21":[["endebl:                                                                                             ",{}]],"22":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"23":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"24":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"25":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"26":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"27":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"28":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"29":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"30":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"31":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"32":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"33":[["        jr $ra                                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100614,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"2":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"3":[["ill get back correctly                                                                              ",{}]],"4":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"5":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"6":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"8":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"9":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"10":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"11":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"12":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"13":[["                jal f                                   #call f                                     ",{}]],"14":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"15":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"16":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"17":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"18":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"19":[["                j ebloop                                        #continue the loop                  ",{}]],"20":[["endebl:                                                                                             ",{}]],"21":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"22":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"23":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"24":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"25":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"26":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"27":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"28":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"29":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"30":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"31":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"32":[["        jr $ra                                                                                      ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101107,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["encryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"1":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"2":[["ill get back correctly                                                                              ",{}]],"3":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"4":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"5":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"7":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"8":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"9":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"10":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"11":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"12":[["                jal f                                   #call f                                     ",{}]],"13":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"14":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"15":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"16":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"17":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"18":[["                j ebloop                                        #continue the loop                  ",{}]],"19":[["endebl:                                                                                             ",{}]],"20":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"21":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"22":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"23":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"24":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"25":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"26":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"27":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"28":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"29":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"30":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"31":[["        jr $ra                                                                                      ",{}]],"32":[["                                                                                                    ",{}]],"33":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100938,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"1":[["ill get back correctly                                                                              ",{}]],"2":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"3":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"4":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"6":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"7":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"8":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"9":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"10":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"11":[["                jal f                                   #call f                                     ",{}]],"12":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"13":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"14":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"15":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"16":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"17":[["                j ebloop                                        #continue the loop                  ",{}]],"18":[["endebl:                                                                                             ",{}]],"19":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"20":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"21":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"22":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"23":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"24":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"25":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"26":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"27":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"28":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"29":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"30":[["        jr $ra                                                                                      ",{}]],"31":[["                                                                                                    ",{}]],"32":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"33":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100667,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["ill get back correctly                                                                              ",{}]],"1":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"2":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"3":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"5":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"6":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"7":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"8":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"9":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"10":[["                jal f                                   #call f                                     ",{}]],"11":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"12":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"13":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"14":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"15":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"16":[["                j ebloop                                        #continue the loop                  ",{}]],"17":[["endebl:                                                                                             ",{}]],"18":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"19":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"20":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"21":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"22":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"23":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"24":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"25":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"26":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"27":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"28":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"29":[["        jr $ra                                                                                      ",{}]],"30":[["                                                                                                    ",{}]],"31":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"32":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"33":[["ill get back correctly                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101078,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.2e-05,{"lines":{"0":[["        li $t0, 0                               #initialize t0 to 0 for looping(loop variable)      ",{}]],"1":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"2":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"4":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"5":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"6":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"7":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"8":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"9":[["                jal f                                   #call f                                     ",{}]],"10":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"11":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"12":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"13":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"14":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"15":[["                j ebloop                                        #continue the loop                  ",{}]],"16":[["endebl:                                                                                             ",{}]],"17":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"18":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"19":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"20":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"21":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"22":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"23":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"24":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"25":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"26":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"27":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"28":[["        jr $ra                                                                                      ",{}]],"29":[["                                                                                                    ",{}]],"30":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"31":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"32":[["ill get back correctly                                                                              ",{}]],"33":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100675,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        li $t1, 16                              #initialize t1 to 16 for looping(end condition)     ",{}]],"1":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"3":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"4":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"5":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"6":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"7":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"8":[["                jal f                                   #call f                                     ",{}]],"9":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"10":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"11":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"12":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"13":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"14":[["                j ebloop                                        #continue the loop                  ",{}]],"15":[["endebl:                                                                                             ",{}]],"16":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"17":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"18":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"19":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"20":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"21":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"22":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"23":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"24":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"25":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"26":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"27":[["        jr $ra                                                                                      ",{}]],"28":[["                                                                                                    ",{}]],"29":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"30":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"31":[["ill get back correctly                                                                              ",{}]],"32":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"33":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100256,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["ebloop: beq $t0, $t1, endebl    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"2":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"3":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"4":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"5":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"6":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"7":[["                jal f                                   #call f                                     ",{}]],"8":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"9":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"10":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"11":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"12":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"13":[["                j ebloop                                        #continue the loop                  ",{}]],"14":[["endebl:                                                                                             ",{}]],"15":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"16":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"17":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"18":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"19":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"20":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"21":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"22":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"23":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"24":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"25":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"26":[["        jr $ra                                                                                      ",{}]],"27":[["                                                                                                    ",{}]],"28":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"29":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"30":[["ill get back correctly                                                                              ",{}]],"31":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"32":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"33":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101256,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000104,{"lines":{"0":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"1":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"2":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"3":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"4":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"5":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"6":[["                jal f                                   #call f                                     ",{}]],"7":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"8":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"9":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"10":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"11":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"12":[["                j ebloop                                        #continue the loop                  ",{}]],"13":[["endebl:                                                                                             ",{}]],"14":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"15":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"16":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"17":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"18":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"19":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"20":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"21":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"22":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"23":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"24":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"25":[["        jr $ra                                                                                      ",{}]],"26":[["                                                                                                    ",{}]],"27":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"28":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"29":[["ill get back correctly                                                                              ",{}]],"30":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"31":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"32":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100013,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"1":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"2":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"3":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"4":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"5":[["                jal f                                   #call f                                     ",{}]],"6":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"7":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"8":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"9":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"10":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"11":[["                j ebloop                                        #continue the loop                  ",{}]],"12":[["endebl:                                                                                             ",{}]],"13":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"14":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"15":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"16":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"17":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"18":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"19":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"20":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"21":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"22":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"23":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"24":[["        jr $ra                                                                                      ",{}]],"25":[["                                                                                                    ",{}]],"26":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"27":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"28":[["ill get back correctly                                                                              ",{}]],"29":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"30":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"31":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"33":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100241,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"1":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"2":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"3":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"4":[["                jal f                                   #call f                                     ",{}]],"5":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"6":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"7":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"8":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"9":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"10":[["                j ebloop                                        #continue the loop                  ",{}]],"11":[["endebl:                                                                                             ",{}]],"12":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"13":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"14":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"15":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"16":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"17":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"18":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"19":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"20":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"21":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"22":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"23":[["        jr $ra                                                                                      ",{}]],"24":[["                                                                                                    ",{}]],"25":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"26":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"27":[["ill get back correctly                                                                              ",{}]],"28":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"29":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"30":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"32":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"33":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100222,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.4e-05,{"lines":{"0":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"1":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"2":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"3":[["                jal f                                   #call f                                     ",{}]],"4":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"5":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"6":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"7":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"8":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"9":[["                j ebloop                                        #continue the loop                  ",{}]],"10":[["endebl:                                                                                             ",{}]],"11":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"12":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"13":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"14":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"15":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"16":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"17":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"18":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"19":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"20":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"21":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"22":[["        jr $ra                                                                                      ",{}]],"23":[["                                                                                                    ",{}]],"24":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"25":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"26":[["ill get back correctly                                                                              ",{}]],"27":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"28":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"29":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"31":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"32":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"33":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10069,{"lines":{"0":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"1":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"2":[["                jal f                                   #call f                                     ",{}]],"3":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"4":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"5":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"6":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"7":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"8":[["                j ebloop                                        #continue the loop                  ",{}]],"9":[["endebl:                                                                                             ",{}]],"10":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"11":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"12":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"13":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"14":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"15":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"16":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"17":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"18":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"19":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"20":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"21":[["        jr $ra                                                                                      ",{}]],"22":[["                                                                                                    ",{}]],"23":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"24":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"25":[["ill get back correctly                                                                              ",{}]],"26":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"27":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"28":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"30":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"31":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"32":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"33":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]]}}],[0.100611,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"1":[["                jal f                                   #call f                                     ",{}]],"2":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"3":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"4":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"5":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"6":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"7":[["                j ebloop                                        #continue the loop                  ",{}]],"8":[["endebl:                                                                                             ",{}]],"9":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"10":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"11":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"12":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"13":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"14":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"15":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"16":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"17":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"18":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"19":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"20":[["        jr $ra                                                                                      ",{}]],"21":[["                                                                                                    ",{}]],"22":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"23":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"24":[["ill get back correctly                                                                              ",{}]],"25":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"26":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"27":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"29":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"30":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"31":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"32":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"33":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101043,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000138,{"lines":{"0":[["                jal f                                   #call f                                     ",{}]],"1":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"2":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"3":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"4":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"5":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"6":[["                j ebloop                                        #continue the loop                  ",{}]],"7":[["endebl:                                                                                             ",{}]],"8":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"9":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"10":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"11":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"12":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"13":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"14":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"15":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"16":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"17":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"18":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"19":[["        jr $ra                                                                                      ",{}]],"20":[["                                                                                                    ",{}]],"21":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"22":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"23":[["ill get back correctly                                                                              ",{}]],"24":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"25":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"26":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"28":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"29":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"30":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"31":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"32":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"33":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09972,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5e-05,{"lines":{"0":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"1":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"2":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"3":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"4":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"5":[["                j ebloop                                        #continue the loop                  ",{}]],"6":[["endebl:                                                                                             ",{}]],"7":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"8":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"9":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"10":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"11":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"12":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"13":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"14":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"15":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"16":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"17":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"18":[["        jr $ra                                                                                      ",{}]],"19":[["                                                                                                    ",{}]],"20":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"21":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"22":[["ill get back correctly                                                                              ",{}]],"23":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"24":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"25":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"27":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"28":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"29":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"30":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"31":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"32":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"33":[["                jal f                                   #call f                                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10094,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.1e-05,{"lines":{"0":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"1":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"2":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"3":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"4":[["                j ebloop                                        #continue the loop                  ",{}]],"5":[["endebl:                                                                                             ",{}]],"6":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"7":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"8":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"9":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"10":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"11":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"12":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"13":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"14":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"15":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"16":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"17":[["        jr $ra                                                                                      ",{}]],"18":[["                                                                                                    ",{}]],"19":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"20":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"21":[["ill get back correctly                                                                              ",{}]],"22":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"23":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"24":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"26":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"27":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"28":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"29":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"30":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"31":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"32":[["                jal f                                   #call f                                     ",{}]],"33":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101237,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"1":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"2":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"3":[["                j ebloop                                        #continue the loop                  ",{}]],"4":[["endebl:                                                                                             ",{}]],"5":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"6":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"7":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"8":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"9":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"10":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"11":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"12":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"13":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"14":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"15":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"16":[["        jr $ra                                                                                      ",{}]],"17":[["                                                                                                    ",{}]],"18":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"19":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"20":[["ill get back correctly                                                                              ",{}]],"21":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"22":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"23":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"25":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"26":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"27":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"28":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"29":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"30":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"31":[["                jal f                                   #call f                                     ",{}]],"32":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"33":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09978099999999999,{"lines":{"0":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"1":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"2":[["                j ebloop                                        #continue the loop                  ",{}]],"3":[["endebl:                                                                                             ",{}]],"4":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"5":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"6":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"7":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"8":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"9":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"10":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"11":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"12":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"13":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"14":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"15":[["        jr $ra                                                                                      ",{}]],"16":[["                                                                                                    ",{}]],"17":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"18":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"19":[["ill get back correctly                                                                              ",{}]],"20":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"21":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"22":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"24":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"25":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"26":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"27":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"28":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"29":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"30":[["                jal f                                   #call f                                     ",{}]],"31":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"32":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"33":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]]}}],[0.100518,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.5e-05,{"lines":{"0":[["                addi $t0, $t0, 1                #increment t0 by 1 for looping(invariant)           ",{}]],"1":[["                j ebloop                                        #continue the loop                  ",{}]],"2":[["endebl:                                                                                             ",{}]],"3":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"4":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"5":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"6":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"7":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"8":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"9":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"10":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"11":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"12":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"13":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"14":[["        jr $ra                                                                                      ",{}]],"15":[["                                                                                                    ",{}]],"16":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"17":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"18":[["ill get back correctly                                                                              ",{}]],"19":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"20":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"21":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"23":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"24":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"25":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"26":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"27":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"28":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"29":[["                jal f                                   #call f                                     ",{}]],"30":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"31":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"32":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"33":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100299,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                j ebloop                                        #continue the loop                  ",{}]],"1":[["endebl:                                                                                             ",{}]],"2":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"3":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"4":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"5":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"6":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"7":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"8":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"9":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"10":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"11":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"12":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"13":[["        jr $ra                                                                                      ",{}]],"14":[["                                                                                                    ",{}]],"15":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"16":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"17":[["ill get back correctly                                                                              ",{}]],"18":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"19":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"20":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"22":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"23":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"24":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"25":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"26":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"27":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"28":[["                jal f                                   #call f                                     ",{}]],"29":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"30":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"31":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"32":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"33":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099546,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[8.500000000000001e-05,{"lines":{"0":[["endebl:                                                                                             ",{}]],"1":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"2":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"3":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"4":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"5":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"6":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"7":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"8":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"9":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"10":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"11":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"12":[["        jr $ra                                                                                      ",{}]],"13":[["                                                                                                    ",{}]],"14":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"15":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"16":[["ill get back correctly                                                                              ",{}]],"17":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"18":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"19":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"21":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"22":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"23":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"24":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"25":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"26":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"27":[["                jal f                                   #call f                                     ",{}]],"28":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"29":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"30":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"31":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"32":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"33":[["                j dbloop                                #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10101,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"1":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"2":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"3":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"4":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"5":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"6":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"7":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"8":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"9":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"10":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"11":[["        jr $ra                                                                                      ",{}]],"12":[["                                                                                                    ",{}]],"13":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"14":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"15":[["ill get back correctly                                                                              ",{}]],"16":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"17":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"18":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"20":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"21":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"22":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"23":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"24":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"25":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"26":[["                jal f                                   #call f                                     ",{}]],"27":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"28":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"29":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"30":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"31":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"32":[["                j dbloop                                #continue the loop                          ",{}]],"33":[["enddbl:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101235,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"1":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"2":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"3":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"4":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"5":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"6":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"7":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"8":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"9":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"10":[["        jr $ra                                                                                      ",{}]],"11":[["                                                                                                    ",{}]],"12":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"13":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"14":[["ill get back correctly                                                                              ",{}]],"15":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"16":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"17":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"19":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"20":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"21":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"22":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"23":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"24":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"25":[["                jal f                                   #call f                                     ",{}]],"26":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"27":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"28":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"29":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"30":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"31":[["                j dbloop                                #continue the loop                          ",{}]],"32":[["enddbl:                                                                                             ",{}]],"33":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10068,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.7e-05,{"lines":{"0":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"1":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"2":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"3":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"4":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"5":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"6":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"7":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"8":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"9":[["        jr $ra                                                                                      ",{}]],"10":[["                                                                                                    ",{}]],"11":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"12":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"13":[["ill get back correctly                                                                              ",{}]],"14":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"15":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"16":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"18":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"19":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"20":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"21":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"22":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"23":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"24":[["                jal f                                   #call f                                     ",{}]],"25":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"26":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"27":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"28":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"29":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"30":[["                j dbloop                                #continue the loop                          ",{}]],"31":[["enddbl:                                                                                             ",{}]],"32":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"33":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100269,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"1":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"2":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"3":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"4":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"5":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"6":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"7":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"8":[["        jr $ra                                                                                      ",{}]],"9":[["                                                                                                    ",{}]],"10":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"11":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"12":[["ill get back correctly                                                                              ",{}]],"13":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"14":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"15":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"17":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"18":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"19":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"20":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"21":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"22":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"23":[["                jal f                                   #call f                                     ",{}]],"24":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"25":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"26":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"27":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"28":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"29":[["                j dbloop                                #continue the loop                          ",{}]],"30":[["enddbl:                                                                                             ",{}]],"31":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"32":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"33":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100924,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["        lw $t1, 64($t0)                 #load the 16th element into t1                              ",{}]],"1":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"2":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"3":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"4":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"5":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"6":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"7":[["        jr $ra                                                                                      ",{}]],"8":[["                                                                                                    ",{}]],"9":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"10":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"11":[["ill get back correctly                                                                              ",{}]],"12":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"13":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"14":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"16":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"17":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"18":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"19":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"20":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"21":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"22":[["                jal f                                   #call f                                     ",{}]],"23":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"24":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"25":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"26":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"27":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"28":[["                j dbloop                                #continue the loop                          ",{}]],"29":[["enddbl:                                                                                             ",{}]],"30":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"31":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"32":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"33":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101188,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        xor $a3, $a3, $t1               #right ^= P[16]                                             ",{}]],"1":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"2":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"3":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"4":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"5":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"6":[["        jr $ra                                                                                      ",{}]],"7":[["                                                                                                    ",{}]],"8":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"9":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"10":[["ill get back correctly                                                                              ",{}]],"11":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"12":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"13":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"15":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"16":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"17":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"18":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"19":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"20":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"21":[["                jal f                                   #call f                                     ",{}]],"22":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"23":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"24":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"25":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"26":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"27":[["                j dbloop                                #continue the loop                          ",{}]],"28":[["enddbl:                                                                                             ",{}]],"29":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"30":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"31":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"32":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"33":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099976,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        lw $t1, 68, ($t0)               #load the 17th element                                      ",{}]],"1":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"2":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"3":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"4":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"5":[["        jr $ra                                                                                      ",{}]],"6":[["                                                                                                    ",{}]],"7":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"8":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"9":[["ill get back correctly                                                                              ",{}]],"10":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"11":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"12":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"14":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"15":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"16":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"17":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"18":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"19":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"20":[["                jal f                                   #call f                                     ",{}]],"21":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"22":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"23":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"24":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"25":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"26":[["                j dbloop                                #continue the loop                          ",{}]],"27":[["enddbl:                                                                                             ",{}]],"28":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"29":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"30":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"31":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"32":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"33":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10111,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["        xor $a2, $a2, $t1               #left ^= P[17]                                              ",{}]],"1":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"2":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"3":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"4":[["        jr $ra                                                                                      ",{}]],"5":[["                                                                                                    ",{}]],"6":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"7":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"8":[["ill get back correctly                                                                              ",{}]],"9":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"10":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"11":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"13":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"14":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"15":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"16":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"17":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"18":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"19":[["                jal f                                   #call f                                     ",{}]],"20":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"21":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"22":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"23":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"24":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"25":[["                j dbloop                                #continue the loop                          ",{}]],"26":[["enddbl:                                                                                             ",{}]],"27":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"28":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"29":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"30":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"31":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"32":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"33":[["        lw $t1, ($t0)                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101158,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.4e-05,{"lines":{"0":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"1":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"2":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"3":[["        jr $ra                                                                                      ",{}]],"4":[["                                                                                                    ",{}]],"5":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"6":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"7":[["ill get back correctly                                                                              ",{}]],"8":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"9":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"10":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"12":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"13":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"14":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"15":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"16":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"17":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"18":[["                jal f                                   #call f                                     ",{}]],"19":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"20":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"21":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"22":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"23":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"24":[["                j dbloop                                #continue the loop                          ",{}]],"25":[["enddbl:                                                                                             ",{}]],"26":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"27":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"28":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"29":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"30":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"31":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"32":[["        lw $t1, ($t0)                                                                               ",{}]],"33":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10093,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"1":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"2":[["        jr $ra                                                                                      ",{}]],"3":[["                                                                                                    ",{}]],"4":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"5":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"6":[["ill get back correctly                                                                              ",{}]],"7":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"8":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"9":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"11":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"12":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"13":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"14":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"15":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"16":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"17":[["                jal f                                   #call f                                     ",{}]],"18":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"19":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"20":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"21":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"22":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"23":[["                j dbloop                                #continue the loop                          ",{}]],"24":[["enddbl:                                                                                             ",{}]],"25":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"26":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"27":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"28":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"29":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"30":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"31":[["        lw $t1, ($t0)                                                                               ",{}]],"32":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"33":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100561,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"1":[["        jr $ra                                                                                      ",{}]],"2":[["                                                                                                    ",{}]],"3":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"4":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"5":[["ill get back correctly                                                                              ",{}]],"6":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"7":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"8":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"10":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"11":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"12":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"13":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"14":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"15":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"16":[["                jal f                                   #call f                                     ",{}]],"17":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"18":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"19":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"20":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"21":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"22":[["                j dbloop                                #continue the loop                          ",{}]],"23":[["enddbl:                                                                                             ",{}]],"24":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"25":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"26":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"27":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"28":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"29":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"30":[["        lw $t1, ($t0)                                                                               ",{}]],"31":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"32":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"33":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101294,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["        jr $ra                                                                                      ",{}]],"1":[["                                                                                                    ",{}]],"2":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"3":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"4":[["ill get back correctly                                                                              ",{}]],"5":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"6":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"7":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"9":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"10":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"11":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"12":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"13":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"14":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"15":[["                jal f                                   #call f                                     ",{}]],"16":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"17":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"18":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"19":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"20":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"21":[["                j dbloop                                #continue the loop                          ",{}]],"22":[["enddbl:                                                                                             ",{}]],"23":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"24":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"25":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"26":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"27":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"28":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"29":[["        lw $t1, ($t0)                                                                               ",{}]],"30":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"31":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"32":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"33":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101016,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"2":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"3":[["ill get back correctly                                                                              ",{}]],"4":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"5":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"6":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"8":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"9":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"10":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"11":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"12":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"13":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"14":[["                jal f                                   #call f                                     ",{}]],"15":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"16":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"17":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"18":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"19":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"20":[["                j dbloop                                #continue the loop                          ",{}]],"21":[["enddbl:                                                                                             ",{}]],"22":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"23":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"24":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"25":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"26":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"27":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"28":[["        lw $t1, ($t0)                                                                               ",{}]],"29":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"30":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"31":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"32":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"33":[["        jr $ra                                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100915,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["decryptblock:                           #takes a2 as \"L\" and a3 as \"R\".                             ",{}]],"1":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"2":[["ill get back correctly                                                                              ",{}]],"3":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"4":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"5":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"7":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"8":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"9":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"10":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"11":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"12":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"13":[["                jal f                                   #call f                                     ",{}]],"14":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"15":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"16":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"17":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"18":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"19":[["                j dbloop                                #continue the loop                          ",{}]],"20":[["enddbl:                                                                                             ",{}]],"21":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"22":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"23":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"24":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"25":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"26":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"27":[["        lw $t1, ($t0)                                                                               ",{}]],"28":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"29":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"30":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"31":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"32":[["        jr $ra                                                                                      ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101049,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["        addu $s2, $zero, $ra    #copy ra into s2 so we can jump to other functions while here and st",{}]],"1":[["ill get back correctly                                                                              ",{}]],"2":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"3":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"4":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"6":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"7":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"8":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"9":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"10":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"11":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"12":[["                jal f                                   #call f                                     ",{}]],"13":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"14":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"15":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"16":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"17":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"18":[["                j dbloop                                #continue the loop                          ",{}]],"19":[["enddbl:                                                                                             ",{}]],"20":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"21":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"22":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"23":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"24":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"25":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"26":[["        lw $t1, ($t0)                                                                               ",{}]],"27":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"28":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"29":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"30":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"31":[["        jr $ra                                                                                      ",{}]],"32":[["                                                                                                    ",{}]],"33":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100871,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.7e-05,{"lines":{"0":[["ill get back correctly                                                                              ",{}]],"1":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"2":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"3":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"5":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"6":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"7":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"8":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"9":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"10":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"11":[["                jal f                                   #call f                                     ",{}]],"12":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"13":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"14":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"15":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"16":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"17":[["                j dbloop                                #continue the loop                          ",{}]],"18":[["enddbl:                                                                                             ",{}]],"19":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"20":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"21":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"22":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"23":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"24":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"25":[["        lw $t1, ($t0)                                                                               ",{}]],"26":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"27":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"28":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"29":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"30":[["        jr $ra                                                                                      ",{}]],"31":[["                                                                                                    ",{}]],"32":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"33":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099853,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["        li $t0, 16                              #initialize t0 to 16 for looping(loop variable)     ",{}]],"1":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"2":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"4":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"5":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"6":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"7":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"8":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"9":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"10":[["                jal f                                   #call f                                     ",{}]],"11":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"12":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"13":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"14":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"15":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"16":[["                j dbloop                                #continue the loop                          ",{}]],"17":[["enddbl:                                                                                             ",{}]],"18":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"19":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"20":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"21":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"22":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"23":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"24":[["        lw $t1, ($t0)                                                                               ",{}]],"25":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"26":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"27":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"28":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"29":[["        jr $ra                                                                                      ",{}]],"30":[["                                                                                                    ",{}]],"31":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"32":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"33":[["e and still get back correctly                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100987,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["        li $t1, 0                               #initialize t1 to 0 for looping(end condition)      ",{}]],"1":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"3":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"4":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"5":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"6":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"7":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"8":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"9":[["                jal f                                   #call f                                     ",{}]],"10":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"11":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"12":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"13":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"14":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"15":[["                j dbloop                                #continue the loop                          ",{}]],"16":[["enddbl:                                                                                             ",{}]],"17":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"18":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"19":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"20":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"21":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"22":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"23":[["        lw $t1, ($t0)                                                                               ",{}]],"24":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"25":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"26":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"27":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"28":[["        jr $ra                                                                                      ",{}]],"29":[["                                                                                                    ",{}]],"30":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"31":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"32":[["e and still get back correctly                                                                      ",{}]],"33":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100546,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["dbloop: beq $t0, $t1, enddbl    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"2":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"3":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"4":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"5":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"6":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"7":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"8":[["                jal f                                   #call f                                     ",{}]],"9":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"10":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"11":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"12":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"13":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"14":[["                j dbloop                                #continue the loop                          ",{}]],"15":[["enddbl:                                                                                             ",{}]],"16":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"17":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"18":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"19":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"20":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"21":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"22":[["        lw $t1, ($t0)                                                                               ",{}]],"23":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"24":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"25":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"26":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"27":[["        jr $ra                                                                                      ",{}]],"28":[["                                                                                                    ",{}]],"29":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"30":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"31":[["e and still get back correctly                                                                      ",{}]],"32":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"33":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100488,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["                la $t2, plist                   #load the P array's address into t2                 ",{}]],"1":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"2":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"3":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"4":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"5":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"6":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"7":[["                jal f                                   #call f                                     ",{}]],"8":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"9":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"10":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"11":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"12":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"13":[["                j dbloop                                #continue the loop                          ",{}]],"14":[["enddbl:                                                                                             ",{}]],"15":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"16":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"17":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"18":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"19":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"20":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"21":[["        lw $t1, ($t0)                                                                               ",{}]],"22":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"23":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"24":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"25":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"26":[["        jr $ra                                                                                      ",{}]],"27":[["                                                                                                    ",{}]],"28":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"29":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"30":[["e and still get back correctly                                                                      ",{}]],"31":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"32":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"33":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101566,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3, for addressing",{}]],"1":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"2":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"3":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"4":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"5":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"6":[["                jal f                                   #call f                                     ",{}]],"7":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"8":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"9":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"10":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"11":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"12":[["                j dbloop                                #continue the loop                          ",{}]],"13":[["enddbl:                                                                                             ",{}]],"14":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"15":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"16":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"17":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"18":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"19":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"20":[["        lw $t1, ($t0)                                                                               ",{}]],"21":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"22":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"23":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"24":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"25":[["        jr $ra                                                                                      ",{}]],"26":[["                                                                                                    ",{}]],"27":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"28":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"29":[["e and still get back correctly                                                                      ",{}]],"30":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"31":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"32":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09980899999999999,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.1e-05,{"lines":{"0":[["                addu $t4, $t2, $t3              #sum t2 and t3 into t4 for accessing the P array    ",{}]],"1":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"2":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"3":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"4":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"5":[["                jal f                                   #call f                                     ",{}]],"6":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"7":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"8":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"9":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"10":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"11":[["                j dbloop                                #continue the loop                          ",{}]],"12":[["enddbl:                                                                                             ",{}]],"13":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"14":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"15":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"16":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"17":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"18":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"19":[["        lw $t1, ($t0)                                                                               ",{}]],"20":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"21":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"22":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"23":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"24":[["        jr $ra                                                                                      ",{}]],"25":[["                                                                                                    ",{}]],"26":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"27":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"28":[["e and still get back correctly                                                                      ",{}]],"29":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"30":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"31":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"33":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101312,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.2e-05,{"lines":{"0":[["                addi $t4, $t4, 4                #add 4 to t4 and store in t4                        ",{}]],"1":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"2":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"3":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"4":[["                jal f                                   #call f                                     ",{}]],"5":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"6":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"7":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"8":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"9":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"10":[["                j dbloop                                #continue the loop                          ",{}]],"11":[["enddbl:                                                                                             ",{}]],"12":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"13":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"14":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"15":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"16":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"17":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"18":[["        lw $t1, ($t0)                                                                               ",{}]],"19":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"20":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"21":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"22":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"23":[["        jr $ra                                                                                      ",{}]],"24":[["                                                                                                    ",{}]],"25":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"26":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"27":[["e and still get back correctly                                                                      ",{}]],"28":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"29":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"30":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"32":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"33":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09973899999999999,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.7e-05,{"lines":{"0":[["                lw $t5, ($t4)                   #load that element into t5                          ",{}]],"1":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"2":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"3":[["                jal f                                   #call f                                     ",{}]],"4":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"5":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"6":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"7":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"8":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"9":[["                j dbloop                                #continue the loop                          ",{}]],"10":[["enddbl:                                                                                             ",{}]],"11":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"12":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"13":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"14":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"15":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"16":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"17":[["        lw $t1, ($t0)                                                                               ",{}]],"18":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"19":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"20":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"21":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"22":[["        jr $ra                                                                                      ",{}]],"23":[["                                                                                                    ",{}]],"24":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"25":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"26":[["e and still get back correctly                                                                      ",{}]],"27":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"28":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"29":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"31":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"32":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"33":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100465,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.999999999999999e-05,{"lines":{"0":[["                xor $a2, $a2, $t5               #xor a2 with t5 and store in a2                     ",{}]],"1":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"2":[["                jal f                                   #call f                                     ",{}]],"3":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"4":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"5":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"6":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"7":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"8":[["                j dbloop                                #continue the loop                          ",{}]],"9":[["enddbl:                                                                                             ",{}]],"10":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"11":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"12":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"13":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"14":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"15":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"16":[["        lw $t1, ($t0)                                                                               ",{}]],"17":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"18":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"19":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"20":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"21":[["        jr $ra                                                                                      ",{}]],"22":[["                                                                                                    ",{}]],"23":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"24":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"25":[["e and still get back correctly                                                                      ",{}]],"26":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"27":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"28":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"30":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"31":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"32":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"33":[["address of the element in \"key[]\" that we want                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101029,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["                addu $a0, $zero, $a2    #copy a2 into a0 for calling f                              ",{}]],"1":[["                jal f                                   #call f                                     ",{}]],"2":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"3":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"4":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"5":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"6":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"7":[["                j dbloop                                #continue the loop                          ",{}]],"8":[["enddbl:                                                                                             ",{}]],"9":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"10":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"11":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"12":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"13":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"14":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"15":[["        lw $t1, ($t0)                                                                               ",{}]],"16":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"17":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"18":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"19":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"20":[["        jr $ra                                                                                      ",{}]],"21":[["                                                                                                    ",{}]],"22":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"23":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"24":[["e and still get back correctly                                                                      ",{}]],"25":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"26":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"27":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"29":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"30":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"31":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"32":[["address of the element in \"key[]\" that we want                                                      ",{}]],"33":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101173,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                jal f                                   #call f                                     ",{}]],"1":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"2":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"3":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"4":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"5":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"6":[["                j dbloop                                #continue the loop                          ",{}]],"7":[["enddbl:                                                                                             ",{}]],"8":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"9":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"10":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"11":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"12":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"13":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"14":[["        lw $t1, ($t0)                                                                               ",{}]],"15":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"16":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"17":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"18":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"19":[["        jr $ra                                                                                      ",{}]],"20":[["                                                                                                    ",{}]],"21":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"22":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"23":[["e and still get back correctly                                                                      ",{}]],"24":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"25":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"26":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"28":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"29":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"30":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"31":[["address of the element in \"key[]\" that we want                                                      ",{}]],"32":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"33":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100591,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.600000000000001e-05,{"lines":{"0":[["                xor $a3, $a3, $v1               #xor a3 with the result of f and store in a3        ",{}]],"1":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"2":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"3":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"4":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"5":[["                j dbloop                                #continue the loop                          ",{}]],"6":[["enddbl:                                                                                             ",{}]],"7":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"8":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"9":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"10":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"11":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"12":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"13":[["        lw $t1, ($t0)                                                                               ",{}]],"14":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"15":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"16":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"17":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"18":[["        jr $ra                                                                                      ",{}]],"19":[["                                                                                                    ",{}]],"20":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"21":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"22":[["e and still get back correctly                                                                      ",{}]],"23":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"24":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"25":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"27":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"28":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"29":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"30":[["address of the element in \"key[]\" that we want                                                      ",{}]],"31":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"32":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"33":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100538,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["                add $t6, $zero, $a2             #temp for swapping                                  ",{}]],"1":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"2":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"3":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"4":[["                j dbloop                                #continue the loop                          ",{}]],"5":[["enddbl:                                                                                             ",{}]],"6":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"7":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"8":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"9":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"10":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"11":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"12":[["        lw $t1, ($t0)                                                                               ",{}]],"13":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"14":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"15":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"16":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"17":[["        jr $ra                                                                                      ",{}]],"18":[["                                                                                                    ",{}]],"19":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"20":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"21":[["e and still get back correctly                                                                      ",{}]],"22":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"23":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"24":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"26":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"27":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"28":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"29":[["address of the element in \"key[]\" that we want                                                      ",{}]],"30":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"31":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"32":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"33":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101316,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["                add $a2, $zero, $a3             #put a3 in a2                                       ",{}]],"1":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"2":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"3":[["                j dbloop                                #continue the loop                          ",{}]],"4":[["enddbl:                                                                                             ",{}]],"5":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"6":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"7":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"8":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"9":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"10":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"11":[["        lw $t1, ($t0)                                                                               ",{}]],"12":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"13":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"14":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"15":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"16":[["        jr $ra                                                                                      ",{}]],"17":[["                                                                                                    ",{}]],"18":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"19":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"20":[["e and still get back correctly                                                                      ",{}]],"21":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"22":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"23":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"25":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"26":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"27":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"28":[["address of the element in \"key[]\" that we want                                                      ",{}]],"29":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"30":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"31":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"32":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"33":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100336,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                add $a3, $zero, $t6             #put what was in a2 into a3                         ",{}]],"1":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"2":[["                j dbloop                                #continue the loop                          ",{}]],"3":[["enddbl:                                                                                             ",{}]],"4":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"5":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"6":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"7":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"8":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"9":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"10":[["        lw $t1, ($t0)                                                                               ",{}]],"11":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"12":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"13":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"14":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"15":[["        jr $ra                                                                                      ",{}]],"16":[["                                                                                                    ",{}]],"17":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"18":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"19":[["e and still get back correctly                                                                      ",{}]],"20":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"21":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"22":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"24":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"25":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"26":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"27":[["address of the element in \"key[]\" that we want                                                      ",{}]],"28":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"29":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"30":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"31":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"32":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"33":[["P[i]\")                                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100176,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                addi $t0, $t0, -1               #decrement t0 by 1 for looping(invariant)           ",{}]],"1":[["                j dbloop                                #continue the loop                          ",{}]],"2":[["enddbl:                                                                                             ",{}]],"3":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"4":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"5":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"6":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"7":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"8":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"9":[["        lw $t1, ($t0)                                                                               ",{}]],"10":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"11":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"12":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"13":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"14":[["        jr $ra                                                                                      ",{}]],"15":[["                                                                                                    ",{}]],"16":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"17":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"18":[["e and still get back correctly                                                                      ",{}]],"19":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"20":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"21":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"23":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"24":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"25":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"26":[["address of the element in \"key[]\" that we want                                                      ",{}]],"27":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"28":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"29":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"30":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"31":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"32":[["P[i]\")                                                                                              ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099965,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["                j dbloop                                #continue the loop                          ",{}]],"1":[["enddbl:                                                                                             ",{}]],"2":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"3":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"4":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"5":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"6":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"7":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"8":[["        lw $t1, ($t0)                                                                               ",{}]],"9":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"10":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"11":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"12":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"13":[["        jr $ra                                                                                      ",{}]],"14":[["                                                                                                    ",{}]],"15":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"16":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"17":[["e and still get back correctly                                                                      ",{}]],"18":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"19":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"20":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"22":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"23":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"24":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"25":[["address of the element in \"key[]\" that we want                                                      ",{}]],"26":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"27":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"28":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"29":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"30":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"31":[["P[i]\")                                                                                              ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"33":[["                j ksl1                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101103,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["enddbl:                                                                                             ",{}]],"1":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"2":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"3":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"4":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"5":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"6":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"7":[["        lw $t1, ($t0)                                                                               ",{}]],"8":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"9":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"10":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"11":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"12":[["        jr $ra                                                                                      ",{}]],"13":[["                                                                                                    ",{}]],"14":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"15":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"16":[["e and still get back correctly                                                                      ",{}]],"17":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"18":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"19":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"21":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"22":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"23":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"24":[["address of the element in \"key[]\" that we want                                                      ",{}]],"25":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"26":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"27":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"28":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"29":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"30":[["P[i]\")                                                                                              ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"32":[["                j ksl1                                  #continue the loop                          ",{}]],"33":[["endkl1:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101044,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        add $t6, $zero, $a2             #temp for swapping                                          ",{}]],"1":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"2":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"3":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"4":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"5":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"6":[["        lw $t1, ($t0)                                                                               ",{}]],"7":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"8":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"9":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"10":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"11":[["        jr $ra                                                                                      ",{}]],"12":[["                                                                                                    ",{}]],"13":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"14":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"15":[["e and still get back correctly                                                                      ",{}]],"16":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"17":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"18":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"20":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"21":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"22":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"23":[["address of the element in \"key[]\" that we want                                                      ",{}]],"24":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"25":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"26":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"27":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"28":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"29":[["P[i]\")                                                                                              ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"31":[["                j ksl1                                  #continue the loop                          ",{}]],"32":[["endkl1:                                                                                             ",{}]],"33":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100245,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000162,{"lines":{"0":[["        add $a2, $zero, $a3             #put a3 in a2                                               ",{}]],"1":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"2":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"3":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"4":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"5":[["        lw $t1, ($t0)                                                                               ",{}]],"6":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"7":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"8":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"9":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"10":[["        jr $ra                                                                                      ",{}]],"11":[["                                                                                                    ",{}]],"12":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"13":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"14":[["e and still get back correctly                                                                      ",{}]],"15":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"16":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"17":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"19":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"20":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"21":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"22":[["address of the element in \"key[]\" that we want                                                      ",{}]],"23":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"24":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"25":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"26":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"27":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"28":[["P[i]\")                                                                                              ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"30":[["                j ksl1                                  #continue the loop                          ",{}]],"31":[["endkl1:                                                                                             ",{}]],"32":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"33":[[" we'll be making                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099804,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["        add $a3, $zero, $t6             #put what was in a2 into a3                                 ",{}]],"1":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"2":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"3":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"4":[["        lw $t1, ($t0)                                                                               ",{}]],"5":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"6":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"7":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"8":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"9":[["        jr $ra                                                                                      ",{}]],"10":[["                                                                                                    ",{}]],"11":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"12":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"13":[["e and still get back correctly                                                                      ",{}]],"14":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"15":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"16":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"18":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"19":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"20":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"21":[["address of the element in \"key[]\" that we want                                                      ",{}]],"22":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"23":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"24":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"25":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"26":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"27":[["P[i]\")                                                                                              ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"29":[["                j ksl1                                  #continue the loop                          ",{}]],"30":[["endkl1:                                                                                             ",{}]],"31":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"32":[[" we'll be making                                                                                    ",{}]],"33":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100204,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.2e-05,{"lines":{"0":[["        la $t0, plist                   #load the P array's address into t0                         ",{}]],"1":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"2":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"3":[["        lw $t1, ($t0)                                                                               ",{}]],"4":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"5":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"6":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"7":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"8":[["        jr $ra                                                                                      ",{}]],"9":[["                                                                                                    ",{}]],"10":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"11":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"12":[["e and still get back correctly                                                                      ",{}]],"13":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"14":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"15":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"17":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"18":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"19":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"20":[["address of the element in \"key[]\" that we want                                                      ",{}]],"21":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"22":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"23":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"24":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"25":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"26":[["P[i]\")                                                                                              ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"28":[["                j ksl1                                  #continue the loop                          ",{}]],"29":[["endkl1:                                                                                             ",{}]],"30":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"31":[[" we'll be making                                                                                    ",{}]],"32":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"33":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100775,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["        lw $t1, 4($t0)                  #load that element into t1                                  ",{}]],"1":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"2":[["        lw $t1, ($t0)                                                                               ",{}]],"3":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"4":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"5":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"6":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"7":[["        jr $ra                                                                                      ",{}]],"8":[["                                                                                                    ",{}]],"9":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"10":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"11":[["e and still get back correctly                                                                      ",{}]],"12":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"13":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"14":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"16":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"17":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"18":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"19":[["address of the element in \"key[]\" that we want                                                      ",{}]],"20":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"21":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"22":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"23":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"24":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"25":[["P[i]\")                                                                                              ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"27":[["                j ksl1                                  #continue the loop                          ",{}]],"28":[["endkl1:                                                                                             ",{}]],"29":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"30":[[" we'll be making                                                                                    ",{}]],"31":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"32":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"33":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101274,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[2.6e-05,{"lines":{"0":[["        xor $a3, $a3, $t1               #right ^= P[1]                                              ",{}]],"1":[["        lw $t1, ($t0)                                                                               ",{}]],"2":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"3":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"4":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"5":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"6":[["        jr $ra                                                                                      ",{}]],"7":[["                                                                                                    ",{}]],"8":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"9":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"10":[["e and still get back correctly                                                                      ",{}]],"11":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"12":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"13":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"15":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"16":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"17":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"18":[["address of the element in \"key[]\" that we want                                                      ",{}]],"19":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"20":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"21":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"22":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"23":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"24":[["P[i]\")                                                                                              ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"26":[["                j ksl1                                  #continue the loop                          ",{}]],"27":[["endkl1:                                                                                             ",{}]],"28":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"29":[[" we'll be making                                                                                    ",{}]],"30":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"31":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"32":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"33":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101292,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.2e-05,{"lines":{"0":[["        lw $t1, ($t0)                                                                               ",{}]],"1":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"2":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"3":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"4":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"5":[["        jr $ra                                                                                      ",{}]],"6":[["                                                                                                    ",{}]],"7":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"8":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"9":[["e and still get back correctly                                                                      ",{}]],"10":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"11":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"12":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"14":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"15":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"16":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"17":[["address of the element in \"key[]\" that we want                                                      ",{}]],"18":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"19":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"20":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"21":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"22":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"23":[["P[i]\")                                                                                              ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"25":[["                j ksl1                                  #continue the loop                          ",{}]],"26":[["endkl1:                                                                                             ",{}]],"27":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"28":[[" we'll be making                                                                                    ",{}]],"29":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"30":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"31":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"32":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101159,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.6e-05,{"lines":{"0":[["        xor $a2, $a2, $t1               #left ^= P[0]                                               ",{}]],"1":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"2":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"3":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"4":[["        jr $ra                                                                                      ",{}]],"5":[["                                                                                                    ",{}]],"6":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"7":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"8":[["e and still get back correctly                                                                      ",{}]],"9":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"10":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"11":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"13":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"14":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"15":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"16":[["address of the element in \"key[]\" that we want                                                      ",{}]],"17":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"18":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"19":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"20":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"21":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"22":[["P[i]\")                                                                                              ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"24":[["                j ksl1                                  #continue the loop                          ",{}]],"25":[["endkl1:                                                                                             ",{}]],"26":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"27":[[" we'll be making                                                                                    ",{}]],"28":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"29":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"30":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"31":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"33":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100739,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.2e-05,{"lines":{"0":[["        addu $v0, $zero, $a2    #return a2 as \"L\"                                                   ",{}]],"1":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"2":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"3":[["        jr $ra                                                                                      ",{}]],"4":[["                                                                                                    ",{}]],"5":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"6":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"7":[["e and still get back correctly                                                                      ",{}]],"8":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"9":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"10":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"12":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"13":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"14":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"15":[["address of the element in \"key[]\" that we want                                                      ",{}]],"16":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"17":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"18":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"19":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"20":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"21":[["P[i]\")                                                                                              ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"23":[["                j ksl1                                  #continue the loop                          ",{}]],"24":[["endkl1:                                                                                             ",{}]],"25":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"26":[[" we'll be making                                                                                    ",{}]],"27":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"28":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"29":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"30":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"32":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"33":[["                jal encryptblock                #encrypt                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100737,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.2e-05,{"lines":{"0":[["        addu $v1, $zero, $a3    #return a3 as \"R\"                                                   ",{}]],"1":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"2":[["        jr $ra                                                                                      ",{}]],"3":[["                                                                                                    ",{}]],"4":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"5":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"6":[["e and still get back correctly                                                                      ",{}]],"7":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"8":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"9":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"11":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"12":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"13":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"14":[["address of the element in \"key[]\" that we want                                                      ",{}]],"15":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"16":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"17":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"18":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"19":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"20":[["P[i]\")                                                                                              ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"22":[["                j ksl1                                  #continue the loop                          ",{}]],"23":[["endkl1:                                                                                             ",{}]],"24":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"25":[[" we'll be making                                                                                    ",{}]],"26":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"27":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"28":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"29":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"31":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"32":[["                jal encryptblock                #encrypt                                            ",{}]],"33":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100966,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.5e-05,{"lines":{"0":[["        addu $ra, $zero, $s2    #copy s2 back to ra to return to (hopefully) keysched               ",{}]],"1":[["        jr $ra                                                                                      ",{}]],"2":[["                                                                                                    ",{}]],"3":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"4":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"5":[["e and still get back correctly                                                                      ",{}]],"6":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"7":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"8":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"10":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"11":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"12":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"13":[["address of the element in \"key[]\" that we want                                                      ",{}]],"14":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"15":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"16":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"17":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"18":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"19":[["P[i]\")                                                                                              ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"21":[["                j ksl1                                  #continue the loop                          ",{}]],"22":[["endkl1:                                                                                             ",{}]],"23":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"24":[[" we'll be making                                                                                    ",{}]],"25":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"26":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"27":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"28":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"30":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"31":[["                jal encryptblock                #encrypt                                            ",{}]],"32":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"33":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100208,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        jr $ra                                                                                      ",{}]],"1":[["                                                                                                    ",{}]],"2":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"3":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"4":[["e and still get back correctly                                                                      ",{}]],"5":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"6":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"7":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"9":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"10":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"11":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"12":[["address of the element in \"key[]\" that we want                                                      ",{}]],"13":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"14":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"15":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"16":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"17":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"18":[["P[i]\")                                                                                              ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"20":[["                j ksl1                                  #continue the loop                          ",{}]],"21":[["endkl1:                                                                                             ",{}]],"22":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"23":[[" we'll be making                                                                                    ",{}]],"24":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"25":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"26":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"27":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"29":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"30":[["                jal encryptblock                #encrypt                                            ",{}]],"31":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"32":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"33":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101304,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"2":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"3":[["e and still get back correctly                                                                      ",{}]],"4":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"5":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"6":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"8":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"9":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"10":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"11":[["address of the element in \"key[]\" that we want                                                      ",{}]],"12":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"13":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"14":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"15":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"16":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"17":[["P[i]\")                                                                                              ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"19":[["                j ksl1                                  #continue the loop                          ",{}]],"20":[["endkl1:                                                                                             ",{}]],"21":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"22":[[" we'll be making                                                                                    ",{}]],"23":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"24":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"25":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"26":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"28":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"29":[["                jal encryptblock                #encrypt                                            ",{}]],"30":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"31":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"32":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"33":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100349,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["keysched:                                       #takes a0 as \"key[]\" and a1 as \"keylen\"             ",{}]],"1":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"2":[["e and still get back correctly                                                                      ",{}]],"3":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"4":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"5":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"7":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"8":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"9":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"10":[["address of the element in \"key[]\" that we want                                                      ",{}]],"11":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"12":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"13":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"14":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"15":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"16":[["P[i]\")                                                                                              ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"18":[["                j ksl1                                  #continue the loop                          ",{}]],"19":[["endkl1:                                                                                             ",{}]],"20":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"21":[[" we'll be making                                                                                    ",{}]],"22":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"23":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"24":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"25":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"27":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"28":[["                jal encryptblock                #encrypt                                            ",{}]],"29":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"30":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"31":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"32":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"33":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100926,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        add $s1, $zero, $ra             #copy ra into s1 so we can jump to other functions while her",{}]],"1":[["e and still get back correctly                                                                      ",{}]],"2":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"3":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"4":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"6":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"7":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"8":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"9":[["address of the element in \"key[]\" that we want                                                      ",{}]],"10":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"11":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"12":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"13":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"14":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"15":[["P[i]\")                                                                                              ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"17":[["                j ksl1                                  #continue the loop                          ",{}]],"18":[["endkl1:                                                                                             ",{}]],"19":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"20":[[" we'll be making                                                                                    ",{}]],"21":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"22":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"23":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"24":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"26":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"27":[["                jal encryptblock                #encrypt                                            ",{}]],"28":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"29":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"30":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"31":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"32":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"33":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09937799999999999,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[2.7e-05,{"lines":{"0":[["e and still get back correctly                                                                      ",{}]],"1":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"2":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"3":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"5":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"6":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"7":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"8":[["address of the element in \"key[]\" that we want                                                      ",{}]],"9":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"10":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"11":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"12":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"13":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"14":[["P[i]\")                                                                                              ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"16":[["                j ksl1                                  #continue the loop                          ",{}]],"17":[["endkl1:                                                                                             ",{}]],"18":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"19":[[" we'll be making                                                                                    ",{}]],"20":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"21":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"22":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"23":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"25":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"26":[["                jal encryptblock                #encrypt                                            ",{}]],"27":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"28":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"29":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"30":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"31":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"32":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"33":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101387,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.7e-05,{"lines":{"0":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"1":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"2":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"4":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"5":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"6":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"7":[["address of the element in \"key[]\" that we want                                                      ",{}]],"8":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"9":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"10":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"11":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"12":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"13":[["P[i]\")                                                                                              ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"15":[["                j ksl1                                  #continue the loop                          ",{}]],"16":[["endkl1:                                                                                             ",{}]],"17":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"18":[[" we'll be making                                                                                    ",{}]],"19":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"20":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"21":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"22":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"24":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"25":[["                jal encryptblock                #encrypt                                            ",{}]],"26":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"27":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"28":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"29":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"30":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"31":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"32":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"33":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100332,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"1":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"3":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"4":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"5":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"6":[["address of the element in \"key[]\" that we want                                                      ",{}]],"7":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"8":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"9":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"10":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"11":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"12":[["P[i]\")                                                                                              ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"14":[["                j ksl1                                  #continue the loop                          ",{}]],"15":[["endkl1:                                                                                             ",{}]],"16":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"17":[[" we'll be making                                                                                    ",{}]],"18":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"19":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"20":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"21":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"23":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"24":[["                jal encryptblock                #encrypt                                            ",{}]],"25":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"26":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"27":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"28":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"29":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"30":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"31":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"32":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"33":[["the array(after the one at t4)                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10095,{"lines":{"0":[["ksl1:   beq $t0, $t1, endkl1    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"2":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"3":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"4":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"5":[["address of the element in \"key[]\" that we want                                                      ",{}]],"6":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"7":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"8":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"9":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"10":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"11":[["P[i]\")                                                                                              ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"13":[["                j ksl1                                  #continue the loop                          ",{}]],"14":[["endkl1:                                                                                             ",{}]],"15":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"16":[[" we'll be making                                                                                    ",{}]],"17":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"18":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"19":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"20":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"22":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"23":[["                jal encryptblock                #encrypt                                            ",{}]],"24":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"25":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"26":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"27":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"28":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"29":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"30":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"31":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"32":[["the array(after the one at t4)                                                                      ",{}]],"33":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]]}}],[0.100363,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                div $t0, $a1                    #divide t0 by a1 to get \"i % keylen\"                ",{}]],"1":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"2":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"3":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"4":[["address of the element in \"key[]\" that we want                                                      ",{}]],"5":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"6":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"7":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"8":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"9":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"10":[["P[i]\")                                                                                              ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"12":[["                j ksl1                                  #continue the loop                          ",{}]],"13":[["endkl1:                                                                                             ",{}]],"14":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"15":[[" we'll be making                                                                                    ",{}]],"16":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"17":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"18":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"19":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"21":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"22":[["                jal encryptblock                #encrypt                                            ",{}]],"23":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"24":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"25":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"26":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"27":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"28":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"29":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"30":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"31":[["the array(after the one at t4)                                                                      ",{}]],"32":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"33":[["\")                                                                                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101232,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.3e-05,{"lines":{"0":[["                mfhi $t2                                #copy the result of \"i % keylen\" into t2    ",{}]],"1":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"2":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"3":[["address of the element in \"key[]\" that we want                                                      ",{}]],"4":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"5":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"6":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"7":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"8":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"9":[["P[i]\")                                                                                              ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"11":[["                j ksl1                                  #continue the loop                          ",{}]],"12":[["endkl1:                                                                                             ",{}]],"13":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"14":[[" we'll be making                                                                                    ",{}]],"15":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"16":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"17":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"18":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"20":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"21":[["                jal encryptblock                #encrypt                                            ",{}]],"22":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"23":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"24":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"25":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"26":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"27":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"28":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"29":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"30":[["the array(after the one at t4)                                                                      ",{}]],"31":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"32":[["\")                                                                                                  ",{}]],"33":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100456,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.9e-05,{"lines":{"0":[["                sll $t2, $t2, 2                 #shift t2 left twice for addressing                 ",{}]],"1":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"2":[["address of the element in \"key[]\" that we want                                                      ",{}]],"3":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"4":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"5":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"6":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"7":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"8":[["P[i]\")                                                                                              ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"10":[["                j ksl1                                  #continue the loop                          ",{}]],"11":[["endkl1:                                                                                             ",{}]],"12":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"13":[[" we'll be making                                                                                    ",{}]],"14":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"15":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"16":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"17":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"19":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"20":[["                jal encryptblock                #encrypt                                            ",{}]],"21":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"22":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"23":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"24":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"25":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"26":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"27":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"28":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"29":[["the array(after the one at t4)                                                                      ",{}]],"30":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"31":[["\")                                                                                                  ",{}]],"32":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"33":[[" R\")                                                                                                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099661,{"lines":{"0":[["                addu $t3, $t2, $a0              #copy a0 into t3 and add t2 to it so that t3 is the ",{}]],"1":[["address of the element in \"key[]\" that we want                                                      ",{}]],"2":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"3":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"4":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"5":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"6":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"7":[["P[i]\")                                                                                              ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"9":[["                j ksl1                                  #continue the loop                          ",{}]],"10":[["endkl1:                                                                                             ",{}]],"11":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"12":[[" we'll be making                                                                                    ",{}]],"13":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"14":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"15":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"16":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"18":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"19":[["                jal encryptblock                #encrypt                                            ",{}]],"20":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"21":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"22":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"23":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"24":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"25":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"26":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"27":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"28":[["the array(after the one at t4)                                                                      ",{}]],"29":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"30":[["\")                                                                                                  ",{}]],"31":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"32":[[" R\")                                                                                                ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]]}}],[0.100598,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["address of the element in \"key[]\" that we want                                                      ",{}]],"1":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"2":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"3":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"4":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"5":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"6":[["P[i]\")                                                                                              ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"8":[["                j ksl1                                  #continue the loop                          ",{}]],"9":[["endkl1:                                                                                             ",{}]],"10":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"11":[[" we'll be making                                                                                    ",{}]],"12":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"13":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"14":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"15":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"17":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"18":[["                jal encryptblock                #encrypt                                            ",{}]],"19":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"20":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"21":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"22":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"23":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"24":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"25":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"26":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"27":[["the array(after the one at t4)                                                                      ",{}]],"28":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"29":[["\")                                                                                                  ",{}]],"30":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"31":[[" R\")                                                                                                ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"33":[["                j ksl2                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100184,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["                lw $t4, ($t3)                   #load that element into t4                          ",{}]],"1":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"2":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"3":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"4":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"5":[["P[i]\")                                                                                              ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"7":[["                j ksl1                                  #continue the loop                          ",{}]],"8":[["endkl1:                                                                                             ",{}]],"9":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"10":[[" we'll be making                                                                                    ",{}]],"11":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"12":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"13":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"14":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"16":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"17":[["                jal encryptblock                #encrypt                                            ",{}]],"18":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"19":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"20":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"21":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"22":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"23":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"24":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"25":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"26":[["the array(after the one at t4)                                                                      ",{}]],"27":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"28":[["\")                                                                                                  ",{}]],"29":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"30":[[" R\")                                                                                                ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"32":[["                j ksl2                                  #continue the loop                          ",{}]],"33":[["endkl2:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100169,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                la $t2, plist                   #load the address of the P array into t2            ",{}]],"1":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"2":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"3":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"4":[["P[i]\")                                                                                              ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"6":[["                j ksl1                                  #continue the loop                          ",{}]],"7":[["endkl1:                                                                                             ",{}]],"8":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"9":[[" we'll be making                                                                                    ",{}]],"10":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"11":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"12":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"13":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"15":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"16":[["                jal encryptblock                #encrypt                                            ",{}]],"17":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"18":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"19":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"20":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"21":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"22":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"23":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"24":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"25":[["the array(after the one at t4)                                                                      ",{}]],"26":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"27":[["\")                                                                                                  ",{}]],"28":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"29":[[" R\")                                                                                                ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"31":[["                j ksl2                                  #continue the loop                          ",{}]],"32":[["endkl2:                                                                                             ",{}]],"33":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10018,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                sll $t3, $t0, 2                 #shift t0 left twice and store in t3 for addressing ",{}]],"1":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"2":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"3":[["P[i]\")                                                                                              ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"5":[["                j ksl1                                  #continue the loop                          ",{}]],"6":[["endkl1:                                                                                             ",{}]],"7":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"8":[[" we'll be making                                                                                    ",{}]],"9":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"10":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"11":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"12":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"14":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"15":[["                jal encryptblock                #encrypt                                            ",{}]],"16":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"17":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"18":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"19":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"20":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"21":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"22":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"23":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"24":[["the array(after the one at t4)                                                                      ",{}]],"25":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"26":[["\")                                                                                                  ",{}]],"27":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"28":[[" R\")                                                                                                ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"30":[["                j ksl2                                  #continue the loop                          ",{}]],"31":[["endkl2:                                                                                             ",{}]],"32":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"33":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09993299999999999,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                addu $t3, $t2, $t3              #sum t2 and t3, store in t3                         ",{}]],"1":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"2":[["P[i]\")                                                                                              ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"4":[["                j ksl1                                  #continue the loop                          ",{}]],"5":[["endkl1:                                                                                             ",{}]],"6":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"7":[[" we'll be making                                                                                    ",{}]],"8":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"9":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"10":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"11":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"13":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"14":[["                jal encryptblock                #encrypt                                            ",{}]],"15":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"16":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"17":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"18":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"19":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"20":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"21":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"22":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"23":[["the array(after the one at t4)                                                                      ",{}]],"24":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"25":[["\")                                                                                                  ",{}]],"26":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"27":[[" R\")                                                                                                ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"29":[["                j ksl2                                  #continue the loop                          ",{}]],"30":[["endkl2:                                                                                             ",{}]],"31":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"32":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"33":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100345,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.099999999999999e-05,{"lines":{"0":[["                sw $t4, ($t3)                   #store the value we put into t4 in the address t3 (\"",{}]],"1":[["P[i]\")                                                                                              ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"3":[["                j ksl1                                  #continue the loop                          ",{}]],"4":[["endkl1:                                                                                             ",{}]],"5":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"6":[[" we'll be making                                                                                    ",{}]],"7":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"8":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"9":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"10":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"12":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"13":[["                jal encryptblock                #encrypt                                            ",{}]],"14":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"15":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"16":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"17":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"18":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"19":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"20":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"21":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"22":[["the array(after the one at t4)                                                                      ",{}]],"23":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"24":[["\")                                                                                                  ",{}]],"25":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"26":[[" R\")                                                                                                ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"28":[["                j ksl2                                  #continue the loop                          ",{}]],"29":[["endkl2:                                                                                             ",{}]],"30":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"31":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"32":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"33":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09988900000000001,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["P[i]\")                                                                                              ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"2":[["                j ksl1                                  #continue the loop                          ",{}]],"3":[["endkl1:                                                                                             ",{}]],"4":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"5":[[" we'll be making                                                                                    ",{}]],"6":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"7":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"8":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"9":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"11":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"12":[["                jal encryptblock                #encrypt                                            ",{}]],"13":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"14":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"15":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"16":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"17":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"18":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"19":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"20":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"21":[["the array(after the one at t4)                                                                      ",{}]],"22":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"23":[["\")                                                                                                  ",{}]],"24":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"25":[[" R\")                                                                                                ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"27":[["                j ksl2                                  #continue the loop                          ",{}]],"28":[["endkl2:                                                                                             ",{}]],"29":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"30":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"31":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"32":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100689,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.6e-05,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 by 1 for looping(invariant)           ",{}]],"1":[["                j ksl1                                  #continue the loop                          ",{}]],"2":[["endkl1:                                                                                             ",{}]],"3":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"4":[[" we'll be making                                                                                    ",{}]],"5":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"6":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"7":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"8":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"10":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"11":[["                jal encryptblock                #encrypt                                            ",{}]],"12":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"13":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"14":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"15":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"16":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"17":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"18":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"19":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"20":[["the array(after the one at t4)                                                                      ",{}]],"21":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"22":[["\")                                                                                                  ",{}]],"23":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"24":[[" R\")                                                                                                ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"26":[["                j ksl2                                  #continue the loop                          ",{}]],"27":[["endkl2:                                                                                             ",{}]],"28":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"29":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"30":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"31":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"33":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101115,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                j ksl1                                  #continue the loop                          ",{}]],"1":[["endkl1:                                                                                             ",{}]],"2":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"3":[[" we'll be making                                                                                    ",{}]],"4":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"5":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"6":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"7":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"9":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"10":[["                jal encryptblock                #encrypt                                            ",{}]],"11":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"12":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"13":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"14":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"15":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"16":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"17":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"18":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"19":[["the array(after the one at t4)                                                                      ",{}]],"20":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"21":[["\")                                                                                                  ",{}]],"22":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"23":[[" R\")                                                                                                ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"25":[["                j ksl2                                  #continue the loop                          ",{}]],"26":[["endkl2:                                                                                             ",{}]],"27":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"28":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"29":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"30":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"32":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"33":[["                jal encryptblock                #encrypt                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101054,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.499999999999999e-05,{"lines":{"0":[["endkl1:                                                                                             ",{}]],"1":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"2":[[" we'll be making                                                                                    ",{}]],"3":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"4":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"5":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"6":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"8":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"9":[["                jal encryptblock                #encrypt                                            ",{}]],"10":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"11":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"12":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"13":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"14":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"15":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"16":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"17":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"18":[["the array(after the one at t4)                                                                      ",{}]],"19":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"20":[["\")                                                                                                  ",{}]],"21":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"22":[[" R\")                                                                                                ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"24":[["                j ksl2                                  #continue the loop                          ",{}]],"25":[["endkl2:                                                                                             ",{}]],"26":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"27":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"28":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"29":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"31":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"32":[["                jal encryptblock                #encrypt                                            ",{}]],"33":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10069,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["        li $a2, 0                               #set a2 to 0 in anticipation of the en/decrypt calls",{}]],"1":[[" we'll be making                                                                                    ",{}]],"2":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"3":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"4":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"5":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"7":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"8":[["                jal encryptblock                #encrypt                                            ",{}]],"9":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"10":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"11":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"12":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"13":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"14":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"15":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"16":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"17":[["the array(after the one at t4)                                                                      ",{}]],"18":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"19":[["\")                                                                                                  ",{}]],"20":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"21":[[" R\")                                                                                                ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"23":[["                j ksl2                                  #continue the loop                          ",{}]],"24":[["endkl2:                                                                                             ",{}]],"25":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"26":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"27":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"28":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"30":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"31":[["                jal encryptblock                #encrypt                                            ",{}]],"32":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"33":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100788,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[[" we'll be making                                                                                    ",{}]],"1":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"2":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"3":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"4":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"6":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"7":[["                jal encryptblock                #encrypt                                            ",{}]],"8":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"9":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"10":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"11":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"12":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"13":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"14":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"15":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"16":[["the array(after the one at t4)                                                                      ",{}]],"17":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"18":[["\")                                                                                                  ",{}]],"19":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"20":[[" R\")                                                                                                ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"22":[["                j ksl2                                  #continue the loop                          ",{}]],"23":[["endkl2:                                                                                             ",{}]],"24":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"25":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"26":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"27":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"29":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"30":[["                jal encryptblock                #encrypt                                            ",{}]],"31":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"32":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"33":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100231,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.8e-05,{"lines":{"0":[["        li $a3, 0                               #set a3 to 0 for the same reason as a2              ",{}]],"1":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"2":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"3":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"5":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"6":[["                jal encryptblock                #encrypt                                            ",{}]],"7":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"8":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"9":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"10":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"11":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"12":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"13":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"14":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"15":[["the array(after the one at t4)                                                                      ",{}]],"16":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"17":[["\")                                                                                                  ",{}]],"18":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"19":[[" R\")                                                                                                ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"21":[["                j ksl2                                  #continue the loop                          ",{}]],"22":[["endkl2:                                                                                             ",{}]],"23":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"24":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"25":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"26":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"28":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"29":[["                jal encryptblock                #encrypt                                            ",{}]],"30":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"31":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"32":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"33":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100967,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"1":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"2":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"4":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"5":[["                jal encryptblock                #encrypt                                            ",{}]],"6":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"7":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"8":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"9":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"10":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"11":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"12":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"13":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"14":[["the array(after the one at t4)                                                                      ",{}]],"15":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"16":[["\")                                                                                                  ",{}]],"17":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"18":[[" R\")                                                                                                ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"20":[["                j ksl2                                  #continue the loop                          ",{}]],"21":[["endkl2:                                                                                             ",{}]],"22":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"23":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"24":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"25":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"27":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"28":[["                jal encryptblock                #encrypt                                            ",{}]],"29":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"30":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"31":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"32":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"33":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101397,{"lines":{"0":[["        li $t1, 18                              #set t1 to 18 for looping(end condition)            ",{}]],"1":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"3":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"4":[["                jal encryptblock                #encrypt                                            ",{}]],"5":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"6":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"7":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"8":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"9":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"10":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"11":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"12":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"13":[["the array(after the one at t4)                                                                      ",{}]],"14":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"15":[["\")                                                                                                  ",{}]],"16":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"17":[[" R\")                                                                                                ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"19":[["                j ksl2                                  #continue the loop                          ",{}]],"20":[["endkl2:                                                                                             ",{}]],"21":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"22":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"23":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"24":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"26":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"27":[["                jal encryptblock                #encrypt                                            ",{}]],"28":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"29":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"30":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"31":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"32":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"33":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]]}}],[0.099717,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["ksl2:   beq $t0, $t1, endkl2    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"2":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"3":[["                jal encryptblock                #encrypt                                            ",{}]],"4":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"5":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"6":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"7":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"8":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"9":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"10":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"11":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"12":[["the array(after the one at t4)                                                                      ",{}]],"13":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"14":[["\")                                                                                                  ",{}]],"15":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"16":[[" R\")                                                                                                ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"18":[["                j ksl2                                  #continue the loop                          ",{}]],"19":[["endkl2:                                                                                             ",{}]],"20":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"21":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"22":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"23":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"25":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"26":[["                jal encryptblock                #encrypt                                            ",{}]],"27":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"28":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"29":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"30":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"31":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"32":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"33":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100746,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5e-05,{"lines":{"0":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"1":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"2":[["                jal encryptblock                #encrypt                                            ",{}]],"3":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"4":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"5":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"6":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"7":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"8":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"9":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"10":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"11":[["the array(after the one at t4)                                                                      ",{}]],"12":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"13":[["\")                                                                                                  ",{}]],"14":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"15":[[" R\")                                                                                                ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"17":[["                j ksl2                                  #continue the loop                          ",{}]],"18":[["endkl2:                                                                                             ",{}]],"19":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"20":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"21":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"22":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"24":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"25":[["                jal encryptblock                #encrypt                                            ",{}]],"26":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"27":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"28":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"29":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"30":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"31":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"32":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"33":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10141,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"1":[["                jal encryptblock                #encrypt                                            ",{}]],"2":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"3":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"4":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"5":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"6":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"7":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"8":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"9":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"10":[["the array(after the one at t4)                                                                      ",{}]],"11":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"12":[["\")                                                                                                  ",{}]],"13":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"14":[[" R\")                                                                                                ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"16":[["                j ksl2                                  #continue the loop                          ",{}]],"17":[["endkl2:                                                                                             ",{}]],"18":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"19":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"20":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"21":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"23":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"24":[["                jal encryptblock                #encrypt                                            ",{}]],"25":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"26":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"27":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"28":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"29":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"30":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"31":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"32":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"33":[["the array(after the one at t4)                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10118,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                jal encryptblock                #encrypt                                            ",{}]],"1":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"2":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"3":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"4":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"5":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"6":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"7":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"8":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"9":[["the array(after the one at t4)                                                                      ",{}]],"10":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"11":[["\")                                                                                                  ",{}]],"12":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"13":[[" R\")                                                                                                ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"15":[["                j ksl2                                  #continue the loop                          ",{}]],"16":[["endkl2:                                                                                             ",{}]],"17":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"18":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"19":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"20":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"22":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"23":[["                jal encryptblock                #encrypt                                            ",{}]],"24":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"25":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"26":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"27":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"28":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"29":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"30":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"31":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"32":[["the array(after the one at t4)                                                                      ",{}]],"33":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100947,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"1":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"2":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"3":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"4":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"5":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"6":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"7":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"8":[["the array(after the one at t4)                                                                      ",{}]],"9":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"10":[["\")                                                                                                  ",{}]],"11":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"12":[[" R\")                                                                                                ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"14":[["                j ksl2                                  #continue the loop                          ",{}]],"15":[["endkl2:                                                                                             ",{}]],"16":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"17":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"18":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"19":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"21":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"22":[["                jal encryptblock                #encrypt                                            ",{}]],"23":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"24":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"25":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"26":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"27":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"28":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"29":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"30":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"31":[["the array(after the one at t4)                                                                      ",{}]],"32":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"33":[["= L\")                                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099679,{"lines":{"0":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"1":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"2":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"3":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"4":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"5":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"6":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"7":[["the array(after the one at t4)                                                                      ",{}]],"8":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"9":[["\")                                                                                                  ",{}]],"10":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"11":[[" R\")                                                                                                ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"13":[["                j ksl2                                  #continue the loop                          ",{}]],"14":[["endkl2:                                                                                             ",{}]],"15":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"16":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"17":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"18":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"20":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"21":[["                jal encryptblock                #encrypt                                            ",{}]],"22":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"23":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"24":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"25":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"26":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"27":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"28":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"29":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"30":[["the array(after the one at t4)                                                                      ",{}]],"31":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"32":[["= L\")                                                                                               ",{}]],"33":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]]}}],[0.101272,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"1":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"2":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"3":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"4":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"5":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"6":[["the array(after the one at t4)                                                                      ",{}]],"7":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"8":[["\")                                                                                                  ",{}]],"9":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"10":[[" R\")                                                                                                ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"12":[["                j ksl2                                  #continue the loop                          ",{}]],"13":[["endkl2:                                                                                             ",{}]],"14":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"15":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"16":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"17":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"19":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"20":[["                jal encryptblock                #encrypt                                            ",{}]],"21":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"22":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"23":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"24":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"25":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"26":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"27":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"28":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"29":[["the array(after the one at t4)                                                                      ",{}]],"30":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"31":[["= L\")                                                                                               ",{}]],"32":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"33":[["] = R\")                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100879,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.499999999999999e-05,{"lines":{"0":[["kl2r:   la $t3, plist                   #load the P array's address into t3                         ",{}]],"1":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"2":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"3":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"4":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"5":[["the array(after the one at t4)                                                                      ",{}]],"6":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"7":[["\")                                                                                                  ",{}]],"8":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"9":[[" R\")                                                                                                ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"11":[["                j ksl2                                  #continue the loop                          ",{}]],"12":[["endkl2:                                                                                             ",{}]],"13":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"14":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"15":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"16":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"18":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"19":[["                jal encryptblock                #encrypt                                            ",{}]],"20":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"21":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"22":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"23":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"24":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"25":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"26":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"27":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"28":[["the array(after the one at t4)                                                                      ",{}]],"29":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"30":[["= L\")                                                                                               ",{}]],"31":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"32":[["] = R\")                                                                                             ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100943,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"1":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"2":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"3":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"4":[["the array(after the one at t4)                                                                      ",{}]],"5":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"6":[["\")                                                                                                  ",{}]],"7":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"8":[[" R\")                                                                                                ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"10":[["                j ksl2                                  #continue the loop                          ",{}]],"11":[["endkl2:                                                                                             ",{}]],"12":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"13":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"14":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"15":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"17":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"18":[["                jal encryptblock                #encrypt                                            ",{}]],"19":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"20":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"21":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"22":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"23":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"24":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"25":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"26":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"27":[["the array(after the one at t4)                                                                      ",{}]],"28":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"29":[["= L\")                                                                                               ",{}]],"30":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"31":[["] = R\")                                                                                             ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"33":[["                j ksl3                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101056,{"lines":{"0":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"1":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"2":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"3":[["the array(after the one at t4)                                                                      ",{}]],"4":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"5":[["\")                                                                                                  ",{}]],"6":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"7":[[" R\")                                                                                                ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"9":[["                j ksl2                                  #continue the loop                          ",{}]],"10":[["endkl2:                                                                                             ",{}]],"11":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"12":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"13":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"14":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"16":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"17":[["                jal encryptblock                #encrypt                                            ",{}]],"18":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"19":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"20":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"21":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"22":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"23":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"24":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"25":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"26":[["the array(after the one at t4)                                                                      ",{}]],"27":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"28":[["= L\")                                                                                               ",{}]],"29":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"30":[["] = R\")                                                                                             ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"32":[["                j ksl3                                  #continue the loop                          ",{}]],"33":[["endkl3:                                                                                             ",{}]]}}],[0.101167,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"1":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"2":[["the array(after the one at t4)                                                                      ",{}]],"3":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"4":[["\")                                                                                                  ",{}]],"5":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"6":[[" R\")                                                                                                ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"8":[["                j ksl2                                  #continue the loop                          ",{}]],"9":[["endkl2:                                                                                             ",{}]],"10":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"11":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"12":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"13":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"15":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"16":[["                jal encryptblock                #encrypt                                            ",{}]],"17":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"18":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"19":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"20":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"21":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"22":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"23":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"24":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"25":[["the array(after the one at t4)                                                                      ",{}]],"26":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"27":[["= L\")                                                                                               ",{}]],"28":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"29":[["] = R\")                                                                                             ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"31":[["                j ksl3                                  #continue the loop                          ",{}]],"32":[["endkl3:                                                                                             ",{}]],"33":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100776,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"1":[["the array(after the one at t4)                                                                      ",{}]],"2":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"3":[["\")                                                                                                  ",{}]],"4":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"5":[[" R\")                                                                                                ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"7":[["                j ksl2                                  #continue the loop                          ",{}]],"8":[["endkl2:                                                                                             ",{}]],"9":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"10":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"11":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"12":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"14":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"15":[["                jal encryptblock                #encrypt                                            ",{}]],"16":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"17":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"18":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"19":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"20":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"21":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"22":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"23":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"24":[["the array(after the one at t4)                                                                      ",{}]],"25":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"26":[["= L\")                                                                                               ",{}]],"27":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"28":[["] = R\")                                                                                             ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"30":[["                j ksl3                                  #continue the loop                          ",{}]],"31":[["endkl3:                                                                                             ",{}]],"32":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"33":[["ndition)                                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101032,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["the array(after the one at t4)                                                                      ",{}]],"1":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"2":[["\")                                                                                                  ",{}]],"3":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"4":[[" R\")                                                                                                ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"6":[["                j ksl2                                  #continue the loop                          ",{}]],"7":[["endkl2:                                                                                             ",{}]],"8":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"9":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"10":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"11":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"13":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"14":[["                jal encryptblock                #encrypt                                            ",{}]],"15":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"16":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"17":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"18":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"19":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"20":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"21":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"22":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"23":[["the array(after the one at t4)                                                                      ",{}]],"24":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"25":[["= L\")                                                                                               ",{}]],"26":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"27":[["] = R\")                                                                                             ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"29":[["                j ksl3                                  #continue the loop                          ",{}]],"30":[["endkl3:                                                                                             ",{}]],"31":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"32":[["ndition)                                                                                            ",{}]],"33":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10133,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"P[i] = L",{}]],"1":[["\")                                                                                                  ",{}]],"2":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"3":[[" R\")                                                                                                ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"5":[["                j ksl2                                  #continue the loop                          ",{}]],"6":[["endkl2:                                                                                             ",{}]],"7":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"8":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"9":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"10":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"12":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"13":[["                jal encryptblock                #encrypt                                            ",{}]],"14":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"15":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"16":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"17":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"18":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"19":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"20":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"21":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"22":[["the array(after the one at t4)                                                                      ",{}]],"23":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"24":[["= L\")                                                                                               ",{}]],"25":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"26":[["] = R\")                                                                                             ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"28":[["                j ksl3                                  #continue the loop                          ",{}]],"29":[["endkl3:                                                                                             ",{}]],"30":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"31":[["ndition)                                                                                            ",{}]],"32":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100593,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.2e-05,{"lines":{"0":[["\")                                                                                                  ",{}]],"1":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"2":[[" R\")                                                                                                ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"4":[["                j ksl2                                  #continue the loop                          ",{}]],"5":[["endkl2:                                                                                             ",{}]],"6":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"7":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"8":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"9":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"11":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"12":[["                jal encryptblock                #encrypt                                            ",{}]],"13":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"14":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"15":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"16":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"17":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"18":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"19":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"20":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"21":[["the array(after the one at t4)                                                                      ",{}]],"22":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"23":[["= L\")                                                                                               ",{}]],"24":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"25":[["] = R\")                                                                                             ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"27":[["                j ksl3                                  #continue the loop                          ",{}]],"28":[["endkl3:                                                                                             ",{}]],"29":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"30":[["ndition)                                                                                            ",{}]],"31":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"33":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100549,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"P[i+1] =",{}]],"1":[[" R\")                                                                                                ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"3":[["                j ksl2                                  #continue the loop                          ",{}]],"4":[["endkl2:                                                                                             ",{}]],"5":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"6":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"7":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"8":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"10":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"11":[["                jal encryptblock                #encrypt                                            ",{}]],"12":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"13":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"14":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"15":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"16":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"17":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"18":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"19":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"20":[["the array(after the one at t4)                                                                      ",{}]],"21":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"22":[["= L\")                                                                                               ",{}]],"23":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"24":[["] = R\")                                                                                             ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"26":[["                j ksl3                                  #continue the loop                          ",{}]],"27":[["endkl3:                                                                                             ",{}]],"28":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"29":[["ndition)                                                                                            ",{}]],"30":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"32":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"33":[["                jal encryptblock                #encrypt                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100168,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[[" R\")                                                                                                ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"2":[["                j ksl2                                  #continue the loop                          ",{}]],"3":[["endkl2:                                                                                             ",{}]],"4":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"5":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"6":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"7":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"9":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"10":[["                jal encryptblock                #encrypt                                            ",{}]],"11":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"12":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"13":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"14":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"15":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"16":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"17":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"18":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"19":[["the array(after the one at t4)                                                                      ",{}]],"20":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"21":[["= L\")                                                                                               ",{}]],"22":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"23":[["] = R\")                                                                                             ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"25":[["                j ksl3                                  #continue the loop                          ",{}]],"26":[["endkl3:                                                                                             ",{}]],"27":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"28":[["ndition)                                                                                            ",{}]],"29":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"31":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"32":[["                jal encryptblock                #encrypt                                            ",{}]],"33":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099756,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"1":[["                j ksl2                                  #continue the loop                          ",{}]],"2":[["endkl2:                                                                                             ",{}]],"3":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"4":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"5":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"6":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"8":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"9":[["                jal encryptblock                #encrypt                                            ",{}]],"10":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"11":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"12":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"13":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"14":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"15":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"16":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"17":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"18":[["the array(after the one at t4)                                                                      ",{}]],"19":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"20":[["= L\")                                                                                               ",{}]],"21":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"22":[["] = R\")                                                                                             ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"24":[["                j ksl3                                  #continue the loop                          ",{}]],"25":[["endkl3:                                                                                             ",{}]],"26":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"27":[["ndition)                                                                                            ",{}]],"28":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"30":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"31":[["                jal encryptblock                #encrypt                                            ",{}]],"32":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"33":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101753,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["                j ksl2                                  #continue the loop                          ",{}]],"1":[["endkl2:                                                                                             ",{}]],"2":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"3":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"4":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"5":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"7":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"8":[["                jal encryptblock                #encrypt                                            ",{}]],"9":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"10":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"11":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"12":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"13":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"14":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"15":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"16":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"17":[["the array(after the one at t4)                                                                      ",{}]],"18":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"19":[["= L\")                                                                                               ",{}]],"20":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"21":[["] = R\")                                                                                             ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"23":[["                j ksl3                                  #continue the loop                          ",{}]],"24":[["endkl3:                                                                                             ",{}]],"25":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"26":[["ndition)                                                                                            ",{}]],"27":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"29":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"30":[["                jal encryptblock                #encrypt                                            ",{}]],"31":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"32":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"33":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.0983,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[3.9e-05,{"lines":{"0":[["endkl2:                                                                                             ",{}]],"1":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"2":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"3":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"4":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"6":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"7":[["                jal encryptblock                #encrypt                                            ",{}]],"8":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"9":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"10":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"11":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"12":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"13":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"14":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"15":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"16":[["the array(after the one at t4)                                                                      ",{}]],"17":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"18":[["= L\")                                                                                               ",{}]],"19":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"20":[["] = R\")                                                                                             ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"22":[["                j ksl3                                  #continue the loop                          ",{}]],"23":[["endkl3:                                                                                             ",{}]],"24":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"25":[["ndition)                                                                                            ",{}]],"26":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"28":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"29":[["                jal encryptblock                #encrypt                                            ",{}]],"30":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"31":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"32":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"33":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10073,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        li $t0, 0                               #set t0 to 0 for looping(loop variable)             ",{}]],"1":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"2":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"3":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"5":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"6":[["                jal encryptblock                #encrypt                                            ",{}]],"7":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"8":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"9":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"10":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"11":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"12":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"13":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"14":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"15":[["the array(after the one at t4)                                                                      ",{}]],"16":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"17":[["= L\")                                                                                               ",{}]],"18":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"19":[["] = R\")                                                                                             ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"21":[["                j ksl3                                  #continue the loop                          ",{}]],"22":[["endkl3:                                                                                             ",{}]],"23":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"24":[["ndition)                                                                                            ",{}]],"25":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"27":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"28":[["                jal encryptblock                #encrypt                                            ",{}]],"29":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"30":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"31":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"32":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"33":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100289,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["        li $t1, 256                             #set t1 to 4 for looping(end condition)             ",{}]],"1":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"2":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"4":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"5":[["                jal encryptblock                #encrypt                                            ",{}]],"6":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"7":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"8":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"9":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"10":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"11":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"12":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"13":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"14":[["the array(after the one at t4)                                                                      ",{}]],"15":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"16":[["= L\")                                                                                               ",{}]],"17":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"18":[["] = R\")                                                                                             ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"20":[["                j ksl3                                  #continue the loop                          ",{}]],"21":[["endkl3:                                                                                             ",{}]],"22":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"23":[["ndition)                                                                                            ",{}]],"24":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"26":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"27":[["                jal encryptblock                #encrypt                                            ",{}]],"28":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"29":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"30":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"31":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"32":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"33":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100116,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["#we're using 4 loops here instead of a nested loop due to the way we've set up our S boxes          ",{}]],"1":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"3":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"4":[["                jal encryptblock                #encrypt                                            ",{}]],"5":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"6":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"7":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"8":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"9":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"10":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"11":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"12":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"13":[["the array(after the one at t4)                                                                      ",{}]],"14":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"15":[["= L\")                                                                                               ",{}]],"16":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"17":[["] = R\")                                                                                             ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"19":[["                j ksl3                                  #continue the loop                          ",{}]],"20":[["endkl3:                                                                                             ",{}]],"21":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"22":[["ndition)                                                                                            ",{}]],"23":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"25":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"26":[["                jal encryptblock                #encrypt                                            ",{}]],"27":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"28":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"29":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"30":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"31":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"32":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"33":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100031,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["ksl3:   beq $t0, $t1, endkl3    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"2":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"3":[["                jal encryptblock                #encrypt                                            ",{}]],"4":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"5":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"6":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"7":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"8":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"9":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"10":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"11":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"12":[["the array(after the one at t4)                                                                      ",{}]],"13":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"14":[["= L\")                                                                                               ",{}]],"15":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"16":[["] = R\")                                                                                             ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"18":[["                j ksl3                                  #continue the loop                          ",{}]],"19":[["endkl3:                                                                                             ",{}]],"20":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"21":[["ndition)                                                                                            ",{}]],"22":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"24":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"25":[["                jal encryptblock                #encrypt                                            ",{}]],"26":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"27":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"28":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"29":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"30":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"31":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"32":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"33":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100096,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.1e-05,{"lines":{"0":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"1":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"2":[["                jal encryptblock                #encrypt                                            ",{}]],"3":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"4":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"5":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"6":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"7":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"8":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"9":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"10":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"11":[["the array(after the one at t4)                                                                      ",{}]],"12":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"13":[["= L\")                                                                                               ",{}]],"14":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"15":[["] = R\")                                                                                             ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"17":[["                j ksl3                                  #continue the loop                          ",{}]],"18":[["endkl3:                                                                                             ",{}]],"19":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"20":[["ndition)                                                                                            ",{}]],"21":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"23":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"24":[["                jal encryptblock                #encrypt                                            ",{}]],"25":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"26":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"27":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"28":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"29":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"30":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"31":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"32":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"33":[["the array(after the one at t4)                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100036,{"lines":{"0":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"1":[["                jal encryptblock                #encrypt                                            ",{}]],"2":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"3":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"4":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"5":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"6":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"7":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"8":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"9":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"10":[["the array(after the one at t4)                                                                      ",{}]],"11":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"12":[["= L\")                                                                                               ",{}]],"13":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"14":[["] = R\")                                                                                             ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"16":[["                j ksl3                                  #continue the loop                          ",{}]],"17":[["endkl3:                                                                                             ",{}]],"18":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"19":[["ndition)                                                                                            ",{}]],"20":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"22":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"23":[["                jal encryptblock                #encrypt                                            ",{}]],"24":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"25":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"26":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"27":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"28":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"29":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"30":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"31":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"32":[["the array(after the one at t4)                                                                      ",{}]],"33":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]]}}],[0.100232,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                jal encryptblock                #encrypt                                            ",{}]],"1":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"2":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"3":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"4":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"5":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"6":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"7":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"8":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"9":[["the array(after the one at t4)                                                                      ",{}]],"10":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"11":[["= L\")                                                                                               ",{}]],"12":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"13":[["] = R\")                                                                                             ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"15":[["                j ksl3                                  #continue the loop                          ",{}]],"16":[["endkl3:                                                                                             ",{}]],"17":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"18":[["ndition)                                                                                            ",{}]],"19":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"21":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"22":[["                jal encryptblock                #encrypt                                            ",{}]],"23":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"24":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"25":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"26":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"27":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"28":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"29":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"30":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"31":[["the array(after the one at t4)                                                                      ",{}]],"32":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"33":[["= L\")                                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100104,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"1":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"2":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"3":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"4":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"5":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"6":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"7":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"8":[["the array(after the one at t4)                                                                      ",{}]],"9":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"10":[["= L\")                                                                                               ",{}]],"11":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"12":[["] = R\")                                                                                             ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"14":[["                j ksl3                                  #continue the loop                          ",{}]],"15":[["endkl3:                                                                                             ",{}]],"16":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"17":[["ndition)                                                                                            ",{}]],"18":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"20":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"21":[["                jal encryptblock                #encrypt                                            ",{}]],"22":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"23":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"24":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"25":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"26":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"27":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"28":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"29":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"30":[["the array(after the one at t4)                                                                      ",{}]],"31":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"32":[["= L\")                                                                                               ",{}]],"33":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101356,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5e-05,{"lines":{"0":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"1":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"2":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"3":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"4":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"5":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"6":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"7":[["the array(after the one at t4)                                                                      ",{}]],"8":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"9":[["= L\")                                                                                               ",{}]],"10":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"11":[["] = R\")                                                                                             ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"13":[["                j ksl3                                  #continue the loop                          ",{}]],"14":[["endkl3:                                                                                             ",{}]],"15":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"16":[["ndition)                                                                                            ",{}]],"17":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"19":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"20":[["                jal encryptblock                #encrypt                                            ",{}]],"21":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"22":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"23":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"24":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"25":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"26":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"27":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"28":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"29":[["the array(after the one at t4)                                                                      ",{}]],"30":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"31":[["= L\")                                                                                               ",{}]],"32":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"33":[["] = R\")                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099186,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"1":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"2":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"3":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"4":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"5":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"6":[["the array(after the one at t4)                                                                      ",{}]],"7":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"8":[["= L\")                                                                                               ",{}]],"9":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"10":[["] = R\")                                                                                             ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"12":[["                j ksl3                                  #continue the loop                          ",{}]],"13":[["endkl3:                                                                                             ",{}]],"14":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"15":[["ndition)                                                                                            ",{}]],"16":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"18":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"19":[["                jal encryptblock                #encrypt                                            ",{}]],"20":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"21":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"22":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"23":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"24":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"25":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"26":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"27":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"28":[["the array(after the one at t4)                                                                      ",{}]],"29":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"30":[["= L\")                                                                                               ",{}]],"31":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"32":[["] = R\")                                                                                             ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099651,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.2e-05,{"lines":{"0":[["kl3r:   la $t3, slistone                #load the first S box's address into t3                     ",{}]],"1":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"2":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"3":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"4":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"5":[["the array(after the one at t4)                                                                      ",{}]],"6":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"7":[["= L\")                                                                                               ",{}]],"8":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"9":[["] = R\")                                                                                             ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"11":[["                j ksl3                                  #continue the loop                          ",{}]],"12":[["endkl3:                                                                                             ",{}]],"13":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"14":[["ndition)                                                                                            ",{}]],"15":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"17":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"18":[["                jal encryptblock                #encrypt                                            ",{}]],"19":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"20":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"21":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"22":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"23":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"24":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"25":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"26":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"27":[["the array(after the one at t4)                                                                      ",{}]],"28":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"29":[["= L\")                                                                                               ",{}]],"30":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"31":[["] = R\")                                                                                             ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"33":[["                j ksl4                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100412,{"lines":{"0":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"1":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"2":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"3":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"4":[["the array(after the one at t4)                                                                      ",{}]],"5":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"6":[["= L\")                                                                                               ",{}]],"7":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"8":[["] = R\")                                                                                             ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"10":[["                j ksl3                                  #continue the loop                          ",{}]],"11":[["endkl3:                                                                                             ",{}]],"12":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"13":[["ndition)                                                                                            ",{}]],"14":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"16":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"17":[["                jal encryptblock                #encrypt                                            ",{}]],"18":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"19":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"20":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"21":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"22":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"23":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"24":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"25":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"26":[["the array(after the one at t4)                                                                      ",{}]],"27":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"28":[["= L\")                                                                                               ",{}]],"29":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"30":[["] = R\")                                                                                             ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"32":[["                j ksl4                                  #continue the loop                          ",{}]],"33":[["endkl4:                                                                                             ",{}]]}}],[0.101413,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"1":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"2":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"3":[["the array(after the one at t4)                                                                      ",{}]],"4":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"5":[["= L\")                                                                                               ",{}]],"6":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"7":[["] = R\")                                                                                             ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"9":[["                j ksl3                                  #continue the loop                          ",{}]],"10":[["endkl3:                                                                                             ",{}]],"11":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"12":[["ndition)                                                                                            ",{}]],"13":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"15":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"16":[["                jal encryptblock                #encrypt                                            ",{}]],"17":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"18":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"19":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"20":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"21":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"22":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"23":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"24":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"25":[["the array(after the one at t4)                                                                      ",{}]],"26":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"27":[["= L\")                                                                                               ",{}]],"28":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"29":[["] = R\")                                                                                             ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"31":[["                j ksl4                                  #continue the loop                          ",{}]],"32":[["endkl4:                                                                                             ",{}]],"33":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101016,{"lines":{"0":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"1":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"2":[["the array(after the one at t4)                                                                      ",{}]],"3":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"4":[["= L\")                                                                                               ",{}]],"5":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"6":[["] = R\")                                                                                             ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"8":[["                j ksl3                                  #continue the loop                          ",{}]],"9":[["endkl3:                                                                                             ",{}]],"10":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"11":[["ndition)                                                                                            ",{}]],"12":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"14":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"15":[["                jal encryptblock                #encrypt                                            ",{}]],"16":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"17":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"18":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"19":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"20":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"21":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"22":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"23":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"24":[["the array(after the one at t4)                                                                      ",{}]],"25":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"26":[["= L\")                                                                                               ",{}]],"27":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"28":[["] = R\")                                                                                             ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"30":[["                j ksl4                                  #continue the loop                          ",{}]],"31":[["endkl4:                                                                                             ",{}]],"32":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"33":[["ndition)                                                                                            ",{}]]}}],[0.10093,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"1":[["the array(after the one at t4)                                                                      ",{}]],"2":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"3":[["= L\")                                                                                               ",{}]],"4":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"5":[["] = R\")                                                                                             ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"7":[["                j ksl3                                  #continue the loop                          ",{}]],"8":[["endkl3:                                                                                             ",{}]],"9":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"10":[["ndition)                                                                                            ",{}]],"11":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"13":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"14":[["                jal encryptblock                #encrypt                                            ",{}]],"15":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"16":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"17":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"18":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"19":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"20":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"21":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"22":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"23":[["the array(after the one at t4)                                                                      ",{}]],"24":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"25":[["= L\")                                                                                               ",{}]],"26":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"27":[["] = R\")                                                                                             ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"29":[["                j ksl4                                  #continue the loop                          ",{}]],"30":[["endkl4:                                                                                             ",{}]],"31":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"32":[["ndition)                                                                                            ",{}]],"33":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100695,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["the array(after the one at t4)                                                                      ",{}]],"1":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"2":[["= L\")                                                                                               ",{}]],"3":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"4":[["] = R\")                                                                                             ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"6":[["                j ksl3                                  #continue the loop                          ",{}]],"7":[["endkl3:                                                                                             ",{}]],"8":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"9":[["ndition)                                                                                            ",{}]],"10":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"12":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"13":[["                jal encryptblock                #encrypt                                            ",{}]],"14":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"15":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"16":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"17":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"18":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"19":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"20":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"21":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"22":[["the array(after the one at t4)                                                                      ",{}]],"23":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"24":[["= L\")                                                                                               ",{}]],"25":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"26":[["] = R\")                                                                                             ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"28":[["                j ksl4                                  #continue the loop                          ",{}]],"29":[["endkl4:                                                                                             ",{}]],"30":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"31":[["ndition)                                                                                            ",{}]],"32":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10145,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[0][j] ",{}]],"1":[["= L\")                                                                                               ",{}]],"2":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"3":[["] = R\")                                                                                             ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"5":[["                j ksl3                                  #continue the loop                          ",{}]],"6":[["endkl3:                                                                                             ",{}]],"7":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"8":[["ndition)                                                                                            ",{}]],"9":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"11":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"12":[["                jal encryptblock                #encrypt                                            ",{}]],"13":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"14":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"15":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"16":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"17":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"18":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"19":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"20":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"21":[["the array(after the one at t4)                                                                      ",{}]],"22":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"23":[["= L\")                                                                                               ",{}]],"24":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"25":[["] = R\")                                                                                             ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"27":[["                j ksl4                                  #continue the loop                          ",{}]],"28":[["endkl4:                                                                                             ",{}]],"29":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"30":[["ndition)                                                                                            ",{}]],"31":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"33":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100834,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.4e-05,{"lines":{"0":[["= L\")                                                                                               ",{}]],"1":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"2":[["] = R\")                                                                                             ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"4":[["                j ksl3                                  #continue the loop                          ",{}]],"5":[["endkl3:                                                                                             ",{}]],"6":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"7":[["ndition)                                                                                            ",{}]],"8":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"10":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"11":[["                jal encryptblock                #encrypt                                            ",{}]],"12":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"13":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"14":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"15":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"16":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"17":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"18":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"19":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"20":[["the array(after the one at t4)                                                                      ",{}]],"21":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"22":[["= L\")                                                                                               ",{}]],"23":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"24":[["] = R\")                                                                                             ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"26":[["                j ksl4                                  #continue the loop                          ",{}]],"27":[["endkl4:                                                                                             ",{}]],"28":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"29":[["ndition)                                                                                            ",{}]],"30":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"32":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"33":[["                jal encryptblock                #encrypt                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100643,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[0][j+1",{}]],"1":[["] = R\")                                                                                             ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"3":[["                j ksl3                                  #continue the loop                          ",{}]],"4":[["endkl3:                                                                                             ",{}]],"5":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"6":[["ndition)                                                                                            ",{}]],"7":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"9":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"10":[["                jal encryptblock                #encrypt                                            ",{}]],"11":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"12":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"13":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"14":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"15":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"16":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"17":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"18":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"19":[["the array(after the one at t4)                                                                      ",{}]],"20":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"21":[["= L\")                                                                                               ",{}]],"22":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"23":[["] = R\")                                                                                             ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"25":[["                j ksl4                                  #continue the loop                          ",{}]],"26":[["endkl4:                                                                                             ",{}]],"27":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"28":[["ndition)                                                                                            ",{}]],"29":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"31":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"32":[["                jal encryptblock                #encrypt                                            ",{}]],"33":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101044,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.8e-05,{"lines":{"0":[["] = R\")                                                                                             ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"2":[["                j ksl3                                  #continue the loop                          ",{}]],"3":[["endkl3:                                                                                             ",{}]],"4":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"5":[["ndition)                                                                                            ",{}]],"6":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"8":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"9":[["                jal encryptblock                #encrypt                                            ",{}]],"10":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"11":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"12":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"13":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"14":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"15":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"16":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"17":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"18":[["the array(after the one at t4)                                                                      ",{}]],"19":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"20":[["= L\")                                                                                               ",{}]],"21":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"22":[["] = R\")                                                                                             ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"24":[["                j ksl4                                  #continue the loop                          ",{}]],"25":[["endkl4:                                                                                             ",{}]],"26":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"27":[["ndition)                                                                                            ",{}]],"28":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"30":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"31":[["                jal encryptblock                #encrypt                                            ",{}]],"32":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"33":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101395,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.1e-05,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"1":[["                j ksl3                                  #continue the loop                          ",{}]],"2":[["endkl3:                                                                                             ",{}]],"3":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"4":[["ndition)                                                                                            ",{}]],"5":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"7":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"8":[["                jal encryptblock                #encrypt                                            ",{}]],"9":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"10":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"11":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"12":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"13":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"14":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"15":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"16":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"17":[["the array(after the one at t4)                                                                      ",{}]],"18":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"19":[["= L\")                                                                                               ",{}]],"20":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"21":[["] = R\")                                                                                             ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"23":[["                j ksl4                                  #continue the loop                          ",{}]],"24":[["endkl4:                                                                                             ",{}]],"25":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"26":[["ndition)                                                                                            ",{}]],"27":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"29":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"30":[["                jal encryptblock                #encrypt                                            ",{}]],"31":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"32":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"33":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100533,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["                j ksl3                                  #continue the loop                          ",{}]],"1":[["endkl3:                                                                                             ",{}]],"2":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"3":[["ndition)                                                                                            ",{}]],"4":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"6":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"7":[["                jal encryptblock                #encrypt                                            ",{}]],"8":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"9":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"10":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"11":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"12":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"13":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"14":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"15":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"16":[["the array(after the one at t4)                                                                      ",{}]],"17":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"18":[["= L\")                                                                                               ",{}]],"19":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"20":[["] = R\")                                                                                             ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"22":[["                j ksl4                                  #continue the loop                          ",{}]],"23":[["endkl4:                                                                                             ",{}]],"24":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"25":[["ndition)                                                                                            ",{}]],"26":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"28":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"29":[["                jal encryptblock                #encrypt                                            ",{}]],"30":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"31":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"32":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"33":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100987,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["endkl3:                                                                                             ",{}]],"1":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"2":[["ndition)                                                                                            ",{}]],"3":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"5":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"6":[["                jal encryptblock                #encrypt                                            ",{}]],"7":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"8":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"9":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"10":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"11":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"12":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"13":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"14":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"15":[["the array(after the one at t4)                                                                      ",{}]],"16":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"17":[["= L\")                                                                                               ",{}]],"18":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"19":[["] = R\")                                                                                             ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"21":[["                j ksl4                                  #continue the loop                          ",{}]],"22":[["endkl4:                                                                                             ",{}]],"23":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"24":[["ndition)                                                                                            ",{}]],"25":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"27":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"28":[["                jal encryptblock                #encrypt                                            ",{}]],"29":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"30":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"31":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"32":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"33":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10135,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"1":[["ndition)                                                                                            ",{}]],"2":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"4":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"5":[["                jal encryptblock                #encrypt                                            ",{}]],"6":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"7":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"8":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"9":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"10":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"11":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"12":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"13":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"14":[["the array(after the one at t4)                                                                      ",{}]],"15":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"16":[["= L\")                                                                                               ",{}]],"17":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"18":[["] = R\")                                                                                             ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"20":[["                j ksl4                                  #continue the loop                          ",{}]],"21":[["endkl4:                                                                                             ",{}]],"22":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"23":[["ndition)                                                                                            ",{}]],"24":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"26":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"27":[["                jal encryptblock                #encrypt                                            ",{}]],"28":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"29":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"30":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"31":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"32":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"33":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100762,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.8e-05,{"lines":{"0":[["ndition)                                                                                            ",{}]],"1":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"3":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"4":[["                jal encryptblock                #encrypt                                            ",{}]],"5":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"6":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"7":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"8":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"9":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"10":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"11":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"12":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"13":[["the array(after the one at t4)                                                                      ",{}]],"14":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"15":[["= L\")                                                                                               ",{}]],"16":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"17":[["] = R\")                                                                                             ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"19":[["                j ksl4                                  #continue the loop                          ",{}]],"20":[["endkl4:                                                                                             ",{}]],"21":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"22":[["ndition)                                                                                            ",{}]],"23":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"25":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"26":[["                jal encryptblock                #encrypt                                            ",{}]],"27":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"28":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"29":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"30":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"31":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"32":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"33":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100141,{"lines":{"0":[["ksl4:   beq $t0, $t1, endkl4    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"2":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"3":[["                jal encryptblock                #encrypt                                            ",{}]],"4":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"5":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"6":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"7":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"8":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"9":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"10":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"11":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"12":[["the array(after the one at t4)                                                                      ",{}]],"13":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"14":[["= L\")                                                                                               ",{}]],"15":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"16":[["] = R\")                                                                                             ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"18":[["                j ksl4                                  #continue the loop                          ",{}]],"19":[["endkl4:                                                                                             ",{}]],"20":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"21":[["ndition)                                                                                            ",{}]],"22":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"24":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"25":[["                jal encryptblock                #encrypt                                            ",{}]],"26":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"27":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"28":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"29":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"30":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"31":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"32":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"33":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]]}}],[0.101111,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"1":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"2":[["                jal encryptblock                #encrypt                                            ",{}]],"3":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"4":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"5":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"6":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"7":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"8":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"9":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"10":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"11":[["the array(after the one at t4)                                                                      ",{}]],"12":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"13":[["= L\")                                                                                               ",{}]],"14":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"15":[["] = R\")                                                                                             ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"17":[["                j ksl4                                  #continue the loop                          ",{}]],"18":[["endkl4:                                                                                             ",{}]],"19":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"20":[["ndition)                                                                                            ",{}]],"21":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"23":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"24":[["                jal encryptblock                #encrypt                                            ",{}]],"25":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"26":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"27":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"28":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"29":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"30":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"31":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"32":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"33":[["the array(after the one at t4)                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101209,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"1":[["                jal encryptblock                #encrypt                                            ",{}]],"2":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"3":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"4":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"5":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"6":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"7":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"8":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"9":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"10":[["the array(after the one at t4)                                                                      ",{}]],"11":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"12":[["= L\")                                                                                               ",{}]],"13":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"14":[["] = R\")                                                                                             ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"16":[["                j ksl4                                  #continue the loop                          ",{}]],"17":[["endkl4:                                                                                             ",{}]],"18":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"19":[["ndition)                                                                                            ",{}]],"20":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"22":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"23":[["                jal encryptblock                #encrypt                                            ",{}]],"24":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"25":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"26":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"27":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"28":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"29":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"30":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"31":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"32":[["the array(after the one at t4)                                                                      ",{}]],"33":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100153,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.600000000000001e-05,{"lines":{"0":[["                jal encryptblock                #encrypt                                            ",{}]],"1":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"2":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"3":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"4":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"5":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"6":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"7":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"8":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"9":[["the array(after the one at t4)                                                                      ",{}]],"10":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"11":[["= L\")                                                                                               ",{}]],"12":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"13":[["] = R\")                                                                                             ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"15":[["                j ksl4                                  #continue the loop                          ",{}]],"16":[["endkl4:                                                                                             ",{}]],"17":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"18":[["ndition)                                                                                            ",{}]],"19":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"21":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"22":[["                jal encryptblock                #encrypt                                            ",{}]],"23":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"24":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"25":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"26":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"27":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"28":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"29":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"30":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"31":[["the array(after the one at t4)                                                                      ",{}]],"32":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"33":[["= L\")                                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100845,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"1":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"2":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"3":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"4":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"5":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"6":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"7":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"8":[["the array(after the one at t4)                                                                      ",{}]],"9":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"10":[["= L\")                                                                                               ",{}]],"11":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"12":[["] = R\")                                                                                             ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"14":[["                j ksl4                                  #continue the loop                          ",{}]],"15":[["endkl4:                                                                                             ",{}]],"16":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"17":[["ndition)                                                                                            ",{}]],"18":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"20":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"21":[["                jal encryptblock                #encrypt                                            ",{}]],"22":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"23":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"24":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"25":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"26":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"27":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"28":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"29":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"30":[["the array(after the one at t4)                                                                      ",{}]],"31":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"32":[["= L\")                                                                                               ",{}]],"33":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101004,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.4e-05,{"lines":{"0":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"1":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"2":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"3":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"4":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"5":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"6":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"7":[["the array(after the one at t4)                                                                      ",{}]],"8":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"9":[["= L\")                                                                                               ",{}]],"10":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"11":[["] = R\")                                                                                             ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"13":[["                j ksl4                                  #continue the loop                          ",{}]],"14":[["endkl4:                                                                                             ",{}]],"15":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"16":[["ndition)                                                                                            ",{}]],"17":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"19":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"20":[["                jal encryptblock                #encrypt                                            ",{}]],"21":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"22":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"23":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"24":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"25":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"26":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"27":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"28":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"29":[["the array(after the one at t4)                                                                      ",{}]],"30":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"31":[["= L\")                                                                                               ",{}]],"32":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"33":[["] = R\")                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101311,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"1":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"2":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"3":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"4":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"5":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"6":[["the array(after the one at t4)                                                                      ",{}]],"7":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"8":[["= L\")                                                                                               ",{}]],"9":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"10":[["] = R\")                                                                                             ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"12":[["                j ksl4                                  #continue the loop                          ",{}]],"13":[["endkl4:                                                                                             ",{}]],"14":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"15":[["ndition)                                                                                            ",{}]],"16":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"18":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"19":[["                jal encryptblock                #encrypt                                            ",{}]],"20":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"21":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"22":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"23":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"24":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"25":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"26":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"27":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"28":[["the array(after the one at t4)                                                                      ",{}]],"29":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"30":[["= L\")                                                                                               ",{}]],"31":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"32":[["] = R\")                                                                                             ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101106,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["kl4r:   la $t3, slisttwo                #load the second S box's address into t3                    ",{}]],"1":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"2":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"3":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"4":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"5":[["the array(after the one at t4)                                                                      ",{}]],"6":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"7":[["= L\")                                                                                               ",{}]],"8":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"9":[["] = R\")                                                                                             ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"11":[["                j ksl4                                  #continue the loop                          ",{}]],"12":[["endkl4:                                                                                             ",{}]],"13":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"14":[["ndition)                                                                                            ",{}]],"15":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"17":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"18":[["                jal encryptblock                #encrypt                                            ",{}]],"19":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"20":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"21":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"22":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"23":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"24":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"25":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"26":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"27":[["the array(after the one at t4)                                                                      ",{}]],"28":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"29":[["= L\")                                                                                               ",{}]],"30":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"31":[["] = R\")                                                                                             ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"33":[["                j ksl5                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100251,{"lines":{"0":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"1":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"2":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"3":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"4":[["the array(after the one at t4)                                                                      ",{}]],"5":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"6":[["= L\")                                                                                               ",{}]],"7":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"8":[["] = R\")                                                                                             ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"10":[["                j ksl4                                  #continue the loop                          ",{}]],"11":[["endkl4:                                                                                             ",{}]],"12":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"13":[["ndition)                                                                                            ",{}]],"14":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"16":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"17":[["                jal encryptblock                #encrypt                                            ",{}]],"18":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"19":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"20":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"21":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"22":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"23":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"24":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"25":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"26":[["the array(after the one at t4)                                                                      ",{}]],"27":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"28":[["= L\")                                                                                               ",{}]],"29":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"30":[["] = R\")                                                                                             ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"32":[["                j ksl5                                  #continue the loop                          ",{}]],"33":[["endkl5:                                                                                             ",{}]]}}],[0.099774,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.6e-05,{"lines":{"0":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"1":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"2":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"3":[["the array(after the one at t4)                                                                      ",{}]],"4":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"5":[["= L\")                                                                                               ",{}]],"6":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"7":[["] = R\")                                                                                             ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"9":[["                j ksl4                                  #continue the loop                          ",{}]],"10":[["endkl4:                                                                                             ",{}]],"11":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"12":[["ndition)                                                                                            ",{}]],"13":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"15":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"16":[["                jal encryptblock                #encrypt                                            ",{}]],"17":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"18":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"19":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"20":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"21":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"22":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"23":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"24":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"25":[["the array(after the one at t4)                                                                      ",{}]],"26":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"27":[["= L\")                                                                                               ",{}]],"28":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"29":[["] = R\")                                                                                             ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"31":[["                j ksl5                                  #continue the loop                          ",{}]],"32":[["endkl5:                                                                                             ",{}]],"33":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100538,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"1":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"2":[["the array(after the one at t4)                                                                      ",{}]],"3":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"4":[["= L\")                                                                                               ",{}]],"5":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"6":[["] = R\")                                                                                             ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"8":[["                j ksl4                                  #continue the loop                          ",{}]],"9":[["endkl4:                                                                                             ",{}]],"10":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"11":[["ndition)                                                                                            ",{}]],"12":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"14":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"15":[["                jal encryptblock                #encrypt                                            ",{}]],"16":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"17":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"18":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"19":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"20":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"21":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"22":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"23":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"24":[["the array(after the one at t4)                                                                      ",{}]],"25":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"26":[["= L\")                                                                                               ",{}]],"27":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"28":[["] = R\")                                                                                             ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"30":[["                j ksl5                                  #continue the loop                          ",{}]],"31":[["endkl5:                                                                                             ",{}]],"32":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"33":[["ndition)                                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10027,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"1":[["the array(after the one at t4)                                                                      ",{}]],"2":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"3":[["= L\")                                                                                               ",{}]],"4":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"5":[["] = R\")                                                                                             ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"7":[["                j ksl4                                  #continue the loop                          ",{}]],"8":[["endkl4:                                                                                             ",{}]],"9":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"10":[["ndition)                                                                                            ",{}]],"11":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"13":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"14":[["                jal encryptblock                #encrypt                                            ",{}]],"15":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"16":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"17":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"18":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"19":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"20":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"21":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"22":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"23":[["the array(after the one at t4)                                                                      ",{}]],"24":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"25":[["= L\")                                                                                               ",{}]],"26":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"27":[["] = R\")                                                                                             ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"29":[["                j ksl5                                  #continue the loop                          ",{}]],"30":[["endkl5:                                                                                             ",{}]],"31":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"32":[["ndition)                                                                                            ",{}]],"33":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100133,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.499999999999999e-05,{"lines":{"0":[["the array(after the one at t4)                                                                      ",{}]],"1":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"2":[["= L\")                                                                                               ",{}]],"3":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"4":[["] = R\")                                                                                             ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"6":[["                j ksl4                                  #continue the loop                          ",{}]],"7":[["endkl4:                                                                                             ",{}]],"8":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"9":[["ndition)                                                                                            ",{}]],"10":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"12":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"13":[["                jal encryptblock                #encrypt                                            ",{}]],"14":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"15":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"16":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"17":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"18":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"19":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"20":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"21":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"22":[["the array(after the one at t4)                                                                      ",{}]],"23":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"24":[["= L\")                                                                                               ",{}]],"25":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"26":[["] = R\")                                                                                             ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"28":[["                j ksl5                                  #continue the loop                          ",{}]],"29":[["endkl5:                                                                                             ",{}]],"30":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"31":[["ndition)                                                                                            ",{}]],"32":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"33":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100119,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[1][j] ",{}]],"1":[["= L\")                                                                                               ",{}]],"2":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"3":[["] = R\")                                                                                             ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"5":[["                j ksl4                                  #continue the loop                          ",{}]],"6":[["endkl4:                                                                                             ",{}]],"7":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"8":[["ndition)                                                                                            ",{}]],"9":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"11":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"12":[["                jal encryptblock                #encrypt                                            ",{}]],"13":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"14":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"15":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"16":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"17":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"18":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"19":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"20":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"21":[["the array(after the one at t4)                                                                      ",{}]],"22":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"23":[["= L\")                                                                                               ",{}]],"24":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"25":[["] = R\")                                                                                             ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"27":[["                j ksl5                                  #continue the loop                          ",{}]],"28":[["endkl5:                                                                                             ",{}]],"29":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"30":[["ndition)                                                                                            ",{}]],"31":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"32":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"33":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100131,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["= L\")                                                                                               ",{}]],"1":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"2":[["] = R\")                                                                                             ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"4":[["                j ksl4                                  #continue the loop                          ",{}]],"5":[["endkl4:                                                                                             ",{}]],"6":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"7":[["ndition)                                                                                            ",{}]],"8":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"10":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"11":[["                jal encryptblock                #encrypt                                            ",{}]],"12":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"13":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"14":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"15":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"16":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"17":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"18":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"19":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"20":[["the array(after the one at t4)                                                                      ",{}]],"21":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"22":[["= L\")                                                                                               ",{}]],"23":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"24":[["] = R\")                                                                                             ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"26":[["                j ksl5                                  #continue the loop                          ",{}]],"27":[["endkl5:                                                                                             ",{}]],"28":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"29":[["ndition)                                                                                            ",{}]],"30":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"31":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"32":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"33":[["                jal encryptblock                #encrypt                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100088,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[8.899999999999999e-05,{"lines":{"0":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[1][j+1",{}]],"1":[["] = R\")                                                                                             ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"3":[["                j ksl4                                  #continue the loop                          ",{}]],"4":[["endkl4:                                                                                             ",{}]],"5":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"6":[["ndition)                                                                                            ",{}]],"7":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"9":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"10":[["                jal encryptblock                #encrypt                                            ",{}]],"11":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"12":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"13":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"14":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"15":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"16":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"17":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"18":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"19":[["the array(after the one at t4)                                                                      ",{}]],"20":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"21":[["= L\")                                                                                               ",{}]],"22":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"23":[["] = R\")                                                                                             ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"25":[["                j ksl5                                  #continue the loop                          ",{}]],"26":[["endkl5:                                                                                             ",{}]],"27":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"28":[["ndition)                                                                                            ",{}]],"29":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"30":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"31":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"32":[["                jal encryptblock                #encrypt                                            ",{}]],"33":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100003,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.2e-05,{"lines":{"0":[["] = R\")                                                                                             ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"2":[["                j ksl4                                  #continue the loop                          ",{}]],"3":[["endkl4:                                                                                             ",{}]],"4":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"5":[["ndition)                                                                                            ",{}]],"6":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"8":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"9":[["                jal encryptblock                #encrypt                                            ",{}]],"10":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"11":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"12":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"13":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"14":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"15":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"16":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"17":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"18":[["the array(after the one at t4)                                                                      ",{}]],"19":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"20":[["= L\")                                                                                               ",{}]],"21":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"22":[["] = R\")                                                                                             ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"24":[["                j ksl5                                  #continue the loop                          ",{}]],"25":[["endkl5:                                                                                             ",{}]],"26":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"27":[["ndition)                                                                                            ",{}]],"28":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"29":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"30":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"31":[["                jal encryptblock                #encrypt                                            ",{}]],"32":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"33":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100515,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.2e-05,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"1":[["                j ksl4                                  #continue the loop                          ",{}]],"2":[["endkl4:                                                                                             ",{}]],"3":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"4":[["ndition)                                                                                            ",{}]],"5":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"7":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"8":[["                jal encryptblock                #encrypt                                            ",{}]],"9":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"10":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"11":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"12":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"13":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"14":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"15":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"16":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"17":[["the array(after the one at t4)                                                                      ",{}]],"18":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"19":[["= L\")                                                                                               ",{}]],"20":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"21":[["] = R\")                                                                                             ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"23":[["                j ksl5                                  #continue the loop                          ",{}]],"24":[["endkl5:                                                                                             ",{}]],"25":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"26":[["ndition)                                                                                            ",{}]],"27":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"28":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"29":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"30":[["                jal encryptblock                #encrypt                                            ",{}]],"31":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"32":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"33":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101155,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[8.6e-05,{"lines":{"0":[["                j ksl4                                  #continue the loop                          ",{}]],"1":[["endkl4:                                                                                             ",{}]],"2":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"3":[["ndition)                                                                                            ",{}]],"4":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"6":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"7":[["                jal encryptblock                #encrypt                                            ",{}]],"8":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"9":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"10":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"11":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"12":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"13":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"14":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"15":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"16":[["the array(after the one at t4)                                                                      ",{}]],"17":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"18":[["= L\")                                                                                               ",{}]],"19":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"20":[["] = R\")                                                                                             ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"22":[["                j ksl5                                  #continue the loop                          ",{}]],"23":[["endkl5:                                                                                             ",{}]],"24":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"25":[["ndition)                                                                                            ",{}]],"26":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"27":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"28":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"29":[["                jal encryptblock                #encrypt                                            ",{}]],"30":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"31":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"32":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"33":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10078,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[7.6e-05,{"lines":{"0":[["endkl4:                                                                                             ",{}]],"1":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"2":[["ndition)                                                                                            ",{}]],"3":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"5":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"6":[["                jal encryptblock                #encrypt                                            ",{}]],"7":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"8":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"9":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"10":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"11":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"12":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"13":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"14":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"15":[["the array(after the one at t4)                                                                      ",{}]],"16":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"17":[["= L\")                                                                                               ",{}]],"18":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"19":[["] = R\")                                                                                             ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"21":[["                j ksl5                                  #continue the loop                          ",{}]],"22":[["endkl5:                                                                                             ",{}]],"23":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"24":[["ndition)                                                                                            ",{}]],"25":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"26":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"27":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"28":[["                jal encryptblock                #encrypt                                            ",{}]],"29":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"30":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"31":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"32":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"33":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101195,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.3e-05,{"lines":{"0":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"1":[["ndition)                                                                                            ",{}]],"2":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"4":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"5":[["                jal encryptblock                #encrypt                                            ",{}]],"6":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"7":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"8":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"9":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"10":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"11":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"12":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"13":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"14":[["the array(after the one at t4)                                                                      ",{}]],"15":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"16":[["= L\")                                                                                               ",{}]],"17":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"18":[["] = R\")                                                                                             ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"20":[["                j ksl5                                  #continue the loop                          ",{}]],"21":[["endkl5:                                                                                             ",{}]],"22":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"23":[["ndition)                                                                                            ",{}]],"24":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"25":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"26":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"27":[["                jal encryptblock                #encrypt                                            ",{}]],"28":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"29":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"30":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"31":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"32":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"33":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101151,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.2e-05,{"lines":{"0":[["ndition)                                                                                            ",{}]],"1":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"3":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"4":[["                jal encryptblock                #encrypt                                            ",{}]],"5":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"6":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"7":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"8":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"9":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"10":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"11":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"12":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"13":[["the array(after the one at t4)                                                                      ",{}]],"14":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"15":[["= L\")                                                                                               ",{}]],"16":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"17":[["] = R\")                                                                                             ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"19":[["                j ksl5                                  #continue the loop                          ",{}]],"20":[["endkl5:                                                                                             ",{}]],"21":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"22":[["ndition)                                                                                            ",{}]],"23":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"24":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"25":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"26":[["                jal encryptblock                #encrypt                                            ",{}]],"27":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"28":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"29":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"30":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"31":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"32":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"33":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10028,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.4e-05,{"lines":{"0":[["ksl5:   beq $t0, $t1, endkl5    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"2":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"3":[["                jal encryptblock                #encrypt                                            ",{}]],"4":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"5":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"6":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"7":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"8":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"9":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"10":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"11":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"12":[["the array(after the one at t4)                                                                      ",{}]],"13":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"14":[["= L\")                                                                                               ",{}]],"15":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"16":[["] = R\")                                                                                             ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"18":[["                j ksl5                                  #continue the loop                          ",{}]],"19":[["endkl5:                                                                                             ",{}]],"20":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"21":[["ndition)                                                                                            ",{}]],"22":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"23":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"24":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"25":[["                jal encryptblock                #encrypt                                            ",{}]],"26":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"27":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"28":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"29":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"30":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"31":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"32":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"33":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101023,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"1":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"2":[["                jal encryptblock                #encrypt                                            ",{}]],"3":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"4":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"5":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"6":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"7":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"8":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"9":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"10":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"11":[["the array(after the one at t4)                                                                      ",{}]],"12":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"13":[["= L\")                                                                                               ",{}]],"14":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"15":[["] = R\")                                                                                             ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"17":[["                j ksl5                                  #continue the loop                          ",{}]],"18":[["endkl5:                                                                                             ",{}]],"19":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"20":[["ndition)                                                                                            ",{}]],"21":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"22":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"23":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"24":[["                jal encryptblock                #encrypt                                            ",{}]],"25":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"26":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"27":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"28":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"29":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"30":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"31":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"32":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"33":[["the array(after the one at t4)                                                                      ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101184,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.5e-05,{"lines":{"0":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"1":[["                jal encryptblock                #encrypt                                            ",{}]],"2":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"3":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"4":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"5":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"6":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"7":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"8":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"9":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"10":[["the array(after the one at t4)                                                                      ",{}]],"11":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"12":[["= L\")                                                                                               ",{}]],"13":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"14":[["] = R\")                                                                                             ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"16":[["                j ksl5                                  #continue the loop                          ",{}]],"17":[["endkl5:                                                                                             ",{}]],"18":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"19":[["ndition)                                                                                            ",{}]],"20":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"21":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"22":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"23":[["                jal encryptblock                #encrypt                                            ",{}]],"24":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"25":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"26":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"27":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"28":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"29":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"30":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"31":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"32":[["the array(after the one at t4)                                                                      ",{}]],"33":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100769,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["                jal encryptblock                #encrypt                                            ",{}]],"1":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"2":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"3":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"4":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"5":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"6":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"7":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"8":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"9":[["the array(after the one at t4)                                                                      ",{}]],"10":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"11":[["= L\")                                                                                               ",{}]],"12":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"13":[["] = R\")                                                                                             ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"15":[["                j ksl5                                  #continue the loop                          ",{}]],"16":[["endkl5:                                                                                             ",{}]],"17":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"18":[["ndition)                                                                                            ",{}]],"19":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"20":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"21":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"22":[["                jal encryptblock                #encrypt                                            ",{}]],"23":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"24":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"25":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"26":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"27":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"28":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"29":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"30":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"31":[["the array(after the one at t4)                                                                      ",{}]],"32":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"33":[["= L\")                                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100215,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"1":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"2":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"3":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"4":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"5":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"6":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"7":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"8":[["the array(after the one at t4)                                                                      ",{}]],"9":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"10":[["= L\")                                                                                               ",{}]],"11":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"12":[["] = R\")                                                                                             ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"14":[["                j ksl5                                  #continue the loop                          ",{}]],"15":[["endkl5:                                                                                             ",{}]],"16":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"17":[["ndition)                                                                                            ",{}]],"18":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"19":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"20":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"21":[["                jal encryptblock                #encrypt                                            ",{}]],"22":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"23":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"24":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"25":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"26":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"27":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"28":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"29":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"30":[["the array(after the one at t4)                                                                      ",{}]],"31":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"32":[["= L\")                                                                                               ",{}]],"33":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100874,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"1":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"2":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"3":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"4":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"5":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"6":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"7":[["the array(after the one at t4)                                                                      ",{}]],"8":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"9":[["= L\")                                                                                               ",{}]],"10":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"11":[["] = R\")                                                                                             ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"13":[["                j ksl5                                  #continue the loop                          ",{}]],"14":[["endkl5:                                                                                             ",{}]],"15":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"16":[["ndition)                                                                                            ",{}]],"17":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"18":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"19":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"20":[["                jal encryptblock                #encrypt                                            ",{}]],"21":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"22":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"23":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"24":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"25":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"26":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"27":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"28":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"29":[["the array(after the one at t4)                                                                      ",{}]],"30":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"31":[["= L\")                                                                                               ",{}]],"32":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"33":[["] = R\")                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101174,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.6e-05,{"lines":{"0":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"1":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"2":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"3":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"4":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"5":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"6":[["the array(after the one at t4)                                                                      ",{}]],"7":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"8":[["= L\")                                                                                               ",{}]],"9":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"10":[["] = R\")                                                                                             ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"12":[["                j ksl5                                  #continue the loop                          ",{}]],"13":[["endkl5:                                                                                             ",{}]],"14":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"15":[["ndition)                                                                                            ",{}]],"16":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"17":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"18":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"19":[["                jal encryptblock                #encrypt                                            ",{}]],"20":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"21":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"22":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"23":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"24":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"25":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"26":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"27":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"28":[["the array(after the one at t4)                                                                      ",{}]],"29":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"30":[["= L\")                                                                                               ",{}]],"31":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"32":[["] = R\")                                                                                             ",{}]],"33":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09993200000000001,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[2.7e-05,{"lines":{"0":[["kl5r:   la $t3, slistthree              #load the third S box's address into t3                     ",{}]],"1":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"2":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"3":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"4":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"5":[["the array(after the one at t4)                                                                      ",{}]],"6":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"7":[["= L\")                                                                                               ",{}]],"8":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"9":[["] = R\")                                                                                             ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"11":[["                j ksl5                                  #continue the loop                          ",{}]],"12":[["endkl5:                                                                                             ",{}]],"13":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"14":[["ndition)                                                                                            ",{}]],"15":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"16":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"17":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"18":[["                jal encryptblock                #encrypt                                            ",{}]],"19":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"20":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"21":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"22":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"23":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"24":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"25":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"26":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"27":[["the array(after the one at t4)                                                                      ",{}]],"28":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"29":[["= L\")                                                                                               ",{}]],"30":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"31":[["] = R\")                                                                                             ",{}]],"32":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"33":[["                j ksl6                                  #continue the loop                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101597,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.3e-05,{"lines":{"0":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"1":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"2":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"3":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"4":[["the array(after the one at t4)                                                                      ",{}]],"5":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"6":[["= L\")                                                                                               ",{}]],"7":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"8":[["] = R\")                                                                                             ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"10":[["                j ksl5                                  #continue the loop                          ",{}]],"11":[["endkl5:                                                                                             ",{}]],"12":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"13":[["ndition)                                                                                            ",{}]],"14":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"15":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"16":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"17":[["                jal encryptblock                #encrypt                                            ",{}]],"18":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"19":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"20":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"21":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"22":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"23":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"24":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"25":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"26":[["the array(after the one at t4)                                                                      ",{}]],"27":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"28":[["= L\")                                                                                               ",{}]],"29":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"30":[["] = R\")                                                                                             ",{}]],"31":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"32":[["                j ksl6                                  #continue the loop                          ",{}]],"33":[["endkl6:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10093,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.6e-05,{"lines":{"0":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"1":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"2":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"3":[["the array(after the one at t4)                                                                      ",{}]],"4":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"5":[["= L\")                                                                                               ",{}]],"6":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"7":[["] = R\")                                                                                             ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"9":[["                j ksl5                                  #continue the loop                          ",{}]],"10":[["endkl5:                                                                                             ",{}]],"11":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"12":[["ndition)                                                                                            ",{}]],"13":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"14":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"15":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"16":[["                jal encryptblock                #encrypt                                            ",{}]],"17":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"18":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"19":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"20":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"21":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"22":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"23":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"24":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"25":[["the array(after the one at t4)                                                                      ",{}]],"26":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"27":[["= L\")                                                                                               ",{}]],"28":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"29":[["] = R\")                                                                                             ",{}]],"30":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"31":[["                j ksl6                                  #continue the loop                          ",{}]],"32":[["endkl6:                                                                                             ",{}]],"33":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101017,{"lines":{"0":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"1":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"2":[["the array(after the one at t4)                                                                      ",{}]],"3":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"4":[["= L\")                                                                                               ",{}]],"5":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"6":[["] = R\")                                                                                             ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"8":[["                j ksl5                                  #continue the loop                          ",{}]],"9":[["endkl5:                                                                                             ",{}]],"10":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"11":[["ndition)                                                                                            ",{}]],"12":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"13":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"14":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"15":[["                jal encryptblock                #encrypt                                            ",{}]],"16":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"17":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"18":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"19":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"20":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"21":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"22":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"23":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"24":[["the array(after the one at t4)                                                                      ",{}]],"25":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"26":[["= L\")                                                                                               ",{}]],"27":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"28":[["] = R\")                                                                                             ",{}]],"29":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"30":[["                j ksl6                                  #continue the loop                          ",{}]],"31":[["endkl6:                                                                                             ",{}]],"32":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"33":[["        jr $ra                                                                                      ",{}]]}}],[0.101211,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[6.8e-05,{"lines":{"0":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"1":[["the array(after the one at t4)                                                                      ",{}]],"2":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"3":[["= L\")                                                                                               ",{}]],"4":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"5":[["] = R\")                                                                                             ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"7":[["                j ksl5                                  #continue the loop                          ",{}]],"8":[["endkl5:                                                                                             ",{}]],"9":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"10":[["ndition)                                                                                            ",{}]],"11":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"12":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"13":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"14":[["                jal encryptblock                #encrypt                                            ",{}]],"15":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"16":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"17":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"18":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"19":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"20":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"21":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"22":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"23":[["the array(after the one at t4)                                                                      ",{}]],"24":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"25":[["= L\")                                                                                               ",{}]],"26":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"27":[["] = R\")                                                                                             ",{}]],"28":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"29":[["                j ksl6                                  #continue the loop                          ",{}]],"30":[["endkl6:                                                                                             ",{}]],"31":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"32":[["        jr $ra                                                                                      ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100973,{"lines":{"0":[["the array(after the one at t4)                                                                      ",{}]],"1":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"2":[["= L\")                                                                                               ",{}]],"3":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"4":[["] = R\")                                                                                             ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"6":[["                j ksl5                                  #continue the loop                          ",{}]],"7":[["endkl5:                                                                                             ",{}]],"8":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"9":[["ndition)                                                                                            ",{}]],"10":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"11":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"12":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"13":[["                jal encryptblock                #encrypt                                            ",{}]],"14":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"15":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"16":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"17":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"18":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"19":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"20":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"21":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"22":[["the array(after the one at t4)                                                                      ",{}]],"23":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"24":[["= L\")                                                                                               ",{}]],"25":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"26":[["] = R\")                                                                                             ",{}]],"27":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"28":[["                j ksl6                                  #continue the loop                          ",{}]],"29":[["endkl6:                                                                                             ",{}]],"30":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"31":[["        jr $ra                                                                                      ",{}]],"32":[["                                                                                                    ",{}]],"33":[["testinput:                                                                                          ",{}]]}}],[0.101106,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[2][j] ",{}]],"1":[["= L\")                                                                                               ",{}]],"2":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"3":[["] = R\")                                                                                             ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"5":[["                j ksl5                                  #continue the loop                          ",{}]],"6":[["endkl5:                                                                                             ",{}]],"7":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"8":[["ndition)                                                                                            ",{}]],"9":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"10":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"11":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"12":[["                jal encryptblock                #encrypt                                            ",{}]],"13":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"14":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"15":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"16":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"17":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"18":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"19":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"20":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"21":[["the array(after the one at t4)                                                                      ",{}]],"22":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"23":[["= L\")                                                                                               ",{}]],"24":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"25":[["] = R\")                                                                                             ",{}]],"26":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"27":[["                j ksl6                                  #continue the loop                          ",{}]],"28":[["endkl6:                                                                                             ",{}]],"29":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"30":[["        jr $ra                                                                                      ",{}]],"31":[["                                                                                                    ",{}]],"32":[["testinput:                                                                                          ",{}]],"33":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100513,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.6e-05,{"lines":{"0":[["= L\")                                                                                               ",{}]],"1":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"2":[["] = R\")                                                                                             ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"4":[["                j ksl5                                  #continue the loop                          ",{}]],"5":[["endkl5:                                                                                             ",{}]],"6":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"7":[["ndition)                                                                                            ",{}]],"8":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"9":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"10":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"11":[["                jal encryptblock                #encrypt                                            ",{}]],"12":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"13":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"14":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"15":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"16":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"17":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"18":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"19":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"20":[["the array(after the one at t4)                                                                      ",{}]],"21":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"22":[["= L\")                                                                                               ",{}]],"23":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"24":[["] = R\")                                                                                             ",{}]],"25":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"26":[["                j ksl6                                  #continue the loop                          ",{}]],"27":[["endkl6:                                                                                             ",{}]],"28":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"29":[["        jr $ra                                                                                      ",{}]],"30":[["                                                                                                    ",{}]],"31":[["testinput:                                                                                          ",{}]],"32":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"33":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100611,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[9.1e-05,{"lines":{"0":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[2][j+1",{}]],"1":[["] = R\")                                                                                             ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"3":[["                j ksl5                                  #continue the loop                          ",{}]],"4":[["endkl5:                                                                                             ",{}]],"5":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"6":[["ndition)                                                                                            ",{}]],"7":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"8":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"9":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"10":[["                jal encryptblock                #encrypt                                            ",{}]],"11":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"12":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"13":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"14":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"15":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"16":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"17":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"18":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"19":[["the array(after the one at t4)                                                                      ",{}]],"20":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"21":[["= L\")                                                                                               ",{}]],"22":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"23":[["] = R\")                                                                                             ",{}]],"24":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"25":[["                j ksl6                                  #continue the loop                          ",{}]],"26":[["endkl6:                                                                                             ",{}]],"27":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"28":[["        jr $ra                                                                                      ",{}]],"29":[["                                                                                                    ",{}]],"30":[["testinput:                                                                                          ",{}]],"31":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"32":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"33":[["test it against 2.                                                                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100085,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.9e-05,{"lines":{"0":[["] = R\")                                                                                             ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"2":[["                j ksl5                                  #continue the loop                          ",{}]],"3":[["endkl5:                                                                                             ",{}]],"4":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"5":[["ndition)                                                                                            ",{}]],"6":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"7":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"8":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"9":[["                jal encryptblock                #encrypt                                            ",{}]],"10":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"11":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"12":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"13":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"14":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"15":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"16":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"17":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"18":[["the array(after the one at t4)                                                                      ",{}]],"19":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"20":[["= L\")                                                                                               ",{}]],"21":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"22":[["] = R\")                                                                                             ",{}]],"23":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"24":[["                j ksl6                                  #continue the loop                          ",{}]],"25":[["endkl6:                                                                                             ",{}]],"26":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"27":[["        jr $ra                                                                                      ",{}]],"28":[["                                                                                                    ",{}]],"29":[["testinput:                                                                                          ",{}]],"30":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"31":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"32":[["test it against 2.                                                                                  ",{}]],"33":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101049,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"1":[["                j ksl5                                  #continue the loop                          ",{}]],"2":[["endkl5:                                                                                             ",{}]],"3":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"4":[["ndition)                                                                                            ",{}]],"5":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"6":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"7":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"8":[["                jal encryptblock                #encrypt                                            ",{}]],"9":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"10":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"11":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"12":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"13":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"14":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"15":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"16":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"17":[["the array(after the one at t4)                                                                      ",{}]],"18":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"19":[["= L\")                                                                                               ",{}]],"20":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"21":[["] = R\")                                                                                             ",{}]],"22":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"23":[["                j ksl6                                  #continue the loop                          ",{}]],"24":[["endkl6:                                                                                             ",{}]],"25":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"26":[["        jr $ra                                                                                      ",{}]],"27":[["                                                                                                    ",{}]],"28":[["testinput:                                                                                          ",{}]],"29":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"30":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"31":[["test it against 2.                                                                                  ",{}]],"32":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"33":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]]}}],[0.100993,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.1e-05,{"lines":{"0":[["                j ksl5                                  #continue the loop                          ",{}]],"1":[["endkl5:                                                                                             ",{}]],"2":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"3":[["ndition)                                                                                            ",{}]],"4":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"5":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"6":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"7":[["                jal encryptblock                #encrypt                                            ",{}]],"8":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"9":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"10":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"11":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"12":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"13":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"14":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"15":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"16":[["the array(after the one at t4)                                                                      ",{}]],"17":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"18":[["= L\")                                                                                               ",{}]],"19":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"20":[["] = R\")                                                                                             ",{}]],"21":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"22":[["                j ksl6                                  #continue the loop                          ",{}]],"23":[["endkl6:                                                                                             ",{}]],"24":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"25":[["        jr $ra                                                                                      ",{}]],"26":[["                                                                                                    ",{}]],"27":[["testinput:                                                                                          ",{}]],"28":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"29":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"30":[["test it against 2.                                                                                  ",{}]],"31":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"32":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"33":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099951,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.2e-05,{"lines":{"0":[["endkl5:                                                                                             ",{}]],"1":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"2":[["ndition)                                                                                            ",{}]],"3":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"4":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"5":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"6":[["                jal encryptblock                #encrypt                                            ",{}]],"7":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"8":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"9":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"10":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"11":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"12":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"13":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"14":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"15":[["the array(after the one at t4)                                                                      ",{}]],"16":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"17":[["= L\")                                                                                               ",{}]],"18":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"19":[["] = R\")                                                                                             ",{}]],"20":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"21":[["                j ksl6                                  #continue the loop                          ",{}]],"22":[["endkl6:                                                                                             ",{}]],"23":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"24":[["        jr $ra                                                                                      ",{}]],"25":[["                                                                                                    ",{}]],"26":[["testinput:                                                                                          ",{}]],"27":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"28":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"29":[["test it against 2.                                                                                  ",{}]],"30":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"31":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"32":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"33":[["t invalid.                                                                                          ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100121,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[4.5e-05,{"lines":{"0":[["        li $t0, 0                               #reset t0 to 0 for looping(still using 256 as end co",{}]],"1":[["ndition)                                                                                            ",{}]],"2":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"3":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"4":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"5":[["                jal encryptblock                #encrypt                                            ",{}]],"6":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"7":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"8":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"9":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"10":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"11":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"12":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"13":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"14":[["the array(after the one at t4)                                                                      ",{}]],"15":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"16":[["= L\")                                                                                               ",{}]],"17":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"18":[["] = R\")                                                                                             ",{}]],"19":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"20":[["                j ksl6                                  #continue the loop                          ",{}]],"21":[["endkl6:                                                                                             ",{}]],"22":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"23":[["        jr $ra                                                                                      ",{}]],"24":[["                                                                                                    ",{}]],"25":[["testinput:                                                                                          ",{}]],"26":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"27":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"28":[["test it against 2.                                                                                  ",{}]],"29":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"30":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"31":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"32":[["t invalid.                                                                                          ",{}]],"33":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100426,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[7.2e-05,{"lines":{"0":[["ndition)                                                                                            ",{}]],"1":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"2":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"3":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"4":[["                jal encryptblock                #encrypt                                            ",{}]],"5":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"6":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"7":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"8":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"9":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"10":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"11":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"12":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"13":[["the array(after the one at t4)                                                                      ",{}]],"14":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"15":[["= L\")                                                                                               ",{}]],"16":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"17":[["] = R\")                                                                                             ",{}]],"18":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"19":[["                j ksl6                                  #continue the loop                          ",{}]],"20":[["endkl6:                                                                                             ",{}]],"21":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"22":[["        jr $ra                                                                                      ",{}]],"23":[["                                                                                                    ",{}]],"24":[["testinput:                                                                                          ",{}]],"25":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"26":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"27":[["test it against 2.                                                                                  ",{}]],"28":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"29":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"30":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"31":[["t invalid.                                                                                          ",{}]],"32":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09910099999999999,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[2.6e-05,{"lines":{"0":[["ksl6:   beq $t0, $t1, endkl6    #jump to the end of the loop if we've finished                      ",{}]],"1":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"2":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"3":[["                jal encryptblock                #encrypt                                            ",{}]],"4":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"5":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"6":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"7":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"8":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"9":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"10":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"11":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"12":[["the array(after the one at t4)                                                                      ",{}]],"13":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"14":[["= L\")                                                                                               ",{}]],"15":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"16":[["] = R\")                                                                                             ",{}]],"17":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"18":[["                j ksl6                                  #continue the loop                          ",{}]],"19":[["endkl6:                                                                                             ",{}]],"20":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"21":[["        jr $ra                                                                                      ",{}]],"22":[["                                                                                                    ",{}]],"23":[["testinput:                                                                                          ",{}]],"24":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"25":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"26":[["test it against 2.                                                                                  ",{}]],"27":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"28":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"29":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"30":[["t invalid.                                                                                          ",{}]],"31":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"32":[["                                                                                                    ",{}]],"33":[["invalid:                                                                                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10099,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                addu $s3, $zero, $t0    #copy t0 into s3 to prevent data corruption                 ",{}]],"1":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"2":[["                jal encryptblock                #encrypt                                            ",{}]],"3":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"4":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"5":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"6":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"7":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"8":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"9":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"10":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"11":[["the array(after the one at t4)                                                                      ",{}]],"12":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"13":[["= L\")                                                                                               ",{}]],"14":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"15":[["] = R\")                                                                                             ",{}]],"16":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"17":[["                j ksl6                                  #continue the loop                          ",{}]],"18":[["endkl6:                                                                                             ",{}]],"19":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"20":[["        jr $ra                                                                                      ",{}]],"21":[["                                                                                                    ",{}]],"22":[["testinput:                                                                                          ",{}]],"23":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"24":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"25":[["test it against 2.                                                                                  ",{}]],"26":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"27":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"28":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"29":[["t invalid.                                                                                          ",{}]],"30":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"31":[["                                                                                                    ",{}]],"32":[["invalid:                                                                                            ",{}]],"33":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100218,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["                addu $s4, $zero, $a0    #copy a0 to s4 for same reason                              ",{}]],"1":[["                jal encryptblock                #encrypt                                            ",{}]],"2":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"3":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"4":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"5":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"6":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"7":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"8":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"9":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"10":[["the array(after the one at t4)                                                                      ",{}]],"11":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"12":[["= L\")                                                                                               ",{}]],"13":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"14":[["] = R\")                                                                                             ",{}]],"15":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"16":[["                j ksl6                                  #continue the loop                          ",{}]],"17":[["endkl6:                                                                                             ",{}]],"18":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"19":[["        jr $ra                                                                                      ",{}]],"20":[["                                                                                                    ",{}]],"21":[["testinput:                                                                                          ",{}]],"22":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"23":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"24":[["test it against 2.                                                                                  ",{}]],"25":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"26":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"27":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"28":[["t invalid.                                                                                          ",{}]],"29":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"30":[["                                                                                                    ",{}]],"31":[["invalid:                                                                                            ",{}]],"32":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"33":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100064,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.7e-05,{"lines":{"0":[["                jal encryptblock                #encrypt                                            ",{}]],"1":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"2":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"3":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"4":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"5":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"6":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"7":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"8":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"9":[["the array(after the one at t4)                                                                      ",{}]],"10":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"11":[["= L\")                                                                                               ",{}]],"12":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"13":[["] = R\")                                                                                             ",{}]],"14":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"15":[["                j ksl6                                  #continue the loop                          ",{}]],"16":[["endkl6:                                                                                             ",{}]],"17":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"18":[["        jr $ra                                                                                      ",{}]],"19":[["                                                                                                    ",{}]],"20":[["testinput:                                                                                          ",{}]],"21":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"22":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"23":[["test it against 2.                                                                                  ",{}]],"24":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"25":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"26":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"27":[["t invalid.                                                                                          ",{}]],"28":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"29":[["                                                                                                    ",{}]],"30":[["invalid:                                                                                            ",{}]],"31":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"32":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"33":[["        syscall                                 #print the notice                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100142,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.6e-05,{"lines":{"0":[["                addu $t0, $zero, $s3    #copy it back                                               ",{}]],"1":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"2":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"3":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"4":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"5":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"6":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"7":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"8":[["the array(after the one at t4)                                                                      ",{}]],"9":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"10":[["= L\")                                                                                               ",{}]],"11":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"12":[["] = R\")                                                                                             ",{}]],"13":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"14":[["                j ksl6                                  #continue the loop                          ",{}]],"15":[["endkl6:                                                                                             ",{}]],"16":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"17":[["        jr $ra                                                                                      ",{}]],"18":[["                                                                                                    ",{}]],"19":[["testinput:                                                                                          ",{}]],"20":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"21":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"22":[["test it against 2.                                                                                  ",{}]],"23":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"24":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"25":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"26":[["t invalid.                                                                                          ",{}]],"27":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"28":[["                                                                                                    ",{}]],"29":[["invalid:                                                                                            ",{}]],"30":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"31":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"32":[["        syscall                                 #print the notice                                   ",{}]],"33":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100284,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.5e-05,{"lines":{"0":[["                addu $a0, $zero, $s4    #copy it back                                               ",{}]],"1":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"2":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"3":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"4":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"5":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"6":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"7":[["the array(after the one at t4)                                                                      ",{}]],"8":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"9":[["= L\")                                                                                               ",{}]],"10":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"11":[["] = R\")                                                                                             ",{}]],"12":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"13":[["                j ksl6                                  #continue the loop                          ",{}]],"14":[["endkl6:                                                                                             ",{}]],"15":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"16":[["        jr $ra                                                                                      ",{}]],"17":[["                                                                                                    ",{}]],"18":[["testinput:                                                                                          ",{}]],"19":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"20":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"21":[["test it against 2.                                                                                  ",{}]],"22":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"23":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"24":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"25":[["t invalid.                                                                                          ",{}]],"26":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"27":[["                                                                                                    ",{}]],"28":[["invalid:                                                                                            ",{}]],"29":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"30":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"31":[["        syscall                                 #print the notice                                   ",{}]],"32":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"33":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100286,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.8e-05,{"lines":{"0":[["                li $t1, 18                              #for when we need to loop check again       ",{}]],"1":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"2":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"3":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"4":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"5":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"6":[["the array(after the one at t4)                                                                      ",{}]],"7":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"8":[["= L\")                                                                                               ",{}]],"9":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"10":[["] = R\")                                                                                             ",{}]],"11":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"12":[["                j ksl6                                  #continue the loop                          ",{}]],"13":[["endkl6:                                                                                             ",{}]],"14":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"15":[["        jr $ra                                                                                      ",{}]],"16":[["                                                                                                    ",{}]],"17":[["testinput:                                                                                          ",{}]],"18":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"19":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"20":[["test it against 2.                                                                                  ",{}]],"21":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"22":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"23":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"24":[["t invalid.                                                                                          ",{}]],"25":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"26":[["                                                                                                    ",{}]],"27":[["invalid:                                                                                            ",{}]],"28":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"29":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"30":[["        syscall                                 #print the notice                                   ",{}]],"31":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"32":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"33":[["        syscall                                 #exit with code a0                                  ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100042,{"lines":{"0":[["kl6r:   la $t3, slistfour               #load the fourth S box's address into t3                    ",{}]],"1":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"2":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"3":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"4":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"5":[["the array(after the one at t4)                                                                      ",{}]],"6":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"7":[["= L\")                                                                                               ",{}]],"8":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"9":[["] = R\")                                                                                             ",{}]],"10":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"11":[["                j ksl6                                  #continue the loop                          ",{}]],"12":[["endkl6:                                                                                             ",{}]],"13":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"14":[["        jr $ra                                                                                      ",{}]],"15":[["                                                                                                    ",{}]],"16":[["testinput:                                                                                          ",{}]],"17":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"18":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"19":[["test it against 2.                                                                                  ",{}]],"20":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"21":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"22":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"23":[["t invalid.                                                                                          ",{}]],"24":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"25":[["                                                                                                    ",{}]],"26":[["invalid:                                                                                            ",{}]],"27":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"28":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"29":[["        syscall                                 #print the notice                                   ",{}]],"30":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"31":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"32":[["        syscall                                 #exit with code a0                                  ",{}]],"33":[["                                                                                                    ",{}]]}}],[0.100132,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["                addu $t4, $zero, $t0    #copy t0 to t4 for array access                             ",{}]],"1":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"2":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"3":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"4":[["the array(after the one at t4)                                                                      ",{}]],"5":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"6":[["= L\")                                                                                               ",{}]],"7":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"8":[["] = R\")                                                                                             ",{}]],"9":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"10":[["                j ksl6                                  #continue the loop                          ",{}]],"11":[["endkl6:                                                                                             ",{}]],"12":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"13":[["        jr $ra                                                                                      ",{}]],"14":[["                                                                                                    ",{}]],"15":[["testinput:                                                                                          ",{}]],"16":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"17":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"18":[["test it against 2.                                                                                  ",{}]],"19":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"20":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"21":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"22":[["t invalid.                                                                                          ",{}]],"23":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"24":[["                                                                                                    ",{}]],"25":[["invalid:                                                                                            ",{}]],"26":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"27":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"28":[["        syscall                                 #print the notice                                   ",{}]],"29":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"30":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"31":[["        syscall                                 #exit with code a0                                  ",{}]],"32":[["                                                                                                    ",{}]],"33":[["finish:                                                                                             ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.102915,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[2.7e-05,{"lines":{"0":[["                sll $t4, $t4, 2                 #shift t4 left twice for addressing                 ",{}]],"1":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"2":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"3":[["the array(after the one at t4)                                                                      ",{}]],"4":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"5":[["= L\")                                                                                               ",{}]],"6":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"7":[["] = R\")                                                                                             ",{}]],"8":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"9":[["                j ksl6                                  #continue the loop                          ",{}]],"10":[["endkl6:                                                                                             ",{}]],"11":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"12":[["        jr $ra                                                                                      ",{}]],"13":[["                                                                                                    ",{}]],"14":[["testinput:                                                                                          ",{}]],"15":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"16":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"17":[["test it against 2.                                                                                  ",{}]],"18":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"19":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"20":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"21":[["t invalid.                                                                                          ",{}]],"22":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"23":[["                                                                                                    ",{}]],"24":[["invalid:                                                                                            ",{}]],"25":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"26":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"27":[["        syscall                                 #print the notice                                   ",{}]],"28":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"29":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"30":[["        syscall                                 #exit with code a0                                  ",{}]],"31":[["                                                                                                    ",{}]],"32":[["finish:                                                                                             ",{}]],"33":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.097345,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.4e-05,{"lines":{"0":[["                addu $t4, $t4, $t3              #add the list address to t4                         ",{}]],"1":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"2":[["the array(after the one at t4)                                                                      ",{}]],"3":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"4":[["= L\")                                                                                               ",{}]],"5":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"6":[["] = R\")                                                                                             ",{}]],"7":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"8":[["                j ksl6                                  #continue the loop                          ",{}]],"9":[["endkl6:                                                                                             ",{}]],"10":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"11":[["        jr $ra                                                                                      ",{}]],"12":[["                                                                                                    ",{}]],"13":[["testinput:                                                                                          ",{}]],"14":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"15":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"16":[["test it against 2.                                                                                  ",{}]],"17":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"18":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"19":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"20":[["t invalid.                                                                                          ",{}]],"21":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"22":[["                                                                                                    ",{}]],"23":[["invalid:                                                                                            ",{}]],"24":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"25":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"26":[["        syscall                                 #print the notice                                   ",{}]],"27":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"28":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"29":[["        syscall                                 #exit with code a0                                  ",{}]],"30":[["                                                                                                    ",{}]],"31":[["finish:                                                                                             ",{}]],"32":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"33":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099675,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["                addu $t5, $t4, 4                #set t5 to t4 + 4 for accessing the next element in ",{}]],"1":[["the array(after the one at t4)                                                                      ",{}]],"2":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"3":[["= L\")                                                                                               ",{}]],"4":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"5":[["] = R\")                                                                                             ",{}]],"6":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"7":[["                j ksl6                                  #continue the loop                          ",{}]],"8":[["endkl6:                                                                                             ",{}]],"9":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"10":[["        jr $ra                                                                                      ",{}]],"11":[["                                                                                                    ",{}]],"12":[["testinput:                                                                                          ",{}]],"13":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"14":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"15":[["test it against 2.                                                                                  ",{}]],"16":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"17":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"18":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"19":[["t invalid.                                                                                          ",{}]],"20":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"21":[["                                                                                                    ",{}]],"22":[["invalid:                                                                                            ",{}]],"23":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"24":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"25":[["        syscall                                 #print the notice                                   ",{}]],"26":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"27":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"28":[["        syscall                                 #exit with code a0                                  ",{}]],"29":[["                                                                                                    ",{}]],"30":[["finish:                                                                                             ",{}]],"31":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"32":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"33":[["        syscall                                 #print the ending message                           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100879,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[4.9e-05,{"lines":{"0":[["the array(after the one at t4)                                                                      ",{}]],"1":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"2":[["= L\")                                                                                               ",{}]],"3":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"4":[["] = R\")                                                                                             ",{}]],"5":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"6":[["                j ksl6                                  #continue the loop                          ",{}]],"7":[["endkl6:                                                                                             ",{}]],"8":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"9":[["        jr $ra                                                                                      ",{}]],"10":[["                                                                                                    ",{}]],"11":[["testinput:                                                                                          ",{}]],"12":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"13":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"14":[["test it against 2.                                                                                  ",{}]],"15":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"16":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"17":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"18":[["t invalid.                                                                                          ",{}]],"19":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"20":[["                                                                                                    ",{}]],"21":[["invalid:                                                                                            ",{}]],"22":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"23":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"24":[["        syscall                                 #print the notice                                   ",{}]],"25":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"26":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"27":[["        syscall                                 #exit with code a0                                  ",{}]],"28":[["                                                                                                    ",{}]],"29":[["finish:                                                                                             ",{}]],"30":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"31":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"32":[["        syscall                                 #print the ending message                           ",{}]],"33":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101226,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[5.9e-05,{"lines":{"0":[["                sw $a2, ($t4)                   #set the P array's value at t4 equal to a2(\"S[3][j] ",{}]],"1":[["= L\")                                                                                               ",{}]],"2":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"3":[["] = R\")                                                                                             ",{}]],"4":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"5":[["                j ksl6                                  #continue the loop                          ",{}]],"6":[["endkl6:                                                                                             ",{}]],"7":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"8":[["        jr $ra                                                                                      ",{}]],"9":[["                                                                                                    ",{}]],"10":[["testinput:                                                                                          ",{}]],"11":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"12":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"13":[["test it against 2.                                                                                  ",{}]],"14":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"15":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"16":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"17":[["t invalid.                                                                                          ",{}]],"18":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"19":[["                                                                                                    ",{}]],"20":[["invalid:                                                                                            ",{}]],"21":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"22":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"23":[["        syscall                                 #print the notice                                   ",{}]],"24":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"25":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"26":[["        syscall                                 #exit with code a0                                  ",{}]],"27":[["                                                                                                    ",{}]],"28":[["finish:                                                                                             ",{}]],"29":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"30":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"31":[["        syscall                                 #print the ending message                           ",{}]],"32":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"33":[["        syscall                                 #exit                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100324,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.600000000000001e-05,{"lines":{"0":[["= L\")                                                                                               ",{}]],"1":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"2":[["] = R\")                                                                                             ",{}]],"3":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"4":[["                j ksl6                                  #continue the loop                          ",{}]],"5":[["endkl6:                                                                                             ",{}]],"6":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"7":[["        jr $ra                                                                                      ",{}]],"8":[["                                                                                                    ",{}]],"9":[["testinput:                                                                                          ",{}]],"10":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"11":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"12":[["test it against 2.                                                                                  ",{}]],"13":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"14":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"15":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"16":[["t invalid.                                                                                          ",{}]],"17":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"18":[["                                                                                                    ",{}]],"19":[["invalid:                                                                                            ",{}]],"20":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"21":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"22":[["        syscall                                 #print the notice                                   ",{}]],"23":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"24":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"25":[["        syscall                                 #exit with code a0                                  ",{}]],"26":[["                                                                                                    ",{}]],"27":[["finish:                                                                                             ",{}]],"28":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"29":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"30":[["        syscall                                 #print the ending message                           ",{}]],"31":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"32":[["        syscall                                 #exit                                               ",{}]],"33":[["                                                                                                    ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10002,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[2.7e-05,{"lines":{"0":[["                sw $a3, ($t5)                   #set the P array's value at t5 equal to a3(\"S[3][j+1",{}]],"1":[["] = R\")                                                                                             ",{}]],"2":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"3":[["                j ksl6                                  #continue the loop                          ",{}]],"4":[["endkl6:                                                                                             ",{}]],"5":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"6":[["        jr $ra                                                                                      ",{}]],"7":[["                                                                                                    ",{}]],"8":[["testinput:                                                                                          ",{}]],"9":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"10":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"11":[["test it against 2.                                                                                  ",{}]],"12":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"13":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"14":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"15":[["t invalid.                                                                                          ",{}]],"16":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"17":[["                                                                                                    ",{}]],"18":[["invalid:                                                                                            ",{}]],"19":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"20":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"21":[["        syscall                                 #print the notice                                   ",{}]],"22":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"23":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"24":[["        syscall                                 #exit with code a0                                  ",{}]],"25":[["                                                                                                    ",{}]],"26":[["finish:                                                                                             ",{}]],"27":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"28":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"29":[["        syscall                                 #print the ending message                           ",{}]],"30":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"31":[["        syscall                                 #exit                                               ",{}]],"32":[["                                                                                                    ",{}]],"33":[[".data                                                                                               ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.102047,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6.3e-05,{"lines":{"0":[["] = R\")                                                                                             ",{}]],"1":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"2":[["                j ksl6                                  #continue the loop                          ",{}]],"3":[["endkl6:                                                                                             ",{}]],"4":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"5":[["        jr $ra                                                                                      ",{}]],"6":[["                                                                                                    ",{}]],"7":[["testinput:                                                                                          ",{}]],"8":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"9":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"10":[["test it against 2.                                                                                  ",{}]],"11":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"12":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"13":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"14":[["t invalid.                                                                                          ",{}]],"15":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"16":[["                                                                                                    ",{}]],"17":[["invalid:                                                                                            ",{}]],"18":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"19":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"20":[["        syscall                                 #print the notice                                   ",{}]],"21":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"22":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"23":[["        syscall                                 #exit with code a0                                  ",{}]],"24":[["                                                                                                    ",{}]],"25":[["finish:                                                                                             ",{}]],"26":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"27":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"28":[["        syscall                                 #print the ending message                           ",{}]],"29":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"30":[["        syscall                                 #exit                                               ",{}]],"31":[["                                                                                                    ",{}]],"32":[[".data                                                                                               ",{}]],"33":[["inputbuff: .space 4096                                                                              ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099866,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[5.3e-05,{"lines":{"0":[["                addiu $t0, $t0, 1               #increment t0 for looping(invariant)                ",{}]],"1":[["                j ksl6                                  #continue the loop                          ",{}]],"2":[["endkl6:                                                                                             ",{}]],"3":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"4":[["        jr $ra                                                                                      ",{}]],"5":[["                                                                                                    ",{}]],"6":[["testinput:                                                                                          ",{}]],"7":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"8":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"9":[["test it against 2.                                                                                  ",{}]],"10":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"11":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"12":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"13":[["t invalid.                                                                                          ",{}]],"14":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"15":[["                                                                                                    ",{}]],"16":[["invalid:                                                                                            ",{}]],"17":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"18":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"19":[["        syscall                                 #print the notice                                   ",{}]],"20":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"21":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"22":[["        syscall                                 #exit with code a0                                  ",{}]],"23":[["                                                                                                    ",{}]],"24":[["finish:                                                                                             ",{}]],"25":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"26":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"27":[["        syscall                                 #print the ending message                           ",{}]],"28":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"29":[["        syscall                                 #exit                                               ",{}]],"30":[["                                                                                                    ",{}]],"31":[[".data                                                                                               ",{}]],"32":[["inputbuff: .space 4096                                                                              ",{}]],"33":[["buffer: .space 64                                                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100744,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000133,{"lines":{"0":[["                j ksl6                                  #continue the loop                          ",{}]],"1":[["endkl6:                                                                                             ",{}]],"2":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"3":[["        jr $ra                                                                                      ",{}]],"4":[["                                                                                                    ",{}]],"5":[["testinput:                                                                                          ",{}]],"6":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"7":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"8":[["test it against 2.                                                                                  ",{}]],"9":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"10":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"11":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"12":[["t invalid.                                                                                          ",{}]],"13":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"14":[["                                                                                                    ",{}]],"15":[["invalid:                                                                                            ",{}]],"16":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"17":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"18":[["        syscall                                 #print the notice                                   ",{}]],"19":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"20":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"21":[["        syscall                                 #exit with code a0                                  ",{}]],"22":[["                                                                                                    ",{}]],"23":[["finish:                                                                                             ",{}]],"24":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"25":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"26":[["        syscall                                 #print the ending message                           ",{}]],"27":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"28":[["        syscall                                 #exit                                               ",{}]],"29":[["                                                                                                    ",{}]],"30":[[".data                                                                                               ",{}]],"31":[["inputbuff: .space 4096                                                                              ",{}]],"32":[["buffer: .space 64                                                                                   ",{}]],"33":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101212,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000146,{"lines":{"0":[["endkl6:                                                                                             ",{}]],"1":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"2":[["        jr $ra                                                                                      ",{}]],"3":[["                                                                                                    ",{}]],"4":[["testinput:                                                                                          ",{}]],"5":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"6":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"7":[["test it against 2.                                                                                  ",{}]],"8":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"9":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"10":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"11":[["t invalid.                                                                                          ",{}]],"12":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"13":[["                                                                                                    ",{}]],"14":[["invalid:                                                                                            ",{}]],"15":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"16":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"17":[["        syscall                                 #print the notice                                   ",{}]],"18":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"19":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"20":[["        syscall                                 #exit with code a0                                  ",{}]],"21":[["                                                                                                    ",{}]],"22":[["finish:                                                                                             ",{}]],"23":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"24":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"25":[["        syscall                                 #print the ending message                           ",{}]],"26":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"27":[["        syscall                                 #exit                                               ",{}]],"28":[["                                                                                                    ",{}]],"29":[[".data                                                                                               ",{}]],"30":[["inputbuff: .space 4096                                                                              ",{}]],"31":[["buffer: .space 64                                                                                   ",{}]],"32":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"33":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099606,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000184,{"lines":{"0":[["        add $ra, $zero, $s1             #copy s1 back to ra to return to (hopefully) main           ",{}]],"1":[["        jr $ra                                                                                      ",{}]],"2":[["                                                                                                    ",{}]],"3":[["testinput:                                                                                          ",{}]],"4":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"5":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"6":[["test it against 2.                                                                                  ",{}]],"7":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"8":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"9":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"10":[["t invalid.                                                                                          ",{}]],"11":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"12":[["                                                                                                    ",{}]],"13":[["invalid:                                                                                            ",{}]],"14":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"15":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"16":[["        syscall                                 #print the notice                                   ",{}]],"17":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"18":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"19":[["        syscall                                 #exit with code a0                                  ",{}]],"20":[["                                                                                                    ",{}]],"21":[["finish:                                                                                             ",{}]],"22":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"23":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"24":[["        syscall                                 #print the ending message                           ",{}]],"25":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"26":[["        syscall                                 #exit                                               ",{}]],"27":[["                                                                                                    ",{}]],"28":[[".data                                                                                               ",{}]],"29":[["inputbuff: .space 4096                                                                              ",{}]],"30":[["buffer: .space 64                                                                                   ",{}]],"31":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"32":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"33":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100335,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[6e-05,{"lines":{"0":[["        jr $ra                                                                                      ",{}]],"1":[["                                                                                                    ",{}]],"2":[["testinput:                                                                                          ",{}]],"3":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"4":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"5":[["test it against 2.                                                                                  ",{}]],"6":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"7":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"8":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"9":[["t invalid.                                                                                          ",{}]],"10":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"11":[["                                                                                                    ",{}]],"12":[["invalid:                                                                                            ",{}]],"13":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"14":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"15":[["        syscall                                 #print the notice                                   ",{}]],"16":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"17":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"18":[["        syscall                                 #exit with code a0                                  ",{}]],"19":[["                                                                                                    ",{}]],"20":[["finish:                                                                                             ",{}]],"21":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"22":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"23":[["        syscall                                 #print the ending message                           ",{}]],"24":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"25":[["        syscall                                 #exit                                               ",{}]],"26":[["                                                                                                    ",{}]],"27":[[".data                                                                                               ",{}]],"28":[["inputbuff: .space 4096                                                                              ",{}]],"29":[["buffer: .space 64                                                                                   ",{}]],"30":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"31":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"32":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"33":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101518,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.00028,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["testinput:                                                                                          ",{}]],"2":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"3":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"4":[["test it against 2.                                                                                  ",{}]],"5":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"6":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"7":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"8":[["t invalid.                                                                                          ",{}]],"9":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"10":[["                                                                                                    ",{}]],"11":[["invalid:                                                                                            ",{}]],"12":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"13":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"14":[["        syscall                                 #print the notice                                   ",{}]],"15":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"16":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"17":[["        syscall                                 #exit with code a0                                  ",{}]],"18":[["                                                                                                    ",{}]],"19":[["finish:                                                                                             ",{}]],"20":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"21":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"22":[["        syscall                                 #print the ending message                           ",{}]],"23":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"24":[["        syscall                                 #exit                                               ",{}]],"25":[["                                                                                                    ",{}]],"26":[[".data                                                                                               ",{}]],"27":[["inputbuff: .space 4096                                                                              ",{}]],"28":[["buffer: .space 64                                                                                   ",{}]],"29":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"30":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"31":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"32":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"33":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.0992,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000127,{"lines":{"0":[["testinput:                                                                                          ",{}]],"1":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"2":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"3":[["test it against 2.                                                                                  ",{}]],"4":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"5":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"6":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"7":[["t invalid.                                                                                          ",{}]],"8":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"9":[["                                                                                                    ",{}]],"10":[["invalid:                                                                                            ",{}]],"11":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"12":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"13":[["        syscall                                 #print the notice                                   ",{}]],"14":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"15":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"16":[["        syscall                                 #exit with code a0                                  ",{}]],"17":[["                                                                                                    ",{}]],"18":[["finish:                                                                                             ",{}]],"19":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"20":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"21":[["        syscall                                 #print the ending message                           ",{}]],"22":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"23":[["        syscall                                 #exit                                               ",{}]],"24":[["                                                                                                    ",{}]],"25":[[".data                                                                                               ",{}]],"26":[["inputbuff: .space 4096                                                                              ",{}]],"27":[["buffer: .space 64                                                                                   ",{}]],"28":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"29":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"30":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"31":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"32":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"33":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100925,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000229,{"lines":{"0":[["        li $t0, 1                               #load 1 into t0                                     ",{}]],"1":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"2":[["test it against 2.                                                                                  ",{}]],"3":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"4":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"5":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"6":[["t invalid.                                                                                          ",{}]],"7":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"8":[["                                                                                                    ",{}]],"9":[["invalid:                                                                                            ",{}]],"10":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"11":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"12":[["        syscall                                 #print the notice                                   ",{}]],"13":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"14":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"15":[["        syscall                                 #exit with code a0                                  ",{}]],"16":[["                                                                                                    ",{}]],"17":[["finish:                                                                                             ",{}]],"18":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"19":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"20":[["        syscall                                 #print the ending message                           ",{}]],"21":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"22":[["        syscall                                 #exit                                               ",{}]],"23":[["                                                                                                    ",{}]],"24":[[".data                                                                                               ",{}]],"25":[["inputbuff: .space 4096                                                                              ",{}]],"26":[["buffer: .space 64                                                                                   ",{}]],"27":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"28":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"29":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"30":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"31":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"32":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"33":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09993200000000001,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.00017,{"lines":{"0":[["        bne $v0, $t0, tt                #test v0 against t0 (1). if they're unequal, go to where we ",{}]],"1":[["test it against 2.                                                                                  ",{}]],"2":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"3":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"4":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"5":[["t invalid.                                                                                          ",{}]],"6":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"7":[["                                                                                                    ",{}]],"8":[["invalid:                                                                                            ",{}]],"9":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"10":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"11":[["        syscall                                 #print the notice                                   ",{}]],"12":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"13":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"14":[["        syscall                                 #exit with code a0                                  ",{}]],"15":[["                                                                                                    ",{}]],"16":[["finish:                                                                                             ",{}]],"17":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"18":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"19":[["        syscall                                 #print the ending message                           ",{}]],"20":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"21":[["        syscall                                 #exit                                               ",{}]],"22":[["                                                                                                    ",{}]],"23":[[".data                                                                                               ",{}]],"24":[["inputbuff: .space 4096                                                                              ",{}]],"25":[["buffer: .space 64                                                                                   ",{}]],"26":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"27":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"28":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"29":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"30":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"31":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"32":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"33":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.0998,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000245,{"lines":{"0":[["test it against 2.                                                                                  ",{}]],"1":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"2":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"3":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"4":[["t invalid.                                                                                          ",{}]],"5":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"6":[["                                                                                                    ",{}]],"7":[["invalid:                                                                                            ",{}]],"8":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"9":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"10":[["        syscall                                 #print the notice                                   ",{}]],"11":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"12":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"13":[["        syscall                                 #exit with code a0                                  ",{}]],"14":[["                                                                                                    ",{}]],"15":[["finish:                                                                                             ",{}]],"16":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"17":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"18":[["        syscall                                 #print the ending message                           ",{}]],"19":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"20":[["        syscall                                 #exit                                               ",{}]],"21":[["                                                                                                    ",{}]],"22":[[".data                                                                                               ",{}]],"23":[["inputbuff: .space 4096                                                                              ",{}]],"24":[["buffer: .space 64                                                                                   ",{}]],"25":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"26":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"27":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"28":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"29":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"30":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"31":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"32":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"33":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100395,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000285,{"lines":{"0":[["        jr $ra                                  #otherwise, return to where we came from            ",{}]],"1":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"2":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"3":[["t invalid.                                                                                          ",{}]],"4":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"5":[["                                                                                                    ",{}]],"6":[["invalid:                                                                                            ",{}]],"7":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"8":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"9":[["        syscall                                 #print the notice                                   ",{}]],"10":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"11":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"12":[["        syscall                                 #exit with code a0                                  ",{}]],"13":[["                                                                                                    ",{}]],"14":[["finish:                                                                                             ",{}]],"15":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"16":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"17":[["        syscall                                 #print the ending message                           ",{}]],"18":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"19":[["        syscall                                 #exit                                               ",{}]],"20":[["                                                                                                    ",{}]],"21":[[".data                                                                                               ",{}]],"22":[["inputbuff: .space 4096                                                                              ",{}]],"23":[["buffer: .space 64                                                                                   ",{}]],"24":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"25":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"26":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"27":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"28":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"29":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"30":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"31":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"32":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"33":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10106,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000345,{"lines":{"0":[["tt:             li $t0, 2                               #load 2 into t0                             ",{}]],"1":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"2":[["t invalid.                                                                                          ",{}]],"3":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"4":[["                                                                                                    ",{}]],"5":[["invalid:                                                                                            ",{}]],"6":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"7":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"8":[["        syscall                                 #print the notice                                   ",{}]],"9":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"10":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"11":[["        syscall                                 #exit with code a0                                  ",{}]],"12":[["                                                                                                    ",{}]],"13":[["finish:                                                                                             ",{}]],"14":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"15":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"16":[["        syscall                                 #print the ending message                           ",{}]],"17":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"18":[["        syscall                                 #exit                                               ",{}]],"19":[["                                                                                                    ",{}]],"20":[[".data                                                                                               ",{}]],"21":[["inputbuff: .space 4096                                                                              ",{}]],"22":[["buffer: .space 64                                                                                   ",{}]],"23":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"24":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"25":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"26":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"27":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"28":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"29":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"30":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"31":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"32":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"33":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100207,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000291,{"lines":{"0":[["                bne $v0, $t0, invalid   #if v0 and t0 are still unequal we got neither 1 nor 2, inpu",{}]],"1":[["t invalid.                                                                                          ",{}]],"2":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"3":[["                                                                                                    ",{}]],"4":[["invalid:                                                                                            ",{}]],"5":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"6":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"7":[["        syscall                                 #print the notice                                   ",{}]],"8":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"9":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"10":[["        syscall                                 #exit with code a0                                  ",{}]],"11":[["                                                                                                    ",{}]],"12":[["finish:                                                                                             ",{}]],"13":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"14":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"15":[["        syscall                                 #print the ending message                           ",{}]],"16":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"17":[["        syscall                                 #exit                                               ",{}]],"18":[["                                                                                                    ",{}]],"19":[[".data                                                                                               ",{}]],"20":[["inputbuff: .space 4096                                                                              ",{}]],"21":[["buffer: .space 64                                                                                   ",{}]],"22":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"23":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"24":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"25":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"26":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"27":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"28":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"29":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"30":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"31":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"32":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"33":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.1004,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000268,{"lines":{"0":[["t invalid.                                                                                          ",{}]],"1":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"2":[["                                                                                                    ",{}]],"3":[["invalid:                                                                                            ",{}]],"4":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"5":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"6":[["        syscall                                 #print the notice                                   ",{}]],"7":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"8":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"9":[["        syscall                                 #exit with code a0                                  ",{}]],"10":[["                                                                                                    ",{}]],"11":[["finish:                                                                                             ",{}]],"12":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"13":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"14":[["        syscall                                 #print the ending message                           ",{}]],"15":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"16":[["        syscall                                 #exit                                               ",{}]],"17":[["                                                                                                    ",{}]],"18":[[".data                                                                                               ",{}]],"19":[["inputbuff: .space 4096                                                                              ",{}]],"20":[["buffer: .space 64                                                                                   ",{}]],"21":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"22":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"23":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"24":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"25":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"26":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"27":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"28":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"29":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"30":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"31":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"32":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"33":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.101541,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.00039,{"lines":{"0":[["        jr $ra                                  #otherwise, jump back to where we came from         ",{}]],"1":[["                                                                                                    ",{}]],"2":[["invalid:                                                                                            ",{}]],"3":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"4":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"5":[["        syscall                                 #print the notice                                   ",{}]],"6":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"7":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"8":[["        syscall                                 #exit with code a0                                  ",{}]],"9":[["                                                                                                    ",{}]],"10":[["finish:                                                                                             ",{}]],"11":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"12":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"13":[["        syscall                                 #print the ending message                           ",{}]],"14":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"15":[["        syscall                                 #exit                                               ",{}]],"16":[["                                                                                                    ",{}]],"17":[[".data                                                                                               ",{}]],"18":[["inputbuff: .space 4096                                                                              ",{}]],"19":[["buffer: .space 64                                                                                   ",{}]],"20":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"21":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"22":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"23":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"24":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"25":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"26":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"27":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"28":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"29":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"30":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"31":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"32":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"33":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100677,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000535,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["invalid:                                                                                            ",{}]],"2":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"3":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"4":[["        syscall                                 #print the notice                                   ",{}]],"5":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"6":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"7":[["        syscall                                 #exit with code a0                                  ",{}]],"8":[["                                                                                                    ",{}]],"9":[["finish:                                                                                             ",{}]],"10":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"11":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"12":[["        syscall                                 #print the ending message                           ",{}]],"13":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"14":[["        syscall                                 #exit                                               ",{}]],"15":[["                                                                                                    ",{}]],"16":[[".data                                                                                               ",{}]],"17":[["inputbuff: .space 4096                                                                              ",{}]],"18":[["buffer: .space 64                                                                                   ",{}]],"19":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"20":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"21":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"22":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"23":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"24":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"25":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"26":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"27":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"28":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"29":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"30":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"31":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"32":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"33":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100393,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000491,{"lines":{"0":[["invalid:                                                                                            ",{}]],"1":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"2":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"3":[["        syscall                                 #print the notice                                   ",{}]],"4":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"5":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"6":[["        syscall                                 #exit with code a0                                  ",{}]],"7":[["                                                                                                    ",{}]],"8":[["finish:                                                                                             ",{}]],"9":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"10":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"11":[["        syscall                                 #print the ending message                           ",{}]],"12":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"13":[["        syscall                                 #exit                                               ",{}]],"14":[["                                                                                                    ",{}]],"15":[[".data                                                                                               ",{}]],"16":[["inputbuff: .space 4096                                                                              ",{}]],"17":[["buffer: .space 64                                                                                   ",{}]],"18":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"19":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"20":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"21":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"22":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"23":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"24":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"25":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"26":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"27":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"28":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"29":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"30":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"31":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"32":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"33":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100663,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000495,{"lines":{"0":[["        la $a0, invalidinput    #load our invalidity notice into a0                                 ",{}]],"1":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"2":[["        syscall                                 #print the notice                                   ",{}]],"3":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"4":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"5":[["        syscall                                 #exit with code a0                                  ",{}]],"6":[["                                                                                                    ",{}]],"7":[["finish:                                                                                             ",{}]],"8":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"9":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"10":[["        syscall                                 #print the ending message                           ",{}]],"11":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"12":[["        syscall                                 #exit                                               ",{}]],"13":[["                                                                                                    ",{}]],"14":[[".data                                                                                               ",{}]],"15":[["inputbuff: .space 4096                                                                              ",{}]],"16":[["buffer: .space 64                                                                                   ",{}]],"17":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"18":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"19":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"20":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"21":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"22":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"23":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"24":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"25":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"26":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"27":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"28":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"29":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"30":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"31":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"32":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"33":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100553,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000544,{"lines":{"0":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"1":[["        syscall                                 #print the notice                                   ",{}]],"2":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"3":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"4":[["        syscall                                 #exit with code a0                                  ",{}]],"5":[["                                                                                                    ",{}]],"6":[["finish:                                                                                             ",{}]],"7":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"8":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"9":[["        syscall                                 #print the ending message                           ",{}]],"10":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"11":[["        syscall                                 #exit                                               ",{}]],"12":[["                                                                                                    ",{}]],"13":[[".data                                                                                               ",{}]],"14":[["inputbuff: .space 4096                                                                              ",{}]],"15":[["buffer: .space 64                                                                                   ",{}]],"16":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"17":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"18":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"19":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"20":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"21":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"22":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"23":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"24":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"25":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"26":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"27":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"28":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"29":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"30":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"31":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"32":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"33":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100609,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000711,{"lines":{"0":[["        syscall                                 #print the notice                                   ",{}]],"1":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"2":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"3":[["        syscall                                 #exit with code a0                                  ",{}]],"4":[["                                                                                                    ",{}]],"5":[["finish:                                                                                             ",{}]],"6":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"7":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"8":[["        syscall                                 #print the ending message                           ",{}]],"9":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"10":[["        syscall                                 #exit                                               ",{}]],"11":[["                                                                                                    ",{}]],"12":[[".data                                                                                               ",{}]],"13":[["inputbuff: .space 4096                                                                              ",{}]],"14":[["buffer: .space 64                                                                                   ",{}]],"15":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"16":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"17":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"18":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"19":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"20":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"21":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"22":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"23":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"24":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"25":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"26":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"27":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"28":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"29":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"30":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"31":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"32":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"33":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099749,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000544,{"lines":{"0":[["        li $a0, 1                               #set a0 to 1, an arbitrary error code               ",{}]],"1":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"2":[["        syscall                                 #exit with code a0                                  ",{}]],"3":[["                                                                                                    ",{}]],"4":[["finish:                                                                                             ",{}]],"5":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"6":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"7":[["        syscall                                 #print the ending message                           ",{}]],"8":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"9":[["        syscall                                 #exit                                               ",{}]],"10":[["                                                                                                    ",{}]],"11":[[".data                                                                                               ",{}]],"12":[["inputbuff: .space 4096                                                                              ",{}]],"13":[["buffer: .space 64                                                                                   ",{}]],"14":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"15":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"16":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"17":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"18":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"19":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"20":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"21":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"22":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"23":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"24":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"25":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"26":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"27":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"28":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"29":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"30":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"31":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"32":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"33":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100609,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000599,{"lines":{"0":[["        li $v0, 17                              #set v0 to 17 for exiting with a code               ",{}]],"1":[["        syscall                                 #exit with code a0                                  ",{}]],"2":[["                                                                                                    ",{}]],"3":[["finish:                                                                                             ",{}]],"4":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"5":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"6":[["        syscall                                 #print the ending message                           ",{}]],"7":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"8":[["        syscall                                 #exit                                               ",{}]],"9":[["                                                                                                    ",{}]],"10":[[".data                                                                                               ",{}]],"11":[["inputbuff: .space 4096                                                                              ",{}]],"12":[["buffer: .space 64                                                                                   ",{}]],"13":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"14":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"15":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"16":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"17":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"18":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"19":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"20":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"21":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"22":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"23":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"24":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"25":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"26":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"27":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"28":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"29":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"30":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"31":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"32":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"33":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10048,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.0006310000000000001,{"lines":{"0":[["        syscall                                 #exit with code a0                                  ",{}]],"1":[["                                                                                                    ",{}]],"2":[["finish:                                                                                             ",{}]],"3":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"4":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"5":[["        syscall                                 #print the ending message                           ",{}]],"6":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"7":[["        syscall                                 #exit                                               ",{}]],"8":[["                                                                                                    ",{}]],"9":[[".data                                                                                               ",{}]],"10":[["inputbuff: .space 4096                                                                              ",{}]],"11":[["buffer: .space 64                                                                                   ",{}]],"12":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"13":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"14":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"15":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"16":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"17":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"18":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"19":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"20":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"21":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"22":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"23":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"24":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"25":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"26":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"27":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"28":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"29":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"30":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"31":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"32":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"33":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099657,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000628,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["finish:                                                                                             ",{}]],"2":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"3":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"4":[["        syscall                                 #print the ending message                           ",{}]],"5":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"6":[["        syscall                                 #exit                                               ",{}]],"7":[["                                                                                                    ",{}]],"8":[[".data                                                                                               ",{}]],"9":[["inputbuff: .space 4096                                                                              ",{}]],"10":[["buffer: .space 64                                                                                   ",{}]],"11":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"12":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"13":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"14":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"15":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"16":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"17":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"18":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"19":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"20":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"21":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"22":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"23":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"24":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"25":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"26":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"27":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"28":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"29":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"30":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"31":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"32":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"33":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09979200000000001,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000633,{"lines":{"0":[["finish:                                                                                             ",{}]],"1":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"2":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"3":[["        syscall                                 #print the ending message                           ",{}]],"4":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"5":[["        syscall                                 #exit                                               ",{}]],"6":[["                                                                                                    ",{}]],"7":[[".data                                                                                               ",{}]],"8":[["inputbuff: .space 4096                                                                              ",{}]],"9":[["buffer: .space 64                                                                                   ",{}]],"10":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"11":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"12":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"13":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"14":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"15":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"16":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"17":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"18":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"19":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"20":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"21":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"22":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"23":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"24":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"25":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"26":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"27":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"28":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"29":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"30":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"31":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"32":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"33":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099344,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000722,{"lines":{"0":[["        la $a0, donemsg                 #load our ending message into a0                            ",{}]],"1":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"2":[["        syscall                                 #print the ending message                           ",{}]],"3":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"4":[["        syscall                                 #exit                                               ",{}]],"5":[["                                                                                                    ",{}]],"6":[[".data                                                                                               ",{}]],"7":[["inputbuff: .space 4096                                                                              ",{}]],"8":[["buffer: .space 64                                                                                   ",{}]],"9":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"10":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"11":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"12":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"13":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"14":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"15":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"16":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"17":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"18":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"19":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"20":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"21":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"22":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"23":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"24":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"25":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"26":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"27":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"28":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"29":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"30":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"31":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"32":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"33":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099471,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000691,{"lines":{"0":[["        li $v0, 4                               #set v0 to 4 for string printing                    ",{}]],"1":[["        syscall                                 #print the ending message                           ",{}]],"2":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"3":[["        syscall                                 #exit                                               ",{}]],"4":[["                                                                                                    ",{}]],"5":[[".data                                                                                               ",{}]],"6":[["inputbuff: .space 4096                                                                              ",{}]],"7":[["buffer: .space 64                                                                                   ",{}]],"8":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"9":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"10":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"11":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"12":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"13":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"14":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"15":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"16":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"17":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"18":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"19":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"20":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"21":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"22":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"23":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"24":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"25":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"26":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"27":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"28":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"29":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"30":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"31":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"32":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"33":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099352,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000767,{"lines":{"0":[["        syscall                                 #print the ending message                           ",{}]],"1":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"2":[["        syscall                                 #exit                                               ",{}]],"3":[["                                                                                                    ",{}]],"4":[[".data                                                                                               ",{}]],"5":[["inputbuff: .space 4096                                                                              ",{}]],"6":[["buffer: .space 64                                                                                   ",{}]],"7":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"8":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"9":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"10":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"11":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"12":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"13":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"14":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"15":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"16":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"17":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"18":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"19":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"20":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"21":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"22":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"23":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"24":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"25":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"26":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"27":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"28":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"29":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"30":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"31":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"32":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"33":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.09933,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.0006500000000000001,{"lines":{"0":[["        li $v0, 10                              #set v0 to 10 for exiting                           ",{}]],"1":[["        syscall                                 #exit                                               ",{}]],"2":[["                                                                                                    ",{}]],"3":[[".data                                                                                               ",{}]],"4":[["inputbuff: .space 4096                                                                              ",{}]],"5":[["buffer: .space 64                                                                                   ",{}]],"6":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"7":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"8":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"9":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"10":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"11":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"12":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"13":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"14":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"15":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"16":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"17":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"18":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"19":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"20":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"21":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"22":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"23":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"24":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"25":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"26":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"27":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"28":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"29":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"30":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"31":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"32":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"33":[["fe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.10073,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.000809,{"lines":{"0":[["        syscall                                 #exit                                               ",{}]],"1":[["                                                                                                    ",{}]],"2":[[".data                                                                                               ",{}]],"3":[["inputbuff: .space 4096                                                                              ",{}]],"4":[["buffer: .space 64                                                                                   ",{}]],"5":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"6":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"7":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"8":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"9":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"10":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"11":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"12":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"13":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"14":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"15":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"16":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"17":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"18":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"19":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"20":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"21":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"22":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"23":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"24":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"25":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"26":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"27":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"28":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"29":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"30":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"31":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"32":[["fe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, ",{}]],"33":[["0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100375,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.00076,{"lines":{"0":[["                                                                                                    ",{}]],"1":[[".data                                                                                               ",{}]],"2":[["inputbuff: .space 4096                                                                              ",{}]],"3":[["buffer: .space 64                                                                                   ",{}]],"4":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"5":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"6":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"7":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"8":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"9":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"10":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"11":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"12":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"13":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"14":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"15":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"16":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"17":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"18":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"19":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"20":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"21":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"22":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"23":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"24":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"25":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"26":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"27":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"28":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"29":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"30":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"31":[["fe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, ",{}]],"32":[["0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb",{}]],"33":[["9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.099921,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000864,{"lines":{"0":[[".data                                                                                               ",{}]],"1":[["inputbuff: .space 4096                                                                              ",{}]],"2":[["buffer: .space 64                                                                                   ",{}]],"3":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"4":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"5":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"6":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"7":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"8":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"9":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"10":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"11":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"12":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"13":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"14":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"15":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"16":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"17":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"18":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"19":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"20":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"21":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"22":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"23":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"24":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"25":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"26":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"27":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"28":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"29":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"30":[["fe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, ",{}]],"31":[["0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb",{}]],"32":[["9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0",{}]],"33":[["af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.100073,{"lines":{"34":[[" ESCO                                                                                               ",{}]]},"cursor":{"x":5}}],[0.000926,{"lines":{"0":[["inputbuff: .space 4096                                                                              ",{}]],"1":[["buffer: .space 64                                                                                   ",{}]],"2":[["plist: .word 0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xe",{}]],"3":[["c4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470",{}]],"4":[["917, 0x9216d5d9, 0x8979fb1b                                                                         ",{}]],"5":[["slistone: .word 0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, ",{}]],"6":[["0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4",{}]],"7":[["933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af260",{}]],"8":[["13, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, ",{}]],"9":[["0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55",{}]],"10":[["ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c5",{}]],"11":[["5d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, ",{}]],"12":[["0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe9",{}]],"13":[["8575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa48420",{}]],"14":[["04, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, ",{}]],"15":[["0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66",{}]],"16":[["ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a44",{}]],"17":[["9f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, ",{}]],"18":[["0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04",{}]],"19":[["c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec",{}]],"20":[["6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, ",{}]],"21":[["0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x67",{}]],"22":[["9f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5",{}]],"23":[["fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, ",{}]],"24":[["0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd",{}]],"25":[["2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e",{}]],"26":[["33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, ",{}]],"27":[["0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x88",{}]],"28":[["88b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752d",{}]],"29":[["fe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, ",{}]],"30":[["0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb",{}]],"31":[["9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0",{}]],"32":[["af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, ",{}]],"33":[["0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd6",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.241087,{"lines":{"34":[[" ESC[                                                                                               ",{}]]},"cursor":{"x":5}}],[0.011367,{"lines":{"0":[["0f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb66365",{}]],"1":[["21, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a              ",{}]],"2":[["slisttwo: .word 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, ",{}]],"3":[["0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4",{}]],"4":[["183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255d",{}]],"5":[["c1, 0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1, ",{}]],"6":[["0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb0",{}]],"7":[["3ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113",{}]],"8":[["f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7, 0xa9446146, ",{}]],"9":[["0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f",{}]],"10":[["6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd99308",{}]],"11":[["10, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, ",{}]],"12":[["0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd",{}]],"13":[["433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77",{}]],"14":[["d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, ",{}]],"15":[["0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99",{}]],"16":[["e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2d",{}]],"17":[["f4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, ",{}]],"18":[["0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xee",{}]],"19":[["cea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca8",{}]],"20":[["30, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, ",{}]],"21":[["0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c",{}]],"22":[["2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d",{}]],"23":[["77, 0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, ",{}]],"24":[["0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe",{}]],"25":[["28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f",{}]],"26":[["15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, ",{}]],"27":[["0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x56",{}]],"28":[["92b285, 0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f70",{}]],"29":[["61, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, ",{}]],"30":[["0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e",{}]],"31":[["447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c434",{}]],"32":[["65, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7              ",{}]],"33":[["slistthree: .word 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.276569,{"lines":{"34":[[" ESC[6                                                                                              ",{}]]},"cursor":{"x":6}}],[0.01132,{"lines":{"0":[[", 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0x",{}]],"1":[["bf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb",{}]],"2":[["8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb",{}]],"3":[[", 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0x",{}]],"4":[["aace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9",{}]],"5":[["faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e",{}]],"6":[[", 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0x",{}]],"7":[["a1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x0427",{}]],"8":[["2f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f",{}]],"9":[[", 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0x",{}]],"10":[["dff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b24",{}]],"11":[["0b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862",{}]],"12":[[", 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0x",{}]],"13":[["f4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0",{}]],"14":[["e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3",{}]],"15":[[", 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x",{}]],"16":[["6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b",{}]],"17":[["1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e",{}]],"18":[[", 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0x",{}]],"19":[["f6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8",{}]],"20":[["ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74",{}]],"21":[[", 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x",{}]],"22":[["8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d",{}]],"23":[["09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f",{}]],"24":[[", 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x",{}]],"25":[["0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc",{}]],"26":[["7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76",{}]],"27":[[", 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0x",{}]],"28":[["ed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5",{}]],"29":[["c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0            ",{}]],"30":[["slistfour: .word 0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,",{}]],"31":[[" 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6",{}]],"32":[["a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04",{}]],"33":[["dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.228821,{"lines":{"34":[["                                                                                                    ",{}]]},"cursor":{"x":0}}],[0.010132,{"lines":{"0":[[" 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2",{}]],"1":[["826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a",{}]],"2":[["915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,",{}]],"3":[[" 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe",{}]],"4":[["019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756",{}]],"5":[["055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,",{}]],"6":[[" 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x0",{}]],"7":[["3563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5",{}]],"8":[["862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,",{}]],"9":[[" 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1",{}]],"10":[["c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4c",{}]],"11":[["dd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,",{}]],"12":[[" 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe",{}]],"13":[["1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x61156",{}]],"14":[["0b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,",{}]],"15":[[" 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc",{}]],"16":[["6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6f",{}]],"17":[["c2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,",{}]],"18":[[" 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd",{}]],"19":[["3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6",{}]],"20":[["f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,",{}]],"21":[[" 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x8",{}]],"22":[["8d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27",{}]],"23":[["b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,",{}]],"24":[[" 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x8",{}]],"25":[["5cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f",{}]],"26":[["869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6             ",{}]],"27":[["pockey: .word 0xabcdef01 #1 elements(32 bits), Proof Of Concept key                                 ",{}]],"28":[["behaviorprompt: .asciiz \"Are we encrypting(1) or decrypting(2)? \"                                   ",{}]],"29":[["invalidinput: .asciiz \"Invalid input. Exiting. \\n\"                                                  ",{}]],"30":[["inputprompt: .asciiz \"Please enter the text you wish to encrypt:\\n\"                                 ",{}]],"31":[["eoutputtext: .asciiz \"Here is your encrypted output:\\n\"                                             ",{}]],"32":[["doutputtext: .asciiz \"\\nAnd here that is, decrypted:\\n\"                                             ",{}]],"33":[["donemsg: .asciiz \"\\nComplete! \\n\"                                                                   ",{}]],"34":[[":                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.261855,{"lines":{"34":[[" ESC[6                                                                                              ",{}]]},"cursor":{"x":6}}],[9.8e-05,{"lines":{"0":[[" 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe",{}]],"1":[["019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756",{}]],"2":[["055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,",{}]],"3":[[" 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x0",{}]],"4":[["3563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5",{}]],"5":[["862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,",{}]],"6":[[" 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1",{}]],"7":[["c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4c",{}]],"8":[["dd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,",{}]],"9":[[" 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe",{}]],"10":[["1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x61156",{}]],"11":[["0b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,",{}]],"12":[[" 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc",{}]],"13":[["6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6f",{}]],"14":[["c2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,",{}]],"15":[[" 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd",{}]],"16":[["3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6",{}]],"17":[["f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,",{}]],"18":[[" 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x8",{}]],"19":[["8d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27",{}]],"20":[["b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,",{}]],"21":[[" 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x8",{}]],"22":[["5cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f",{}]],"23":[["869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6             ",{}]],"24":[["pockey: .word 0xabcdef01 #1 elements(32 bits), Proof Of Concept key                                 ",{}]],"25":[["behaviorprompt: .asciiz \"Are we encrypting(1) or decrypting(2)? \"                                   ",{}]],"26":[["invalidinput: .asciiz \"Invalid input. Exiting. \\n\"                                                  ",{}]],"27":[["inputprompt: .asciiz \"Please enter the text you wish to encrypt:\\n\"                                 ",{}]],"28":[["eoutputtext: .asciiz \"Here is your encrypted output:\\n\"                                             ",{}]],"29":[["doutputtext: .asciiz \"\\nAnd here that is, decrypted:\\n\"                                             ",{}]],"30":[["donemsg: .asciiz \"\\nComplete! \\n\"                                                                   ",{}]],"31":[["mainloopbegin: .asciiz \"main loop about to begin \\n\"                                                ",{}]],"32":[["keyscheddone: .asciiz \"keyschedule done\\n\"                                                          ",{}]],"33":[["nl: .asciiz \"\\n\"                                                                                    ",{}]],"34":[["(END) ",{"inverse":true}],["                                                                                              ",{}]]}}],[1.375192,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|∗1) >> ",{}],["ls",{"fg":2}],["                                                          ",{}]],"1":[["LICENSE             ",{}],["blowfish",{"fg":1}],["            blowfish-wiki.c     blowfish.h                              ",{}]],"2":[["Mars4_4.jar         blowfish-old.s      blowfish.c          blowfish.s                              ",{}]],"3":[["README.md           blowfish-schneier.c blowfish.cpp        input                                   ",{}]],"4":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["less",{"fg":2}],[" ",{}],["blowfish.s",{"fg":6,"bold":true}],["                                             ",{}]],"5":[["                                                                                                    ",{}]],"6":[["                                                                                                    ",{}]],"7":[["                                                                                                    ",{}]],"8":[["                                                                                                    ",{}]],"9":[["                                                                                                    ",{}]],"10":[["                                                                                                    ",{}]],"11":[["                                                                                                    ",{}]],"12":[["                                                                                                    ",{}]],"13":[["                                                                                                    ",{}]],"14":[["                                                                                                    ",{}]],"15":[["                                                                                                    ",{}]],"16":[["                                                                                                    ",{}]],"17":[["                                                                                                    ",{}]],"18":[["                                                                                                    ",{}]],"19":[["                                                                                                    ",{}]],"20":[["                                                                                                    ",{}]],"21":[["                                                                                                    ",{}]],"22":[["                                                                                                    ",{}]],"23":[["                                                                                                    ",{}]],"24":[["                                                                                                    ",{}]],"25":[["                                                                                                    ",{}]],"26":[["                                                                                                    ",{}]],"27":[["                                                                                                    ",{}]],"28":[["                                                                                                    ",{}]],"29":[["                                                                                                    ",{}]],"30":[["                                                                                                    ",{}]],"31":[["                                                                                                    ",{}]],"32":[["                                                                                                    ",{}]],"33":[["                                                                                                    ",{}]],"34":[["                                                                                                    ",{}]]},"cursor":{"x":0,"y":5}}],[0.089506,{}],[0.0005820000000000001,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >>                                                             ",{}]]},"cursor":{"x":40}}],[1.77579,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> s                                                           ",{}]]},"cursor":{"x":41}}],[0.00142,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["s",{"fg":1}],["pim -file blowfish.s                                       ",{}]]}}],[0.310683,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["sp",{"fg":1}],["im -file blowfish.s                                       ",{}]]},"cursor":{"x":42}}],[0.463388,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["spi",{"fg":1}],["m -file blowfish.s                                       ",{}]]},"cursor":{"x":43}}],[0.09597799999999999,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["spim",{"fg":1}],[" -file blowfish.s                                       ",{}]]},"cursor":{"x":44}}],[0.000719,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["spim",{"fg":2}],[" -file blowfish.s                                       ",{}]]}}],[0.678824,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["spim -file blowfish.s ",{"fg":2}],["                                      ",{}]]},"cursor":{"x":62}}],[0.000588,{"lines":{"5":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["spim",{"fg":2}],[" ",{}],["-file",{"fg":6}],[" ",{}],["blowfish.s",{"fg":6}],["                                       ",{}]]}}],[0.90369,{"cursor":{"x":0,"y":6}}],[0.014827,{"lines":{"6":[["Loaded: /share/spim/exceptions.s                                                                    ",{}]]},"cursor":{"y":7}}],[0.002107,{"lines":{"7":[["Please enter the text you wish to encrypt:                                                          ",{}]]},"cursor":{"y":8}}],[1.478516,{"lines":{"8":[["h                                                                                                   ",{}]]},"cursor":{"x":1}}],[0.08755599999999999,{"lines":{"8":[["he                                                                                                  ",{}]]},"cursor":{"x":2}}],[0.223726,{"lines":{"8":[["hel                                                                                                 ",{}]]},"cursor":{"x":3}}],[0.152153,{"lines":{"8":[["hell                                                                                                ",{}]]},"cursor":{"x":4}}],[0.192007,{"lines":{"8":[["hello                                                                                               ",{}]]},"cursor":{"x":5}}],[0.17605,{"cursor":{"x":6}}],[0.247922,{"lines":{"8":[["hello w                                                                                             ",{}]]},"cursor":{"x":7}}],[0.05605,{"lines":{"8":[["hello wo                                                                                            ",{}]]},"cursor":{"x":8}}],[0.151979,{"lines":{"8":[["hello wor                                                                                           ",{}]]},"cursor":{"x":9}}],[0.111732,{"lines":{"8":[["hello worl                                                                                          ",{}]]},"cursor":{"x":10}}],[0.088301,{"lines":{"8":[["hello world                                                                                         ",{}]]},"cursor":{"x":11}}],[0.232017,{"lines":{"8":[["hello world!                                                                                        ",{}]]},"cursor":{"x":12}}],[0.367936,{"cursor":{"x":0,"y":9}}],[0.180975,{"lines":{"9":[["Here is your encrypted output:                                                                      ",{}]],"10":[["vT�_.P5B��di;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;",{}]],"11":[["�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�",{}]],"12":[["i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i",{}]],"13":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�                       ",{}]]},"cursor":{"x":77,"y":13}}],[0.003026,{"lines":{"13":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;",{}]],"14":[["�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�",{}]],"15":[["i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i",{}]],"16":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;",{}]],"17":[["�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�",{}]],"18":[["i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i",{}]],"19":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;",{}]],"20":[["�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�",{}]],"21":[["i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i",{}]],"22":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;",{}]],"23":[["�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�",{}]],"24":[["i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i",{}]],"25":[[";�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�i;�                                                           ",{}]]},"cursor":{"x":0,"y":26}}],[0.153684,{"lines":{"27":[["nd here that is, decrypted:                                                                         ",{}]],"28":[["hello world!                                                                                        ",{}]],"31":[["Complete!                                                                                           ",{}]]},"cursor":{"y":32}}],[0.080982,{}],[0.000415,{"lines":{"32":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >>                                                             ",{}]]},"cursor":{"x":40}}],[10.193336,{"lines":{"0":[["                                                                                                    ",{}]],"1":[["                                                                                                    ",{}]],"2":[["                                                                                                    ",{}]],"3":[["                                                                                                    ",{}]],"4":[["                                                                                                    ",{}]],"5":[["                                                                                                    ",{}]],"6":[["                                                                                                    ",{}]],"7":[["                                                                                                    ",{}]],"8":[["                                                                                                    ",{}]],"9":[["                                                                                                    ",{}]],"10":[["                                                                                                    ",{}]],"11":[["                                                                                                    ",{}]],"12":[["                                                                                                    ",{}]],"13":[["                                                                                                    ",{}]],"14":[["                                                                                                    ",{}]],"15":[["                                                                                                    ",{}]],"16":[["                                                                                                    ",{}]],"17":[["                                                                                                    ",{}]],"18":[["                                                                                                    ",{}]],"19":[["                                                                                                    ",{}]],"20":[["                                                                                                    ",{}]],"21":[["                                                                                                    ",{}]],"22":[["                                                                                                    ",{}]],"23":[["                                                                                                    ",{}]],"24":[["                                                                                                    ",{}]],"25":[["                                                                                                    ",{}]],"27":[["                                                                                                    ",{}]],"28":[["                                                                                                    ",{}]],"31":[["                                                                                                    ",{}]],"32":[["                                                                                                    ",{}]]},"cursor":{"x":0,"y":0}}],[0.083118,{}],[0.000264,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >>                                                             ",{}]]},"cursor":{"x":40}}],[2.264962,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> e                                                           ",{}]]},"cursor":{"x":41}}],[0.000977,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["e",{"fg":1}],["xit                                                        ",{}]]}}],[0.407225,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["ex",{"fg":1}],["it                                                        ",{}]]},"cursor":{"x":42}}],[0.00062,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["ex",{"fg":2}],["it                                                        ",{}]]}}],[0.365472,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["exi",{"fg":2}],["t                                                        ",{}]]},"cursor":{"x":43}}],[0.000484,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["exi",{"fg":1}],["t                                                        ",{}]]}}],[0.105186,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["exit",{"fg":1}],["                                                        ",{}]]},"cursor":{"x":44}}],[0.00063,{"lines":{"0":[["~/c/314FinalProject",{"fg":1,"bold":true}],[" (",{}],["stringinput",{"fg":2}],["|",{}],["∗1",{"fg":1}],[") >> ",{}],["exit",{"fg":2}],["                                                        ",{}]]}}],[0.16734,{"cursor":{"x":0,"y":1}}],[0.000673,{"cursor":{"y":2}}]]